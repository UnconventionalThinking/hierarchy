package net.unconventionalthinking.hierarchy.grammar.parser;

import net.unconventionalthinking.hierarchy.grammar.lexer.*;
import net.unconventionalthinking.hierarchy.grammar.node.*;
import net.unconventionalthinking.hierarchy.grammar.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;






@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }
        }
    }

}




MATRIX.KEY  {}


// _____________________________________________________________________________________________________________________
//
//  Matrix Tests
// _____________________________________________________________________________________________________________________


MATRIX matrix;

MATRIX.NEW matrix;
MATRIX.NEW matrix {}
MATRIX.NEW matrix: {} {} // empty fieldset and body


//  matrixname tests _______________________________________________________________
//  matrixname tests - scope resolution of package
MATRIX.NEW mypackage::matrixname_test2  {}

MATRIX.NEW mypackage.stuff.morestuff::matrixname_test3  {}
MATRIX.NEW (mypackage.stuff.morestuff::matrixname_test4 ) {}


//  Matrix schema tests ______________________
MATRIX.NEW uses_schema_t1 USES (S1) { }

// Test 3.2 - uses schema set
MATRIX.NEW uses_schema_t2 USES (MYSCHEMA) {}
MATRIX.NEW uses_schema_t3 USES (S1, S2, S3, somepackage::S5, anotherpackage.mypack::S8) {}

// Test 3.3 - uses schema var
MATRIX.NEW uses_schema_t4 USES $schemavar {}
MATRIX.NEW uses_schema_t4 USES ($schemavar) {}





// Matrix parameter map
MATRIX.NEW mypackage.stuff.morestuff::matrix USES (MYSCHEMA): { field1 => 1, field2 => 2 };
MATRIX.NEW mypackage.stuff.morestuff::matrix  USES (MYSCHEMA): { field1 => 234.3, field2 => 23 } {
	CHILD {}
}


//  Matrix member tests _______________________________________________________________
MATRIX.NEW matrix  { 
	MEMBER int myvar;
	MEMBER float stuff;
	MEMBER boolean junk[][][];
	MEMBER myClass[][] junk;
	
	CHILD {
		MEMBER int var2;
		
	}
}




// _____________________________________________________________________________________________________________________
//
//  Matrix Descriptor Tests
// _____________________________________________________________________________________________________________________

MATRIX.NEW Descriptor_Tests USES (S1) { 
	
	// Test 1 - descriptor with fieldset tuple
	TEST_1.STANDARD:	{ $:{ :sym1, :sym2, :sym3 }, 2};
	TEST_1_1.STANDARD:	{};
	TEST_1_2.STANDARD;
	//  Descriptor with scope resolution
	MySchema::TEST_1_2.STANDARD;
	com.mypackage::MySchema::TEST_1_2.STANDARD;
	
	
	// test 2 - label _______________________________
	TEST_2(`label`): {};
	TEST_2.CHILD.GRANDCHILD.MORE.AND.MORE.AND.MORE.CHILDREN(`label`):  {};
	
	// test 2.1 - label with package
	TEST_2_1(`label 2.1` IN mypack.stuff.com): {};
	TEST_2_1`label 2.2` IN mypack.stuff.com: {};
	



	// Test 3.1 - uses schema _______________________
	TEST_3_1 USES (S1) : {};
	
	// Test 3.2 - uses schema set
	TEST_3_2 USES (MYSCHEMA): {};
	TEST_3_2 USES (S1, S2, S3, somepackage::S5, anotherpackage.mypack::S8) {};
	
	// Test 3.3 - uses schema var
	TEST_3_3 USES $schemavar : {};




	// Test 4 - Field Set: Parameter Map_______________________
	TEST_4_1 USES (S1): { myfield1 => (232 + 323), myfield2 => var1, myfield3.child => ((232 + var2) * 22) } {}
	TEST_4_2 USES (S1): { myfield1 => myMethod(23, 23, var1), myfield2 => (22 + mymethod(var2)), myfield3.child => 4 };



	// Test 5 - Field Set: Tuple _______________________
	TEST_5_1 USES (S1): { 232, 22, 2.2, (232 + 323), var1, ((232 + var2) * 22)};
	TEST_5_2 USES (S1): { myMethod(23, 23, var1), (22 + mymethod(var2)), 4 } {}



	// Test 6 - descriptor body __________________
	TEST_6_1 `label` USES (S1): {} {
	
		CHILD: {myfield1 => 1} {
			GRANDCHILD: { myfield1 => 2 };
		}
		
		d1: { f1 => (v1) } { }

		d1: { f1 => 1, f2 => v1.v2, f3 => ((2+3) * 3) } {
			d2 {
				d2_1: { 1, 2, 3 } {
					d2_1_1: {2.2};
				}
			}
			d2 {
			
			}
			d3 {
			
			}
		
		}
	}
	
	//  Test 7 - descriptor sets
	${ SECTION.VIEW, SECTION.DATA }: {PassThrough => 1} {
		COMPONENT: { 1, 2 };
	}
	${ SECTION.VIEW: { PassThrough => 1}, SECTION.DATA: {1, 2, 3} } {
		COMPONENT: { 1, 2 };
	}
		
	
}


MATRIX.NEW ITEM_Tests USES (S1) { 
		
	`l 1`;
	`l 2`: {};
	`l 3` {
		// Test 1 - descriptor with fieldset tuple
		TEST_1.STANDARD:	{ $:{ :sym1, :sym2, :sym3 }, 2};
		TEST_1_1.STANDARD:	{};
	}
	
	`l 4` IN my.stuff {
		D1;
	}
	
	+`l 5`;
	+`l 6`: {};
	+`l 7` {
		// Test 1 - descriptor with fieldset tuple
		TEST_1.STANDARD:	{ $:{ :sym1, :sym2, :sym3 }, 2};
		TEST_1_1.STANDARD:	{};
	}
	
	
	
	`l 4`: { f1 => 23.2, f2 => var1} {
		// Test 1 - descriptor with fieldset tuple
		TEST_1.STANDARD: { :sym1, :sym2, :sym3 } {
		
			`l5`;
			d6;
		}
		
		+`l7` {}
		+`l 8`: {} {}
		
	}
	
	
		
}


