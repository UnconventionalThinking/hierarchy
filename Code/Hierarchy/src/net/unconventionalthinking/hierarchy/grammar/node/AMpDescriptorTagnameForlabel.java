/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMpDescriptorTagnameForlabel extends PDescriptorTagnameForlabel
{
    private TPlus _plus_;
    private TMpColonPercentOperator _mpColonPercentOperator_;
    private TIdentifier _identifier_;
    private final LinkedList<PDescriptorTagnameForlabelChildren> _descriptorTagnameForlabelChildren_ = new LinkedList<PDescriptorTagnameForlabelChildren>();

    public AMpDescriptorTagnameForlabel()
    {
        // Constructor
    }

    public AMpDescriptorTagnameForlabel(
        @SuppressWarnings("hiding") TPlus _plus_,
        @SuppressWarnings("hiding") TMpColonPercentOperator _mpColonPercentOperator_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<PDescriptorTagnameForlabelChildren> _descriptorTagnameForlabelChildren_)
    {
        // Constructor
        setPlus(_plus_);

        setMpColonPercentOperator(_mpColonPercentOperator_);

        setIdentifier(_identifier_);

        setDescriptorTagnameForlabelChildren(_descriptorTagnameForlabelChildren_);

    }

    @Override
    public Object clone()
    {
        return new AMpDescriptorTagnameForlabel(
            cloneNode(this._plus_),
            cloneNode(this._mpColonPercentOperator_),
            cloneNode(this._identifier_),
            cloneList(this._descriptorTagnameForlabelChildren_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMpDescriptorTagnameForlabel(this);
    }

    public TPlus getPlus()
    {
        return this._plus_;
    }

    public void setPlus(TPlus node)
    {
        if(this._plus_ != null)
        {
            this._plus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plus_ = node;
    }

    public TMpColonPercentOperator getMpColonPercentOperator()
    {
        return this._mpColonPercentOperator_;
    }

    public void setMpColonPercentOperator(TMpColonPercentOperator node)
    {
        if(this._mpColonPercentOperator_ != null)
        {
            this._mpColonPercentOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mpColonPercentOperator_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public LinkedList<PDescriptorTagnameForlabelChildren> getDescriptorTagnameForlabelChildren()
    {
        return this._descriptorTagnameForlabelChildren_;
    }

    public void setDescriptorTagnameForlabelChildren(List<PDescriptorTagnameForlabelChildren> list)
    {
        this._descriptorTagnameForlabelChildren_.clear();
        this._descriptorTagnameForlabelChildren_.addAll(list);
        for(PDescriptorTagnameForlabelChildren e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._plus_)
            + toString(this._mpColonPercentOperator_)
            + toString(this._identifier_)
            + toString(this._descriptorTagnameForlabelChildren_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._plus_ == child)
        {
            this._plus_ = null;
            return;
        }

        if(this._mpColonPercentOperator_ == child)
        {
            this._mpColonPercentOperator_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._descriptorTagnameForlabelChildren_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._plus_ == oldChild)
        {
            setPlus((TPlus) newChild);
            return;
        }

        if(this._mpColonPercentOperator_ == oldChild)
        {
            setMpColonPercentOperator((TMpColonPercentOperator) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PDescriptorTagnameForlabelChildren> i = this._descriptorTagnameForlabelChildren_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDescriptorTagnameForlabelChildren) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
