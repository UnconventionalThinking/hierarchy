/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMpComplexTypeMatrixMemberDeclaration extends PMatrixMemberDeclaration
{
    private TMpMemberKeyword _mpMemberKeyword_;
    private final LinkedList<PMatrixAccessModifier> _matrixAccessModifier_ = new LinkedList<PMatrixAccessModifier>();
    private TIdentifier _identifier_;
    private final LinkedList<PAdditionalIdentifier> _additionalIdentifier_ = new LinkedList<PAdditionalIdentifier>();
    private final LinkedList<PTypeComponent> _typeComponent_ = new LinkedList<PTypeComponent>();
    private PTypeArguments _typeArguments_;
    private final LinkedList<PDim> _dim_ = new LinkedList<PDim>();
    private PVariableDeclarators _variableDeclarators_;
    private TSemi _semi_;

    public AMpComplexTypeMatrixMemberDeclaration()
    {
        // Constructor
    }

    public AMpComplexTypeMatrixMemberDeclaration(
        @SuppressWarnings("hiding") TMpMemberKeyword _mpMemberKeyword_,
        @SuppressWarnings("hiding") List<PMatrixAccessModifier> _matrixAccessModifier_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<PAdditionalIdentifier> _additionalIdentifier_,
        @SuppressWarnings("hiding") List<PTypeComponent> _typeComponent_,
        @SuppressWarnings("hiding") PTypeArguments _typeArguments_,
        @SuppressWarnings("hiding") List<PDim> _dim_,
        @SuppressWarnings("hiding") PVariableDeclarators _variableDeclarators_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setMpMemberKeyword(_mpMemberKeyword_);

        setMatrixAccessModifier(_matrixAccessModifier_);

        setIdentifier(_identifier_);

        setAdditionalIdentifier(_additionalIdentifier_);

        setTypeComponent(_typeComponent_);

        setTypeArguments(_typeArguments_);

        setDim(_dim_);

        setVariableDeclarators(_variableDeclarators_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AMpComplexTypeMatrixMemberDeclaration(
            cloneNode(this._mpMemberKeyword_),
            cloneList(this._matrixAccessModifier_),
            cloneNode(this._identifier_),
            cloneList(this._additionalIdentifier_),
            cloneList(this._typeComponent_),
            cloneNode(this._typeArguments_),
            cloneList(this._dim_),
            cloneNode(this._variableDeclarators_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMpComplexTypeMatrixMemberDeclaration(this);
    }

    public TMpMemberKeyword getMpMemberKeyword()
    {
        return this._mpMemberKeyword_;
    }

    public void setMpMemberKeyword(TMpMemberKeyword node)
    {
        if(this._mpMemberKeyword_ != null)
        {
            this._mpMemberKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mpMemberKeyword_ = node;
    }

    public LinkedList<PMatrixAccessModifier> getMatrixAccessModifier()
    {
        return this._matrixAccessModifier_;
    }

    public void setMatrixAccessModifier(List<PMatrixAccessModifier> list)
    {
        this._matrixAccessModifier_.clear();
        this._matrixAccessModifier_.addAll(list);
        for(PMatrixAccessModifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public LinkedList<PAdditionalIdentifier> getAdditionalIdentifier()
    {
        return this._additionalIdentifier_;
    }

    public void setAdditionalIdentifier(List<PAdditionalIdentifier> list)
    {
        this._additionalIdentifier_.clear();
        this._additionalIdentifier_.addAll(list);
        for(PAdditionalIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PTypeComponent> getTypeComponent()
    {
        return this._typeComponent_;
    }

    public void setTypeComponent(List<PTypeComponent> list)
    {
        this._typeComponent_.clear();
        this._typeComponent_.addAll(list);
        for(PTypeComponent e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PTypeArguments getTypeArguments()
    {
        return this._typeArguments_;
    }

    public void setTypeArguments(PTypeArguments node)
    {
        if(this._typeArguments_ != null)
        {
            this._typeArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeArguments_ = node;
    }

    public LinkedList<PDim> getDim()
    {
        return this._dim_;
    }

    public void setDim(List<PDim> list)
    {
        this._dim_.clear();
        this._dim_.addAll(list);
        for(PDim e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PVariableDeclarators getVariableDeclarators()
    {
        return this._variableDeclarators_;
    }

    public void setVariableDeclarators(PVariableDeclarators node)
    {
        if(this._variableDeclarators_ != null)
        {
            this._variableDeclarators_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableDeclarators_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mpMemberKeyword_)
            + toString(this._matrixAccessModifier_)
            + toString(this._identifier_)
            + toString(this._additionalIdentifier_)
            + toString(this._typeComponent_)
            + toString(this._typeArguments_)
            + toString(this._dim_)
            + toString(this._variableDeclarators_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mpMemberKeyword_ == child)
        {
            this._mpMemberKeyword_ = null;
            return;
        }

        if(this._matrixAccessModifier_.remove(child))
        {
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._additionalIdentifier_.remove(child))
        {
            return;
        }

        if(this._typeComponent_.remove(child))
        {
            return;
        }

        if(this._typeArguments_ == child)
        {
            this._typeArguments_ = null;
            return;
        }

        if(this._dim_.remove(child))
        {
            return;
        }

        if(this._variableDeclarators_ == child)
        {
            this._variableDeclarators_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mpMemberKeyword_ == oldChild)
        {
            setMpMemberKeyword((TMpMemberKeyword) newChild);
            return;
        }

        for(ListIterator<PMatrixAccessModifier> i = this._matrixAccessModifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMatrixAccessModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PAdditionalIdentifier> i = this._additionalIdentifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PTypeComponent> i = this._typeComponent_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeComponent) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._typeArguments_ == oldChild)
        {
            setTypeArguments((PTypeArguments) newChild);
            return;
        }

        for(ListIterator<PDim> i = this._dim_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDim) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._variableDeclarators_ == oldChild)
        {
            setVariableDeclarators((PVariableDeclarators) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
