/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMpMatrixNewDeclaration extends PMatrixNewDeclaration
{
    private PMatrixNew _matrixNew_;
    private PMatrixName _matrixName_;
    private PUsesSchemas _usesSchemas_;
    private PMatrixFieldAndBodyOptions _matrixFieldAndBodyOptions_;

    public AMpMatrixNewDeclaration()
    {
        // Constructor
    }

    public AMpMatrixNewDeclaration(
        @SuppressWarnings("hiding") PMatrixNew _matrixNew_,
        @SuppressWarnings("hiding") PMatrixName _matrixName_,
        @SuppressWarnings("hiding") PUsesSchemas _usesSchemas_,
        @SuppressWarnings("hiding") PMatrixFieldAndBodyOptions _matrixFieldAndBodyOptions_)
    {
        // Constructor
        setMatrixNew(_matrixNew_);

        setMatrixName(_matrixName_);

        setUsesSchemas(_usesSchemas_);

        setMatrixFieldAndBodyOptions(_matrixFieldAndBodyOptions_);

    }

    @Override
    public Object clone()
    {
        return new AMpMatrixNewDeclaration(
            cloneNode(this._matrixNew_),
            cloneNode(this._matrixName_),
            cloneNode(this._usesSchemas_),
            cloneNode(this._matrixFieldAndBodyOptions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMpMatrixNewDeclaration(this);
    }

    public PMatrixNew getMatrixNew()
    {
        return this._matrixNew_;
    }

    public void setMatrixNew(PMatrixNew node)
    {
        if(this._matrixNew_ != null)
        {
            this._matrixNew_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._matrixNew_ = node;
    }

    public PMatrixName getMatrixName()
    {
        return this._matrixName_;
    }

    public void setMatrixName(PMatrixName node)
    {
        if(this._matrixName_ != null)
        {
            this._matrixName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._matrixName_ = node;
    }

    public PUsesSchemas getUsesSchemas()
    {
        return this._usesSchemas_;
    }

    public void setUsesSchemas(PUsesSchemas node)
    {
        if(this._usesSchemas_ != null)
        {
            this._usesSchemas_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._usesSchemas_ = node;
    }

    public PMatrixFieldAndBodyOptions getMatrixFieldAndBodyOptions()
    {
        return this._matrixFieldAndBodyOptions_;
    }

    public void setMatrixFieldAndBodyOptions(PMatrixFieldAndBodyOptions node)
    {
        if(this._matrixFieldAndBodyOptions_ != null)
        {
            this._matrixFieldAndBodyOptions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._matrixFieldAndBodyOptions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._matrixNew_)
            + toString(this._matrixName_)
            + toString(this._usesSchemas_)
            + toString(this._matrixFieldAndBodyOptions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._matrixNew_ == child)
        {
            this._matrixNew_ = null;
            return;
        }

        if(this._matrixName_ == child)
        {
            this._matrixName_ = null;
            return;
        }

        if(this._usesSchemas_ == child)
        {
            this._usesSchemas_ = null;
            return;
        }

        if(this._matrixFieldAndBodyOptions_ == child)
        {
            this._matrixFieldAndBodyOptions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._matrixNew_ == oldChild)
        {
            setMatrixNew((PMatrixNew) newChild);
            return;
        }

        if(this._matrixName_ == oldChild)
        {
            setMatrixName((PMatrixName) newChild);
            return;
        }

        if(this._usesSchemas_ == oldChild)
        {
            setUsesSchemas((PUsesSchemas) newChild);
            return;
        }

        if(this._matrixFieldAndBodyOptions_ == oldChild)
        {
            setMatrixFieldAndBodyOptions((PMatrixFieldAndBodyOptions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
