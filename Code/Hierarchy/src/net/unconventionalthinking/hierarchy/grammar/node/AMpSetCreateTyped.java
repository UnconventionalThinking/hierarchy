/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMpSetCreateTyped extends PSetCreateTyped
{
    private PTypedSetCreationOperOptions _typedSetCreationOperOptions_;
    private PMpTypes _mpTypes_;
    private PTypeCloseSetBody _typeCloseSetBody_;

    public AMpSetCreateTyped()
    {
        // Constructor
    }

    public AMpSetCreateTyped(
        @SuppressWarnings("hiding") PTypedSetCreationOperOptions _typedSetCreationOperOptions_,
        @SuppressWarnings("hiding") PMpTypes _mpTypes_,
        @SuppressWarnings("hiding") PTypeCloseSetBody _typeCloseSetBody_)
    {
        // Constructor
        setTypedSetCreationOperOptions(_typedSetCreationOperOptions_);

        setMpTypes(_mpTypes_);

        setTypeCloseSetBody(_typeCloseSetBody_);

    }

    @Override
    public Object clone()
    {
        return new AMpSetCreateTyped(
            cloneNode(this._typedSetCreationOperOptions_),
            cloneNode(this._mpTypes_),
            cloneNode(this._typeCloseSetBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMpSetCreateTyped(this);
    }

    public PTypedSetCreationOperOptions getTypedSetCreationOperOptions()
    {
        return this._typedSetCreationOperOptions_;
    }

    public void setTypedSetCreationOperOptions(PTypedSetCreationOperOptions node)
    {
        if(this._typedSetCreationOperOptions_ != null)
        {
            this._typedSetCreationOperOptions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typedSetCreationOperOptions_ = node;
    }

    public PMpTypes getMpTypes()
    {
        return this._mpTypes_;
    }

    public void setMpTypes(PMpTypes node)
    {
        if(this._mpTypes_ != null)
        {
            this._mpTypes_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mpTypes_ = node;
    }

    public PTypeCloseSetBody getTypeCloseSetBody()
    {
        return this._typeCloseSetBody_;
    }

    public void setTypeCloseSetBody(PTypeCloseSetBody node)
    {
        if(this._typeCloseSetBody_ != null)
        {
            this._typeCloseSetBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeCloseSetBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typedSetCreationOperOptions_)
            + toString(this._mpTypes_)
            + toString(this._typeCloseSetBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typedSetCreationOperOptions_ == child)
        {
            this._typedSetCreationOperOptions_ = null;
            return;
        }

        if(this._mpTypes_ == child)
        {
            this._mpTypes_ = null;
            return;
        }

        if(this._typeCloseSetBody_ == child)
        {
            this._typeCloseSetBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typedSetCreationOperOptions_ == oldChild)
        {
            setTypedSetCreationOperOptions((PTypedSetCreationOperOptions) newChild);
            return;
        }

        if(this._mpTypes_ == oldChild)
        {
            setMpTypes((PMpTypes) newChild);
            return;
        }

        if(this._typeCloseSetBody_ == oldChild)
        {
            setTypeCloseSetBody((PTypeCloseSetBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
