/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AGtNonWildTypeArguments extends PNonWildTypeArguments
{
    private TLt _lt_;
    private PReferenceTypeList _referenceTypeList_;
    private TGt _gt_;

    public AGtNonWildTypeArguments()
    {
        // Constructor
    }

    public AGtNonWildTypeArguments(
        @SuppressWarnings("hiding") TLt _lt_,
        @SuppressWarnings("hiding") PReferenceTypeList _referenceTypeList_,
        @SuppressWarnings("hiding") TGt _gt_)
    {
        // Constructor
        setLt(_lt_);

        setReferenceTypeList(_referenceTypeList_);

        setGt(_gt_);

    }

    @Override
    public Object clone()
    {
        return new AGtNonWildTypeArguments(
            cloneNode(this._lt_),
            cloneNode(this._referenceTypeList_),
            cloneNode(this._gt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGtNonWildTypeArguments(this);
    }

    public TLt getLt()
    {
        return this._lt_;
    }

    public void setLt(TLt node)
    {
        if(this._lt_ != null)
        {
            this._lt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lt_ = node;
    }

    public PReferenceTypeList getReferenceTypeList()
    {
        return this._referenceTypeList_;
    }

    public void setReferenceTypeList(PReferenceTypeList node)
    {
        if(this._referenceTypeList_ != null)
        {
            this._referenceTypeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._referenceTypeList_ = node;
    }

    public TGt getGt()
    {
        return this._gt_;
    }

    public void setGt(TGt node)
    {
        if(this._gt_ != null)
        {
            this._gt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lt_)
            + toString(this._referenceTypeList_)
            + toString(this._gt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lt_ == child)
        {
            this._lt_ = null;
            return;
        }

        if(this._referenceTypeList_ == child)
        {
            this._referenceTypeList_ = null;
            return;
        }

        if(this._gt_ == child)
        {
            this._gt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lt_ == oldChild)
        {
            setLt((TLt) newChild);
            return;
        }

        if(this._referenceTypeList_ == oldChild)
        {
            setReferenceTypeList((PReferenceTypeList) newChild);
            return;
        }

        if(this._gt_ == oldChild)
        {
            setGt((TGt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
