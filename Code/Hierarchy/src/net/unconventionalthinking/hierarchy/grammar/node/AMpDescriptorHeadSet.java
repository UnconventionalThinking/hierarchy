/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMpDescriptorHeadSet extends PDescriptorHeadSet
{
    private TMpSetCreationOperator _mpSetCreationOperator_;
    private PDescriptorHeadSetItem _descriptorHeadSetItem_;
    private final LinkedList<PDescriptorHeadChildren> _descriptorHeadChildren_ = new LinkedList<PDescriptorHeadChildren>();
    private TRBrc _rBrc_;

    public AMpDescriptorHeadSet()
    {
        // Constructor
    }

    public AMpDescriptorHeadSet(
        @SuppressWarnings("hiding") TMpSetCreationOperator _mpSetCreationOperator_,
        @SuppressWarnings("hiding") PDescriptorHeadSetItem _descriptorHeadSetItem_,
        @SuppressWarnings("hiding") List<PDescriptorHeadChildren> _descriptorHeadChildren_,
        @SuppressWarnings("hiding") TRBrc _rBrc_)
    {
        // Constructor
        setMpSetCreationOperator(_mpSetCreationOperator_);

        setDescriptorHeadSetItem(_descriptorHeadSetItem_);

        setDescriptorHeadChildren(_descriptorHeadChildren_);

        setRBrc(_rBrc_);

    }

    @Override
    public Object clone()
    {
        return new AMpDescriptorHeadSet(
            cloneNode(this._mpSetCreationOperator_),
            cloneNode(this._descriptorHeadSetItem_),
            cloneList(this._descriptorHeadChildren_),
            cloneNode(this._rBrc_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMpDescriptorHeadSet(this);
    }

    public TMpSetCreationOperator getMpSetCreationOperator()
    {
        return this._mpSetCreationOperator_;
    }

    public void setMpSetCreationOperator(TMpSetCreationOperator node)
    {
        if(this._mpSetCreationOperator_ != null)
        {
            this._mpSetCreationOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mpSetCreationOperator_ = node;
    }

    public PDescriptorHeadSetItem getDescriptorHeadSetItem()
    {
        return this._descriptorHeadSetItem_;
    }

    public void setDescriptorHeadSetItem(PDescriptorHeadSetItem node)
    {
        if(this._descriptorHeadSetItem_ != null)
        {
            this._descriptorHeadSetItem_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._descriptorHeadSetItem_ = node;
    }

    public LinkedList<PDescriptorHeadChildren> getDescriptorHeadChildren()
    {
        return this._descriptorHeadChildren_;
    }

    public void setDescriptorHeadChildren(List<PDescriptorHeadChildren> list)
    {
        this._descriptorHeadChildren_.clear();
        this._descriptorHeadChildren_.addAll(list);
        for(PDescriptorHeadChildren e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRBrc getRBrc()
    {
        return this._rBrc_;
    }

    public void setRBrc(TRBrc node)
    {
        if(this._rBrc_ != null)
        {
            this._rBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mpSetCreationOperator_)
            + toString(this._descriptorHeadSetItem_)
            + toString(this._descriptorHeadChildren_)
            + toString(this._rBrc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mpSetCreationOperator_ == child)
        {
            this._mpSetCreationOperator_ = null;
            return;
        }

        if(this._descriptorHeadSetItem_ == child)
        {
            this._descriptorHeadSetItem_ = null;
            return;
        }

        if(this._descriptorHeadChildren_.remove(child))
        {
            return;
        }

        if(this._rBrc_ == child)
        {
            this._rBrc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mpSetCreationOperator_ == oldChild)
        {
            setMpSetCreationOperator((TMpSetCreationOperator) newChild);
            return;
        }

        if(this._descriptorHeadSetItem_ == oldChild)
        {
            setDescriptorHeadSetItem((PDescriptorHeadSetItem) newChild);
            return;
        }

        for(ListIterator<PDescriptorHeadChildren> i = this._descriptorHeadChildren_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDescriptorHeadChildren) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrc_ == oldChild)
        {
            setRBrc((TRBrc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
