/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AClassNameMethodInvocation extends PMethodInvocation
{
    private TIdentifier _identifier1_;
    private final LinkedList<PAdditionalIdentifier> _additionalIdentifiers_ = new LinkedList<PAdditionalIdentifier>();
    private TDot _dot1_;
    private TSuperToken _superToken_;
    private TDot _dot2_;
    private PNonWildTypeArguments _nonWildTypeArguments_;
    private TIdentifier _identifier2_;
    private TLPar _lPar_;
    private PArgumentList _argumentList_;
    private TRPar _rPar_;

    public AClassNameMethodInvocation()
    {
        // Constructor
    }

    public AClassNameMethodInvocation(
        @SuppressWarnings("hiding") TIdentifier _identifier1_,
        @SuppressWarnings("hiding") List<PAdditionalIdentifier> _additionalIdentifiers_,
        @SuppressWarnings("hiding") TDot _dot1_,
        @SuppressWarnings("hiding") TSuperToken _superToken_,
        @SuppressWarnings("hiding") TDot _dot2_,
        @SuppressWarnings("hiding") PNonWildTypeArguments _nonWildTypeArguments_,
        @SuppressWarnings("hiding") TIdentifier _identifier2_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setIdentifier1(_identifier1_);

        setAdditionalIdentifiers(_additionalIdentifiers_);

        setDot1(_dot1_);

        setSuperToken(_superToken_);

        setDot2(_dot2_);

        setNonWildTypeArguments(_nonWildTypeArguments_);

        setIdentifier2(_identifier2_);

        setLPar(_lPar_);

        setArgumentList(_argumentList_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AClassNameMethodInvocation(
            cloneNode(this._identifier1_),
            cloneList(this._additionalIdentifiers_),
            cloneNode(this._dot1_),
            cloneNode(this._superToken_),
            cloneNode(this._dot2_),
            cloneNode(this._nonWildTypeArguments_),
            cloneNode(this._identifier2_),
            cloneNode(this._lPar_),
            cloneNode(this._argumentList_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassNameMethodInvocation(this);
    }

    public TIdentifier getIdentifier1()
    {
        return this._identifier1_;
    }

    public void setIdentifier1(TIdentifier node)
    {
        if(this._identifier1_ != null)
        {
            this._identifier1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier1_ = node;
    }

    public LinkedList<PAdditionalIdentifier> getAdditionalIdentifiers()
    {
        return this._additionalIdentifiers_;
    }

    public void setAdditionalIdentifiers(List<PAdditionalIdentifier> list)
    {
        this._additionalIdentifiers_.clear();
        this._additionalIdentifiers_.addAll(list);
        for(PAdditionalIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TDot getDot1()
    {
        return this._dot1_;
    }

    public void setDot1(TDot node)
    {
        if(this._dot1_ != null)
        {
            this._dot1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot1_ = node;
    }

    public TSuperToken getSuperToken()
    {
        return this._superToken_;
    }

    public void setSuperToken(TSuperToken node)
    {
        if(this._superToken_ != null)
        {
            this._superToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._superToken_ = node;
    }

    public TDot getDot2()
    {
        return this._dot2_;
    }

    public void setDot2(TDot node)
    {
        if(this._dot2_ != null)
        {
            this._dot2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot2_ = node;
    }

    public PNonWildTypeArguments getNonWildTypeArguments()
    {
        return this._nonWildTypeArguments_;
    }

    public void setNonWildTypeArguments(PNonWildTypeArguments node)
    {
        if(this._nonWildTypeArguments_ != null)
        {
            this._nonWildTypeArguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nonWildTypeArguments_ = node;
    }

    public TIdentifier getIdentifier2()
    {
        return this._identifier2_;
    }

    public void setIdentifier2(TIdentifier node)
    {
        if(this._identifier2_ != null)
        {
            this._identifier2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier2_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier1_)
            + toString(this._additionalIdentifiers_)
            + toString(this._dot1_)
            + toString(this._superToken_)
            + toString(this._dot2_)
            + toString(this._nonWildTypeArguments_)
            + toString(this._identifier2_)
            + toString(this._lPar_)
            + toString(this._argumentList_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier1_ == child)
        {
            this._identifier1_ = null;
            return;
        }

        if(this._additionalIdentifiers_.remove(child))
        {
            return;
        }

        if(this._dot1_ == child)
        {
            this._dot1_ = null;
            return;
        }

        if(this._superToken_ == child)
        {
            this._superToken_ = null;
            return;
        }

        if(this._dot2_ == child)
        {
            this._dot2_ = null;
            return;
        }

        if(this._nonWildTypeArguments_ == child)
        {
            this._nonWildTypeArguments_ = null;
            return;
        }

        if(this._identifier2_ == child)
        {
            this._identifier2_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier1_ == oldChild)
        {
            setIdentifier1((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PAdditionalIdentifier> i = this._additionalIdentifiers_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._dot1_ == oldChild)
        {
            setDot1((TDot) newChild);
            return;
        }

        if(this._superToken_ == oldChild)
        {
            setSuperToken((TSuperToken) newChild);
            return;
        }

        if(this._dot2_ == oldChild)
        {
            setDot2((TDot) newChild);
            return;
        }

        if(this._nonWildTypeArguments_ == oldChild)
        {
            setNonWildTypeArguments((PNonWildTypeArguments) newChild);
            return;
        }

        if(this._identifier2_ == oldChild)
        {
            setIdentifier2((TIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
