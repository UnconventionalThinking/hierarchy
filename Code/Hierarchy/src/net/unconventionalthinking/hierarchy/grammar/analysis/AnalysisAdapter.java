/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.analysis;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseACompilationUnit(ACompilationUnit node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        defaultCase(node);
    }

    public void caseAJavaTypeMatrixSectionAndJavaTypeOptions(AJavaTypeMatrixSectionAndJavaTypeOptions node)
    {
        defaultCase(node);
    }

    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        defaultCase(node);
    }

    public void caseAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        defaultCase(node);
    }

    public void caseAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        defaultCase(node);
    }

    public void caseAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        defaultCase(node);
    }

    public void caseAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixKey(AMpMatrixKey node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStdMatrixName(AMpStdMatrixName node)
    {
        defaultCase(node);
    }

    public void caseAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        defaultCase(node);
    }

    public void caseAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixNew(AMpMatrixNew node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaNew(AMpSchemaNew node)
    {
        defaultCase(node);
    }

    public void caseAMpDotNew(AMpDotNew node)
    {
        defaultCase(node);
    }

    public void caseAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        defaultCase(node);
    }

    public void caseAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        defaultCase(node);
    }

    public void caseAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        defaultCase(node);
    }

    public void caseAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        defaultCase(node);
    }

    public void caseAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        defaultCase(node);
    }

    public void caseAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        defaultCase(node);
    }

    public void caseAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        defaultCase(node);
    }

    public void caseAMpNameScope(AMpNameScope node)
    {
        defaultCase(node);
    }

    public void caseAMpNameScopeName(AMpNameScopeName node)
    {
        defaultCase(node);
    }

    public void caseAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        defaultCase(node);
    }

    public void caseAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        defaultCase(node);
    }

    public void caseAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        defaultCase(node);
    }

    public void caseAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        defaultCase(node);
    }

    public void caseAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpListSchemaSet(AMpListSchemaSet node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaNameList(AMpSchemaNameList node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaName(AMpSchemaName node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        defaultCase(node);
    }

    public void caseAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        defaultCase(node);
    }

    public void caseAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        defaultCase(node);
    }

    public void caseACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        defaultCase(node);
    }

    public void caseAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        defaultCase(node);
    }

    public void caseAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldname(AMpFieldname node)
    {
        defaultCase(node);
    }

    public void caseALabelname(ALabelname node)
    {
        defaultCase(node);
    }

    public void caseAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        defaultCase(node);
    }

    public void caseAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        defaultCase(node);
    }

    public void caseAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        defaultCase(node);
    }

    public void caseAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        defaultCase(node);
    }

    public void caseAMpInNamePackage(AMpInNamePackage node)
    {
        defaultCase(node);
    }

    public void caseAMpNamePackageName(AMpNamePackageName node)
    {
        defaultCase(node);
    }

    public void caseAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        defaultCase(node);
    }

    public void caseAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        defaultCase(node);
    }

    public void caseAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        defaultCase(node);
    }

    public void caseAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        defaultCase(node);
    }

    public void caseAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        defaultCase(node);
    }

    public void caseAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        defaultCase(node);
    }

    public void caseAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        defaultCase(node);
    }

    public void caseAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        defaultCase(node);
    }

    public void caseAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        defaultCase(node);
    }

    public void caseAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        defaultCase(node);
    }

    public void caseAMpSetItems(AMpSetItems node)
    {
        defaultCase(node);
    }

    public void caseAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpSubsetCreate(AMpSubsetCreate node)
    {
        defaultCase(node);
    }

    public void caseAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        defaultCase(node);
    }

    public void caseAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        defaultCase(node);
    }

    public void caseAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        defaultCase(node);
    }

    public void caseAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        defaultCase(node);
    }

    public void caseAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        defaultCase(node);
    }

    public void caseAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolCreation(AMpSymbolCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        defaultCase(node);
    }

    public void caseAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        defaultCase(node);
    }

    public void caseAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        defaultCase(node);
    }

    public void caseAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        defaultCase(node);
    }

    public void caseAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        defaultCase(node);
    }

    public void caseAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        defaultCase(node);
    }

    public void caseAMpSecondAccessor(AMpSecondAccessor node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        defaultCase(node);
    }

    public void caseAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolExpression(AMpSymbolExpression node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        defaultCase(node);
    }

    public void caseAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationCall(AMpAnnotationCall node)
    {
        defaultCase(node);
    }

    public void caseAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpCatchTypeList(AMpCatchTypeList node)
    {
        defaultCase(node);
    }

    public void caseAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        defaultCase(node);
    }

    public void caseAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        defaultCase(node);
    }

    public void caseAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        defaultCase(node);
    }

    public void caseAMpAllCatchType(AMpAllCatchType node)
    {
        defaultCase(node);
    }

    public void caseAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        defaultCase(node);
    }

    public void caseAMpIdCatchType(AMpIdCatchType node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        defaultCase(node);
    }

    public void caseAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        defaultCase(node);
    }

    public void caseAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterStatement(AMpFilterStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterWhere(AMpFilterWhere node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterFields(AMpFilterFields node)
    {
        defaultCase(node);
    }

    public void caseAMpWhereExpression(AMpWhereExpression node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        defaultCase(node);
    }

    public void caseAMpFilterField(AMpFilterField node)
    {
        defaultCase(node);
    }

    public void caseAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        defaultCase(node);
    }

    public void caseAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        defaultCase(node);
    }

    public void caseAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        defaultCase(node);
    }

    public void caseAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorNew(AMpDescriptorNew node)
    {
        defaultCase(node);
    }

    public void caseAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        defaultCase(node);
    }

    public void caseAMpItemNew(AMpItemNew node)
    {
        defaultCase(node);
    }

    public void caseAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpItemNewBody(AMpItemNewBody node)
    {
        defaultCase(node);
    }

    public void caseAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldNew(AMpFieldNew node)
    {
        defaultCase(node);
    }

    public void caseAMpStdFieldBody(AMpStdFieldBody node)
    {
        defaultCase(node);
    }

    public void caseAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        defaultCase(node);
    }

    public void caseAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        defaultCase(node);
    }

    public void caseAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        defaultCase(node);
    }

    public void caseAMpCodeClosure(AMpCodeClosure node)
    {
        defaultCase(node);
    }

    public void caseAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        defaultCase(node);
    }

    public void caseAContinuationOperator(AContinuationOperator node)
    {
        defaultCase(node);
    }

    public void caseAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        defaultCase(node);
    }

    public void caseAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        defaultCase(node);
    }

    public void caseAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        defaultCase(node);
    }

    public void caseAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        defaultCase(node);
    }

    public void caseAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultCase(node);
    }

    public void caseAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultCase(node);
    }

    public void caseAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultCase(node);
    }

    public void caseAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultCase(node);
    }

    public void caseAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        defaultCase(node);
    }

    public void caseAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAMpItVariable(AMpItVariable node)
    {
        defaultCase(node);
    }

    public void caseAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        defaultCase(node);
    }

    public void caseAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        defaultCase(node);
    }

    public void caseAMpExistMethod(AMpExistMethod node)
    {
        defaultCase(node);
    }

    public void caseAMpValidMethod(AMpValidMethod node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        defaultCase(node);
    }

    public void caseAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        defaultCase(node);
    }

    public void caseAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        defaultCase(node);
    }

    public void caseAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        defaultCase(node);
    }

    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEmptyTypeDeclaration(AEmptyTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    public void caseASingleElementAnnotationAnnotation(ASingleElementAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultCase(node);
    }

    public void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultCase(node);
    }

    public void caseANormalClassClassDeclaration(ANormalClassClassDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultCase(node);
    }

    public void caseANormalInterfaceInterfaceDeclaration(ANormalInterfaceInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationTypeInterfaceDeclaration(AAnnotationTypeInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        defaultCase(node);
    }

    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultCase(node);
    }

    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultCase(node);
    }

    public void caseANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        defaultCase(node);
    }

    public void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAOneElementValuePairs(AOneElementValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAManyElementValuePairs(AManyElementValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierElementValue(AIdentifierElementValue node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultCase(node);
    }

    public void caseAArrayInitializerElementValue(AArrayInitializerElementValue node)
    {
        defaultCase(node);
    }

    public void caseAGtTypeParameters(AGtTypeParameters node)
    {
        defaultCase(node);
    }

    public void caseAShrTypeParameters(AShrTypeParameters node)
    {
        defaultCase(node);
    }

    public void caseAUshrTypeParameters(AUshrTypeParameters node)
    {
        defaultCase(node);
    }

    public void caseASuper(ASuper node)
    {
        defaultCase(node);
    }

    public void caseAInterfaces(AInterfaces node)
    {
        defaultCase(node);
    }

    public void caseAClassBody(AClassBody node)
    {
        defaultCase(node);
    }

    public void caseAEnumBody(AEnumBody node)
    {
        defaultCase(node);
    }

    public void caseAOneExtendsInterfaces(AOneExtendsInterfaces node)
    {
        defaultCase(node);
    }

    public void caseAManyExtendsInterfaces(AManyExtendsInterfaces node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceBody(AInterfaceBody node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultCase(node);
    }

    public void caseAElementValuePair(AElementValuePair node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalExpression(ASimpleConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmarkOrExOrConditionalExpression(AQmarkOrExOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmarkOrExIdConditionalExpression(AQmarkOrExIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmarkOrIdOrConditionalExpression(AQmarkOrIdOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrOrIdIdConditionalExpression(AQmakrOrIdIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdExOrConditionalExpression(AQmakrIdExOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdExIdConditionalExpression(AQmakrIdExIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdIdOrConditionalExpression(AQmakrIdIdOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdIdIdConditionalExpression(AQmakrIdIdIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultCase(node);
    }

    public void caseAOneTypeParameterList(AOneTypeParameterList node)
    {
        defaultCase(node);
    }

    public void caseAManyTypeParameterList(AManyTypeParameterList node)
    {
        defaultCase(node);
    }

    public void caseAOneTypeParameterListShr(AOneTypeParameterListShr node)
    {
        defaultCase(node);
    }

    public void caseAManyTypeParameterListShr(AManyTypeParameterListShr node)
    {
        defaultCase(node);
    }

    public void caseAOneTypeParameterListUshr(AOneTypeParameterListUshr node)
    {
        defaultCase(node);
    }

    public void caseAManyTypeParameterListUshr(AManyTypeParameterListUshr node)
    {
        defaultCase(node);
    }

    public void caseAOneInterfaceTypeList(AOneInterfaceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyInterfaceTypeList(AManyInterfaceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInstanceInitializerClassBodyDeclaration(AInstanceInitializerClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAStaticInitializerClassBodyDeclaration(AStaticInitializerClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAOneEnumConstants(AOneEnumConstants node)
    {
        defaultCase(node);
    }

    public void caseAManyEnumConstants(AManyEnumConstants node)
    {
        defaultCase(node);
    }

    public void caseAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEmptyInterfaceMemberDeclaration(AEmptyInterfaceMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveMethodAnnotationTypeElementDeclaration(APrimitiveMethodAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceMethodAnnotationTypeElementDeclaration(AReferenceMethodAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEmptyAnnotationTypeElementDeclaration(AEmptyAnnotationTypeElementDeclaration node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalOrExpression(ASimpleConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarOrOrConditionalOrExpression(ABarBarOrOrConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarOrIdConditionalOrExpression(ABarBarOrIdConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarIdOrConditionalOrExpression(ABarBarIdOrConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarIdIdConditionalOrExpression(ABarBarIdIdConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    public void caseAOneElementValues(AOneElementValues node)
    {
        defaultCase(node);
    }

    public void caseAManyElementValues(AManyElementValues node)
    {
        defaultCase(node);
    }

    public void caseATypeParameter(ATypeParameter node)
    {
        defaultCase(node);
    }

    public void caseATypeParameterShr(ATypeParameterShr node)
    {
        defaultCase(node);
    }

    public void caseATypeParameterUshr(ATypeParameterUshr node)
    {
        defaultCase(node);
    }

    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        defaultCase(node);
    }

    public void caseATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        defaultCase(node);
    }

    public void caseATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEmptyClassMemberDeclaration(AEmptyClassMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        defaultCase(node);
    }

    public void caseAStaticInitializer(AStaticInitializer node)
    {
        defaultCase(node);
    }

    public void caseAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEnumConstant(AEnumConstant node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveConstantDeclaration(APrimitiveConstantDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceConstantDeclaration(AReferenceConstantDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveAbstractMethodDeclaration(APrimitiveAbstractMethodDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceAbstractMethodDeclaration(AReferenceAbstractMethodDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVoidAbstractMethodDeclaration(AVoidAbstractMethodDeclaration node)
    {
        defaultCase(node);
    }

    public void caseADefaultValue(ADefaultValue node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalAndExpression(ASimpleConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpAnOrConditionalAndExpression(AAmpAmpAnOrConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpAnIdConditionalAndExpression(AAmpAmpAnIdConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpIdOrConditionalAndExpression(AAmpAmpIdOrConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpIdIdConditionalAndExpression(AAmpAmpIdIdConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAConditionalAssignmentExpression(AConditionalAssignmentExpression node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        defaultCase(node);
    }

    public void caseATypeBound(ATypeBound node)
    {
        defaultCase(node);
    }

    public void caseAArgumentTypeBoundShr(AArgumentTypeBoundShr node)
    {
        defaultCase(node);
    }

    public void caseABoundTypeBoundShr(ABoundTypeBoundShr node)
    {
        defaultCase(node);
    }

    public void caseAArgumentTypeBoundUshr(AArgumentTypeBoundUshr node)
    {
        defaultCase(node);
    }

    public void caseABoundTypeBoundUshr(ABoundTypeBoundUshr node)
    {
        defaultCase(node);
    }

    public void caseATypeComponent(ATypeComponent node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveFieldDeclaration(APrimitiveFieldDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceFieldDeclaration(AReferenceFieldDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMjDescVarFieldDeclaration(AMjDescVarFieldDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        defaultCase(node);
    }

    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    public void caseAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAThrows(AThrows node)
    {
        defaultCase(node);
    }

    public void caseAConstructorBody(AConstructorBody node)
    {
        defaultCase(node);
    }

    public void caseAArguments(AArguments node)
    {
        defaultCase(node);
    }

    public void caseAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        defaultCase(node);
    }

    public void caseAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        defaultCase(node);
    }

    public void caseAMethodDeclarator(AMethodDeclarator node)
    {
        defaultCase(node);
    }

    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultCase(node);
    }

    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        defaultCase(node);
    }

    public void caseASimpleInclusiveOrExpression(ASimpleInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarOrOrInclusiveOrExpression(ABarOrOrInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarOrIdInclusiveOrExpression(ABarOrIdInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarIdOrInclusiveOrExpression(ABarIdOrInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarIdIdInclusiveOrExpression(ABarIdIdInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionAssignment(AExpressionAssignment node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultCase(node);
    }

    public void caseAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalBound(AAdditionalBound node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalBoundShrNoGt(AAdditionalBoundShrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalBoundUshrNoGtGt(AAdditionalBoundUshrNoGtGt node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgument(AWildcardActualTypeArgument node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgumentShr(AWildcardActualTypeArgumentShr node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgumentUshr(AWildcardActualTypeArgumentUshr node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgumentUshrNoGt(AWildcardActualTypeArgumentUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveMethodHeader(APrimitiveMethodHeader node)
    {
        defaultCase(node);
    }

    public void caseAReferenceMethodHeader(AReferenceMethodHeader node)
    {
        defaultCase(node);
    }

    public void caseAVoidMethodHeader(AVoidMethodHeader node)
    {
        defaultCase(node);
    }

    public void caseABlockMethodBody(ABlockMethodBody node)
    {
        defaultCase(node);
    }

    public void caseAEmptyMethodBody(AEmptyMethodBody node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclarationBlockStatement(AVariableDeclarationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAClassDeclarationBlockStatement(AClassDeclarationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAOneFormalParameterList(AOneFormalParameterList node)
    {
        defaultCase(node);
    }

    public void caseAManyFormalParameterList(AManyFormalParameterList node)
    {
        defaultCase(node);
    }

    public void caseAOneExceptionTypeList(AOneExceptionTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyExceptionTypeList(AManyExceptionTypeList node)
    {
        defaultCase(node);
    }

    public void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    public void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExplicitConstructorInvocation(AIdentifierExplicitConstructorInvocation node)
    {
        defaultCase(node);
    }

    public void caseAOneExArgumentList(AOneExArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAOneIdArgumentList(AOneIdArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAManyExArgumentList(AManyExArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAManyIdArgumentList(AManyIdArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        defaultCase(node);
    }

    public void caseASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        defaultCase(node);
    }

    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        defaultCase(node);
    }

    public void caseASimpleExclusiveOrExpression(ASimpleExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretOrAnExclusiveOrExpression(ACaretOrAnExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretOrIdExclusiveOrExpression(ACaretOrIdExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretIdAnExclusiveOrExpression(ACaretIdAnExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretIdIdExclusiveOrExpression(ACaretIdIdExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAWildcard(AWildcard node)
    {
        defaultCase(node);
    }

    public void caseAWildcardShr(AWildcardShr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardUshr(AWildcardUshr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardUshrNoGt(AWildcardUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultCase(node);
    }

    public void caseANoTrailStatement(ANoTrailStatement node)
    {
        defaultCase(node);
    }

    public void caseALabelStatement(ALabelStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileLoopStatement(AWhileLoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAForLoopStatement(AForLoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAOneFormalParameters(AOneFormalParameters node)
    {
        defaultCase(node);
    }

    public void caseAManyFormalParameters(AManyFormalParameters node)
    {
        defaultCase(node);
    }

    public void caseAExceptionType(AExceptionType node)
    {
        defaultCase(node);
    }

    public void caseAGtNonWildTypeArguments(AGtNonWildTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAShrNonWildTypeArguments(AShrNonWildTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAUshrNonWildTypeArguments(AUshrNonWildTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        defaultCase(node);
    }

    public void caseANoArrayPrimary(ANoArrayPrimary node)
    {
        defaultCase(node);
    }

    public void caseAArrayPrimary(AArrayPrimary node)
    {
        defaultCase(node);
    }

    public void caseAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAArrayVariableInitializer(AArrayVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAByteIntegralType(AByteIntegralType node)
    {
        defaultCase(node);
    }

    public void caseAShortIntegralType(AShortIntegralType node)
    {
        defaultCase(node);
    }

    public void caseAIntIntegralType(AIntIntegralType node)
    {
        defaultCase(node);
    }

    public void caseALongIntegralType(ALongIntegralType node)
    {
        defaultCase(node);
    }

    public void caseACharIntegralType(ACharIntegralType node)
    {
        defaultCase(node);
    }

    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultCase(node);
    }

    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultCase(node);
    }

    public void caseASimpleAndExpression(ASimpleAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAnEqAndExpression(AAmpAnEqAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAnIdAndExpression(AAmpAnIdAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpIdEqAndExpression(AAmpIdEqAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpIdIdAndExpression(AAmpIdIdAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseAReferenceSuperFieldAccess(AReferenceSuperFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryExArrayAccess(APrimaryExArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryIdArrayAccess(APrimaryIdArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExArrayAccess(AIdentifierExArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIdArrayAccess(AIdentifierIdArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAExtendsPrimitiveWildcardBounds(AExtendsPrimitiveWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBounds(AExtendsReferenceWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseASuperPrimitiveWildcardBounds(ASuperPrimitiveWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBounds(ASuperReferenceWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBoundsShr(AExtendsReferenceWildcardBoundsShr node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBoundsShr(ASuperReferenceWildcardBoundsShr node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBoundsUshr(AExtendsReferenceWildcardBoundsUshr node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBoundsUshr(ASuperReferenceWildcardBoundsUshr node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBoundsUshrNoGt(AExtendsReferenceWildcardBoundsUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBoundsUshrNoGt(ASuperReferenceWildcardBoundsUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAContinueStmtStatementWithoutTrailingSubstatement(AContinueStmtStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAMjAnnotationStatementStatementWithoutTrailingSubstatement(AMjAnnotationStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAMjAnnotationsStatementWithoutTrailingSubstatement(AMjAnnotationsStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseALabeledStatement(ALabeledStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIfThenStatement(AIdentifierIfThenStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIfThenElseStatement(AIdentifierIfThenElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierWhileStatement(AIdentifierWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        defaultCase(node);
    }

    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAOnePrimitiveReferenceTypeList(AOnePrimitiveReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAOneReferenceReferenceTypeList(AOneReferenceReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyPrimitiveReferenceTypeList(AManyPrimitiveReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyReferenceReferenceTypeList(AManyReferenceReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAOneReferenceReferenceTypeListShr(AOneReferenceReferenceTypeListShr node)
    {
        defaultCase(node);
    }

    public void caseAManyReferenceReferenceTypeListShr(AManyReferenceReferenceTypeListShr node)
    {
        defaultCase(node);
    }

    public void caseAOneReferenceReferenceTypeListUshr(AOneReferenceReferenceTypeListUshr node)
    {
        defaultCase(node);
    }

    public void caseAManyReferenceReferenceTypeListUshr(AManyReferenceReferenceTypeListUshr node)
    {
        defaultCase(node);
    }

    public void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAPrimitivePrimaryNoNewArray(APrimitivePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAReferencePrimaryNoNewArray(AReferencePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPrimaryNoNewArray(AIdentifierPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceArrayCreationExpression(AReferenceArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceInitializerArrayCreationExpression(AReferenceInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayInitializer(AArrayInitializer node)
    {
        defaultCase(node);
    }

    public void caseAOneVariableInitializers(AOneVariableInitializers node)
    {
        defaultCase(node);
    }

    public void caseAManyVariableInitializers(AManyVariableInitializers node)
    {
        defaultCase(node);
    }

    public void caseASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStatement(AEmptyStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionStatement(AExpressionStatement node)
    {
        defaultCase(node);
    }

    public void caseAOneExAssertStatement(AOneExAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAOneIdAssertStatement(AOneIdAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoExExAssertStatement(ATwoExExAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoExIdAssertStatement(ATwoExIdAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoIdExAssertStatement(ATwoIdExAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoIdIdAssertStatement(ATwoIdIdAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDoStatement(AIdentifierDoStatement node)
    {
        defaultCase(node);
    }

    public void caseABreakStatement(ABreakStatement node)
    {
        defaultCase(node);
    }

    public void caseAContinueStatement(AContinueStatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSynchronizedStatement(AIdentifierSynchronizedStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierThrowStatement(AIdentifierThrowStatement node)
    {
        defaultCase(node);
    }

    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        defaultCase(node);
    }

    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatementWithoutTrailingSubstatementStatementNoShortIf(AStatementWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseALabeledStatementNoShortIfStatementNoShortIf(ALabeledStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatementNoShortIfStatementNoShortIf(AIfThenElseStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatementNoShortIfStatementNoShortIf(AWhileStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAForStatementNoShortIfStatementNoShortIf(AForStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAEmptyBasicForStatement(AEmptyBasicForStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierBasicForStatement(AIdentifierBasicForStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseANullLiteral(ANullLiteral node)
    {
        defaultCase(node);
    }

    public void caseASimpleClassInstanceCreationExpression(ASimpleClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierClassInstanceCreationExpression(AIdentifierClassInstanceCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAClassNameMethodInvocation(AClassNameMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseATypeNameMethodInvocation(ATypeNameMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDimExpr(AIdentifierDimExpr node)
    {
        defaultCase(node);
    }

    public void caseADim(ADim node)
    {
        defaultCase(node);
    }

    public void caseASimpleRelationalExpression(ASimpleRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtShShRelationalExpression(ALtShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtShIdRelationalExpression(ALtShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtIdShRelationalExpression(ALtIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtIdIdRelationalExpression(ALtIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtShShRelationalExpression(AGtShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtShIdRelationalExpression(AGtShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtIdShRelationalExpression(AGtIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtIdIdRelationalExpression(AGtIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqShShRelationalExpression(ALteqShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqShIdRelationalExpression(ALteqShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqIdShRelationalExpression(ALteqIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqIdIdRelationalExpression(ALteqIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqShShRelationalExpression(AGteqShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqShIdRelationalExpression(AGteqShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqIdShRelationalExpression(AGteqIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqIdIdRelationalExpression(AGteqIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofShPrimitiveRelationalExpression(AInstanceofShPrimitiveRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofShReferenceRelationalExpression(AInstanceofShReferenceRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofIdPrimitiveRelationalExpression(AInstanceofIdPrimitiveRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofIdReferenceRelationalExpression(AInstanceofIdReferenceRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceCreationStatementExpression(AInstanceCreationStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseASwitchBlock(ASwitchBlock node)
    {
        defaultCase(node);
    }

    public void caseACatchClause(ACatchClause node)
    {
        defaultCase(node);
    }

    public void caseAFinally(AFinally node)
    {
        defaultCase(node);
    }

    public void caseALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIfThenElseStatementNoShortIf(AIdentifierIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierWhileStatementNoShortIf(AIdentifierWhileStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAEmptyForStatementNoShortIf(AEmptyForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierForStatementNoShortIf(AIdentifierForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAStatementForInit(AStatementForInit node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclarationForInit(AVariableDeclarationForInit node)
    {
        defaultCase(node);
    }

    public void caseAForUpdate(AForUpdate node)
    {
        defaultCase(node);
    }

    public void caseASimpleShiftExpression(ASimpleShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlShAdShiftExpression(AShlShAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlShIdShiftExpression(AShlShIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlIdAdShiftExpression(AShlIdAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlIdIdShiftExpression(AShlIdIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrShAdShiftExpression(AShrShAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrShIdShiftExpression(AShrShIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrIdAdShiftExpression(AShrIdAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrIdIdShiftExpression(AShrIdIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrShAdShiftExpression(AUshrShAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrShIdShiftExpression(AUshrShIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrIdAdShiftExpression(AUshrIdAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrIdIdShiftExpression(AUshrIdIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPreIncrementExpression(AExpressionPreIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPreIncrementExpression(AIdentifierPreIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPreDecrementExpression(AExpressionPreDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPreDecrementExpression(AIdentifierPreDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPostIncrementExpression(AExpressionPostIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPostIncrementExpression(AIdentifierPostIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPostDecrementExpression(AExpressionPostDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPostDecrementExpression(AIdentifierPostDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseAOneStatementExpressionList(AOneStatementExpressionList node)
    {
        defaultCase(node);
    }

    public void caseAManyStatementExpressionList(AManyStatementExpressionList node)
    {
        defaultCase(node);
    }

    public void caseASimpleAdditiveExpression(ASimpleAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreIncrementUnaryExpression(APreIncrementUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreDecrementUnaryExpression(APreDecrementUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostIncrementPostfixExpression(APostIncrementPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostDecrementPostfixExpression(APostDecrementPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAConstantExpression(AConstantExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleMultiplicativeExpression(ASimpleMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarMuUnMultiplicativeExpression(AStarMuUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarMuIdMultiplicativeExpression(AStarMuIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarIdUnMultiplicativeExpression(AStarIdUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarIdIdMultiplicativeExpression(AStarIdIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashMuUnMultiplicativeExpression(ASlashMuUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashMuIdMultiplicativeExpression(ASlashMuIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashIdUnMultiplicativeExpression(ASlashIdUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashIdIdMultiplicativeExpression(ASlashIdIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentMuUnMultiplicativeExpression(APercentMuUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentMuIdMultiplicativeExpression(APercentMuIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentIdUnMultiplicativeExpression(APercentIdUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentIdIdMultiplicativeExpression(APercentIdIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostfixUnaryExpressionNotPlusMinus(APostfixUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseATildeExpressionUnaryExpressionNotPlusMinus(ATildeExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseATildeIdentifierUnaryExpressionNotPlusMinus(ATildeIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseAEmarkExpressionUnaryExpressionNotPlusMinus(AEmarkExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseAEmarkIdentifierUnaryExpressionNotPlusMinus(AEmarkIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseACastUnaryExpressionNotPlusMinus(ACastUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveExpressionCastExpression(APrimitiveExpressionCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveIdentifierCastExpression(APrimitiveIdentifierCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceExpressionCastExpression(AReferenceExpressionCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceIdentifierCastExpression(AReferenceIdentifierCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixTypesExpressionCastExpression(AMjMatrixTypesExpressionCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAMjMatrixTypesMpOutsideIncludedPlusIdCastExpression(AMjMatrixTypesMpOutsideIncludedPlusIdCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAAbstractModifier(AAbstractModifier node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        defaultCase(node);
    }

    public void caseAFinalModifier(AFinalModifier node)
    {
        defaultCase(node);
    }

    public void caseANativeModifier(ANativeModifier node)
    {
        defaultCase(node);
    }

    public void caseAPrivateModifier(APrivateModifier node)
    {
        defaultCase(node);
    }

    public void caseAProtectedModifier(AProtectedModifier node)
    {
        defaultCase(node);
    }

    public void caseAPublicModifier(APublicModifier node)
    {
        defaultCase(node);
    }

    public void caseAStaticModifier(AStaticModifier node)
    {
        defaultCase(node);
    }

    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        defaultCase(node);
    }

    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultCase(node);
    }

    public void caseATransientModifier(ATransientModifier node)
    {
        defaultCase(node);
    }

    public void caseAVolatileModifier(AVolatileModifier node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseTMpThickMpArrowOperator(TMpThickMpArrowOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpArrowOperator(TMpArrowOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpDashLtOperator(TMpDashLtOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpFieldAccessOperator(TMpFieldAccessOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpColonLtOperator(TMpColonLtOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpColonPercentOperator(TMpColonPercentOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpColonColonOperator(TMpColonColonOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpSetCreationOperator(TMpSetCreationOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpSymbolMpSetCreationOperator(TMpSymbolMpSetCreationOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpTypedMpSetCreationOperator(TMpTypedMpSetCreationOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpTypedMpSymbolMpSetCreationOperator(TMpTypedMpSymbolMpSetCreationOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpSetCreationOperatorWName(TMpSetCreationOperatorWName node)
    {
        defaultCase(node);
    }

    public void caseTMpSymbolSetCreationOperatorWName(TMpSymbolSetCreationOperatorWName node)
    {
        defaultCase(node);
    }

    public void caseTMpTypedSetCreationOperatorWName(TMpTypedSetCreationOperatorWName node)
    {
        defaultCase(node);
    }

    public void caseTMpTypedSymbolSetCreationOperatorWName(TMpTypedSymbolSetCreationOperatorWName node)
    {
        defaultCase(node);
    }

    public void caseTMpGtWBraceOperator(TMpGtWBraceOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpSymbolSetCreationOperator(TMpSymbolSetCreationOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpCodeClosureOperator(TMpCodeClosureOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpPairSinglequotes(TMpPairSinglequotes node)
    {
        defaultCase(node);
    }

    public void caseTMpDittoPrevLevelOperator(TMpDittoPrevLevelOperator node)
    {
        defaultCase(node);
    }

    public void caseTMpDeclarationsKeyword(TMpDeclarationsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpMatrixKeyword(TMpMatrixKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpSchemaKeyword(TMpSchemaKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpKeyKeyword(TMpKeyKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpMemberKeyword(TMpMemberKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpInKeyword(TMpInKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpUsesKeyword(TMpUsesKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpCallKeyword(TMpCallKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpSetKeyword(TMpSetKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpVarKeyword(TMpVarKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpSymbolKeyword(TMpSymbolKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpElementKeyword(TMpElementKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpDescriptorKeyword(TMpDescriptorKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpItemKeyword(TMpItemKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpFieldKeyword(TMpFieldKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpNewKeyword(TMpNewKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpClosureKeyword(TMpClosureKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpNKeyword(TMpNKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpNanKeyword(TMpNanKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpSelectKeyword(TMpSelectKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpFromKeyword(TMpFromKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpWhereKeyword(TMpWhereKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpFieldsKeyword(TMpFieldsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpAnnotationsKeyword(TMpAnnotationsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpErrorsKeyword(TMpErrorsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpExceptionsKeyword(TMpExceptionsKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpEmptyKeyword(TMpEmptyKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpFiltersKeyword(TMpFiltersKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpAllKeyword(TMpAllKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpAnnoteDefaultKeyword(TMpAnnoteDefaultKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpAccessorKeyword(TMpAccessorKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpReturnKeyword(TMpReturnKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpItKeyword(TMpItKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpExistKeyword(TMpExistKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpValidKeyword(TMpValidKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpDefaultKeyword(TMpDefaultKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpUnusedKeyword(TMpUnusedKeyword node)
    {
        defaultCase(node);
    }

    public void caseTMpDittoKeyword(TMpDittoKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTDotDotDot(TDotDotDot node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    public void caseTAmpAssign(TAmpAssign node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    public void caseTBarAssign(TBarAssign node)
    {
        defaultCase(node);
    }

    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    public void caseTCaretAssign(TCaretAssign node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTEmark(TEmark node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMinusAssign(TMinusAssign node)
    {
        defaultCase(node);
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    public void caseTPercentAssign(TPercentAssign node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTPlusAssign(TPlusAssign node)
    {
        defaultCase(node);
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    public void caseTShl(TShl node)
    {
        defaultCase(node);
    }

    public void caseTShlAssign(TShlAssign node)
    {
        defaultCase(node);
    }

    public void caseTShr(TShr node)
    {
        defaultCase(node);
    }

    public void caseTShrAssign(TShrAssign node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTSlashAssign(TSlashAssign node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTStarAssign(TStarAssign node)
    {
        defaultCase(node);
    }

    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    public void caseTUshr(TUshr node)
    {
        defaultCase(node);
    }

    public void caseTUshrAssign(TUshrAssign node)
    {
        defaultCase(node);
    }

    public void caseTAbstract(TAbstract node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    public void caseTByte(TByte node)
    {
        defaultCase(node);
    }

    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    public void caseTCatch(TCatch node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTClassToken(TClassToken node)
    {
        defaultCase(node);
    }

    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTExtends(TExtends node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFinal(TFinal node)
    {
        defaultCase(node);
    }

    public void caseTFinallyToken(TFinallyToken node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTImplements(TImplements node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTInstanceof(TInstanceof node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTInterface(TInterface node)
    {
        defaultCase(node);
    }

    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    public void caseTNative(TNative node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    public void caseTProtected(TProtected node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTStrictfp(TStrictfp node)
    {
        defaultCase(node);
    }

    public void caseTSuperToken(TSuperToken node)
    {
        defaultCase(node);
    }

    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    public void caseTSynchronized(TSynchronized node)
    {
        defaultCase(node);
    }

    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    public void caseTThrow(TThrow node)
    {
        defaultCase(node);
    }

    public void caseTThrowsToken(TThrowsToken node)
    {
        defaultCase(node);
    }

    public void caseTTransient(TTransient node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTTry(TTry node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTVolatile(TVolatile node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTCharacterLiteral(TCharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseTFloatingPointLiteral(TFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTNullLiteral(TNullLiteral node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTMpTokenNumberRange(TMpTokenNumberRange node)
    {
        defaultCase(node);
    }

    public void caseTMpSymbolLiteralQuotes(TMpSymbolLiteralQuotes node)
    {
        defaultCase(node);
    }

    public void caseTMpSymbolLiteralBacktiks(TMpSymbolLiteralBacktiks node)
    {
        defaultCase(node);
    }

    public void caseTMpJunk1(TMpJunk1 node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTTraditionalComment(TTraditionalComment node)
    {
        defaultCase(node);
    }

    public void caseTDocumentationComment(TDocumentationComment node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
