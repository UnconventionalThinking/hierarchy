/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.analysis;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPCompilationUnit().apply(this);
        outStart(node);
    }

    public void inACompilationUnit(ACompilationUnit node)
    {
        defaultIn(node);
    }

    public void outACompilationUnit(ACompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        inACompilationUnit(node);
        {
            List<PMatrixSectionAndJavaTypeOptions> copy = new ArrayList<PMatrixSectionAndJavaTypeOptions>(node.getMatrixSectionAndJavaTypeOptions());
            Collections.reverse(copy);
            for(PMatrixSectionAndJavaTypeOptions e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PImportDeclaration> copy = new ArrayList<PImportDeclaration>(node.getImportDeclarations());
            Collections.reverse(copy);
            for(PImportDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPackageDeclaration() != null)
        {
            node.getPackageDeclaration().apply(this);
        }
        outACompilationUnit(node);
    }

    public void inAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        inAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(node);
        if(node.getMatrixSections() != null)
        {
            node.getMatrixSections().apply(this);
        }
        outAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(node);
    }

    public void inAJavaTypeMatrixSectionAndJavaTypeOptions(AJavaTypeMatrixSectionAndJavaTypeOptions node)
    {
        defaultIn(node);
    }

    public void outAJavaTypeMatrixSectionAndJavaTypeOptions(AJavaTypeMatrixSectionAndJavaTypeOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJavaTypeMatrixSectionAndJavaTypeOptions(AJavaTypeMatrixSectionAndJavaTypeOptions node)
    {
        inAJavaTypeMatrixSectionAndJavaTypeOptions(node);
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        outAJavaTypeMatrixSectionAndJavaTypeOptions(node);
    }

    public void inAPackageDeclaration(APackageDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPackageDeclaration(APackageDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        inAPackageDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        outAPackageDeclaration(node);
    }

    public void inAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        inAMpDeclarationMatrixSections(node);
        if(node.getMpDeclarationSection() != null)
        {
            node.getMpDeclarationSection().apply(this);
        }
        outAMpDeclarationMatrixSections(node);
    }

    public void inAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        inAMpMatrixKeyMatrixSections(node);
        if(node.getMatrixKeySection() != null)
        {
            node.getMatrixKeySection().apply(this);
        }
        outAMpMatrixKeyMatrixSections(node);
    }

    public void inAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        inAMpMatrixMatrixSections(node);
        if(node.getMatrixNewDeclaration() != null)
        {
            node.getMatrixNewDeclaration().apply(this);
        }
        outAMpMatrixMatrixSections(node);
    }

    public void inAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        inAMpSchemaMatrixSections(node);
        if(node.getSchemaNewDeclaration() != null)
        {
            node.getSchemaNewDeclaration().apply(this);
        }
        outAMpSchemaMatrixSections(node);
    }

    public void inAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        defaultIn(node);
    }

    public void outAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        inAMpSectionMpDeclarationSection(node);
        if(node.getMpDeclarationSectionBody() != null)
        {
            node.getMpDeclarationSectionBody().apply(this);
        }
        if(node.getMpDeclarationsKeyword() != null)
        {
            node.getMpDeclarationsKeyword().apply(this);
        }
        outAMpSectionMpDeclarationSection(node);
    }

    public void inAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        inAMpBodyMpDeclarationSectionBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PMatrixStatement> copy = new ArrayList<PMatrixStatement>(node.getMatrixStatement());
            Collections.reverse(copy);
            for(PMatrixStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpBodyMpDeclarationSectionBody(node);
    }

    public void inAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        defaultIn(node);
    }

    public void outAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        inAMpSectionMatrixKeySection(node);
        if(node.getMatrixKeySectionBody() != null)
        {
            node.getMatrixKeySectionBody().apply(this);
        }
        if(node.getMatrixKey() != null)
        {
            node.getMatrixKey().apply(this);
        }
        outAMpSectionMatrixKeySection(node);
    }

    public void inAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        inAMpBodyMatrixKeySectionBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpBodyMatrixKeySectionBody(node);
    }

    public void inAMpMatrixKey(AMpMatrixKey node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixKey(AMpMatrixKey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixKey(AMpMatrixKey node)
    {
        inAMpMatrixKey(node);
        if(node.getMpKeyKeyword() != null)
        {
            node.getMpKeyKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        outAMpMatrixKey(node);
    }

    public void inAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        inAMpMatrixNewDeclaration(node);
        if(node.getMatrixFieldAndBodyOptions() != null)
        {
            node.getMatrixFieldAndBodyOptions().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getMatrixName() != null)
        {
            node.getMatrixName().apply(this);
        }
        if(node.getMatrixNew() != null)
        {
            node.getMatrixNew().apply(this);
        }
        outAMpMatrixNewDeclaration(node);
    }

    public void inAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        inAMpSchemaNewDeclaration(node);
        if(node.getMatrixFieldAndBodyOptions() != null)
        {
            node.getMatrixFieldAndBodyOptions().apply(this);
        }
        if(node.getMatrixName() != null)
        {
            node.getMatrixName().apply(this);
        }
        if(node.getSchemaNew() != null)
        {
            node.getSchemaNew().apply(this);
        }
        outAMpSchemaNewDeclaration(node);
    }

    public void inAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        inAMpEmptyMatrixFieldAndBodyOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpEmptyMatrixFieldAndBodyOptions(node);
    }

    public void inAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        inAMpFieldsetMatrixFieldAndBodyOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFieldsetParametermapWColon() != null)
        {
            node.getFieldsetParametermapWColon().apply(this);
        }
        outAMpFieldsetMatrixFieldAndBodyOptions(node);
    }

    public void inAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        inAMpFieldsetAndBodyMatrixFieldAndBodyOptions(node);
        if(node.getDescriptorBody() != null)
        {
            node.getDescriptorBody().apply(this);
        }
        if(node.getFieldsetParametermapWColon() != null)
        {
            node.getFieldsetParametermapWColon().apply(this);
        }
        outAMpFieldsetAndBodyMatrixFieldAndBodyOptions(node);
    }

    public void inAMpStdMatrixName(AMpStdMatrixName node)
    {
        defaultIn(node);
    }

    public void outAMpStdMatrixName(AMpStdMatrixName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdMatrixName(AMpStdMatrixName node)
    {
        inAMpStdMatrixName(node);
        if(node.getMatrixNameBody() != null)
        {
            node.getMatrixNameBody().apply(this);
        }
        outAMpStdMatrixName(node);
    }

    public void inAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        defaultIn(node);
    }

    public void outAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        inAMpWithParensMatrixName(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getMatrixNameBody() != null)
        {
            node.getMatrixNameBody().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMpWithParensMatrixName(node);
    }

    public void inAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        inAMpBodyMatrixNameBody(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpBodyMatrixNameBody(node);
    }

    public void inAMpMatrixNew(AMpMatrixNew node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixNew(AMpMatrixNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixNew(AMpMatrixNew node)
    {
        inAMpMatrixNew(node);
        if(node.getDotNew() != null)
        {
            node.getDotNew().apply(this);
        }
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        outAMpMatrixNew(node);
    }

    public void inAMpSchemaNew(AMpSchemaNew node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNew(AMpSchemaNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNew(AMpSchemaNew node)
    {
        inAMpSchemaNew(node);
        if(node.getDotNew() != null)
        {
            node.getDotNew().apply(this);
        }
        if(node.getMpSchemaKeyword() != null)
        {
            node.getMpSchemaKeyword().apply(this);
        }
        outAMpSchemaNew(node);
    }

    public void inAMpDotNew(AMpDotNew node)
    {
        defaultIn(node);
    }

    public void outAMpDotNew(AMpDotNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDotNew(AMpDotNew node)
    {
        inAMpDotNew(node);
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpDotNew(node);
    }

    public void inAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        inAMpBodyDescriptorBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PDescriptorBodyStatement> copy = new ArrayList<PDescriptorBodyStatement>(node.getDescriptorBodyStatement());
            Collections.reverse(copy);
            for(PDescriptorBodyStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpBodyDescriptorBody(node);
    }

    public void inAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        inAMpDescriptorDescriptorBodyStatement(node);
        if(node.getDescriptorDeclaration() != null)
        {
            node.getDescriptorDeclaration().apply(this);
        }
        outAMpDescriptorDescriptorBodyStatement(node);
    }

    public void inAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        inAMpMatrixMemberDescriptorBodyStatement(node);
        if(node.getMatrixMemberDeclaration() != null)
        {
            node.getMatrixMemberDeclaration().apply(this);
        }
        outAMpMatrixMemberDescriptorBodyStatement(node);
    }

    public void inAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        inAMpDescriptorDynCreateDescriptorBodyStatement(node);
        if(node.getDescriptorDynamicCreation() != null)
        {
            node.getDescriptorDynamicCreation().apply(this);
        }
        outAMpDescriptorDynCreateDescriptorBodyStatement(node);
    }

    public void inAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        inAMpDeclarationDescriptorDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDescriptorFieldAndBodyOptions() != null)
        {
            node.getDescriptorFieldAndBodyOptions().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getDescriptorHeadOptions() != null)
        {
            node.getDescriptorHeadOptions().apply(this);
        }
        outAMpDeclarationDescriptorDeclaration(node);
    }

    public void inAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        inAMpEmptyDescriptorFieldAndBodyOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpEmptyDescriptorFieldAndBodyOptions(node);
    }

    public void inAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        inAMpOnlyFieldsetDescriptorFieldAndBodyOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFieldsetOptionsWColon() != null)
        {
            node.getFieldsetOptionsWColon().apply(this);
        }
        outAMpOnlyFieldsetDescriptorFieldAndBodyOptions(node);
    }

    public void inAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        inAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(node);
        if(node.getDescriptorBody() != null)
        {
            node.getDescriptorBody().apply(this);
        }
        if(node.getFieldsetOptionsWColon() != null)
        {
            node.getFieldsetOptionsWColon().apply(this);
        }
        outAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(node);
    }

    public void inAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        inAMpSingleNameDescriptorHeadOptions(node);
        if(node.getDescriptorHead() != null)
        {
            node.getDescriptorHead().apply(this);
        }
        outAMpSingleNameDescriptorHeadOptions(node);
    }

    public void inAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        defaultIn(node);
    }

    public void outAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        inAMpMultNamesDescriptorHeadOptions(node);
        if(node.getDescriptorHeadSet() != null)
        {
            node.getDescriptorHeadSet().apply(this);
        }
        outAMpMultNamesDescriptorHeadOptions(node);
    }

    public void inAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        inAMpDescriptorHeadSet(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PDescriptorHeadChildren> copy = new ArrayList<PDescriptorHeadChildren>(node.getDescriptorHeadChildren());
            Collections.reverse(copy);
            for(PDescriptorHeadChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDescriptorHeadSetItem() != null)
        {
            node.getDescriptorHeadSetItem().apply(this);
        }
        if(node.getMpSetCreationOperator() != null)
        {
            node.getMpSetCreationOperator().apply(this);
        }
        outAMpDescriptorHeadSet(node);
    }

    public void inAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        inAMpDescriptorHeadChildren(node);
        if(node.getDescriptorHeadSetItem() != null)
        {
            node.getDescriptorHeadSetItem().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpDescriptorHeadChildren(node);
    }

    public void inAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        inAMpDescriptorHeadSetItem(node);
        if(node.getFieldsetOptionsWColon() != null)
        {
            node.getFieldsetOptionsWColon().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getDescriptorHead() != null)
        {
            node.getDescriptorHead().apply(this);
        }
        outAMpDescriptorHeadSetItem(node);
    }

    public void inAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        defaultIn(node);
    }

    public void outAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        inAMpStdDescriptorHead(node);
        if(node.getDescriptorHeadStd() != null)
        {
            node.getDescriptorHeadStd().apply(this);
        }
        outAMpStdDescriptorHead(node);
    }

    public void inAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        defaultIn(node);
    }

    public void outAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        inAMpHiddenTagnameDescriptorHead(node);
        if(node.getDescriptorHeadHiddenTagname() != null)
        {
            node.getDescriptorHeadHiddenTagname().apply(this);
        }
        outAMpHiddenTagnameDescriptorHead(node);
    }

    public void inAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        defaultIn(node);
    }

    public void outAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        inAMpStdDescriptorHeadStd(node);
        if(node.getDescriptorLabel() != null)
        {
            node.getDescriptorLabel().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpStdDescriptorHeadStd(node);
    }

    public void inAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        defaultIn(node);
    }

    public void outAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        inAMpHiddenDescriptorHeadHiddenTagname(node);
        if(node.getLabelname() != null)
        {
            node.getLabelname().apply(this);
        }
        outAMpHiddenDescriptorHeadHiddenTagname(node);
    }

    public void inAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        inAMpItemMatrixElementName(node);
        if(node.getMpItemKeyword() != null)
        {
            node.getMpItemKeyword().apply(this);
        }
        outAMpItemMatrixElementName(node);
    }

    public void inAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        inAMpDescriptorMatrixElementName(node);
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        outAMpDescriptorMatrixElementName(node);
    }

    public void inAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        inAMpFieldWChildrenMatrixElementName(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpFieldKeyword() != null)
        {
            node.getMpFieldKeyword().apply(this);
        }
        outAMpFieldWChildrenMatrixElementName(node);
    }

    public void inAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        inAMpIdentifierMatrixElementName(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PNameScope> copy = new ArrayList<PNameScope>(node.getNameScope());
            Collections.reverse(copy);
            for(PNameScope e : copy)
            {
                e.apply(this);
            }
        }
        outAMpIdentifierMatrixElementName(node);
    }

    public void inAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        inAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PNameScope> copy = new ArrayList<PNameScope>(node.getNameScope());
            Collections.reverse(copy);
            for(PNameScope e : copy)
            {
                e.apply(this);
            }
        }
        outAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(node);
    }

    public void inAMpNameScope(AMpNameScope node)
    {
        defaultIn(node);
    }

    public void outAMpNameScope(AMpNameScope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNameScope(AMpNameScope node)
    {
        inAMpNameScope(node);
        if(node.getMpColonColonOperator() != null)
        {
            node.getMpColonColonOperator().apply(this);
        }
        if(node.getNameScopeName() != null)
        {
            node.getNameScopeName().apply(this);
        }
        outAMpNameScope(node);
    }

    public void inAMpNameScopeName(AMpNameScopeName node)
    {
        defaultIn(node);
    }

    public void outAMpNameScopeName(AMpNameScopeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNameScopeName(AMpNameScopeName node)
    {
        inAMpNameScopeName(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpNameScopeName(node);
    }

    public void inAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        inAMpStdDescriptorLabel(node);
        if(node.getLabelname() != null)
        {
            node.getLabelname().apply(this);
        }
        outAMpStdDescriptorLabel(node);
    }

    public void inAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        inAMpParensDescriptorLabel(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLabelname() != null)
        {
            node.getLabelname().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMpParensDescriptorLabel(node);
    }

    public void inAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        inAMpDesctagnameDescriptorLabel(node);
        if(node.getDescriptorTagnameForlabel() != null)
        {
            node.getDescriptorTagnameForlabel().apply(this);
        }
        outAMpDesctagnameDescriptorLabel(node);
    }

    public void inAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        defaultIn(node);
    }

    public void outAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        inAMpStdUsesSchemas(node);
        if(node.getSchemaOptions() != null)
        {
            node.getSchemaOptions().apply(this);
        }
        if(node.getMpUsesKeyword() != null)
        {
            node.getMpUsesKeyword().apply(this);
        }
        outAMpStdUsesSchemas(node);
    }

    public void inAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        inAMpSetSchemaOptions(node);
        if(node.getSchemaSet() != null)
        {
            node.getSchemaSet().apply(this);
        }
        outAMpSetSchemaOptions(node);
    }

    public void inAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        inAMpSetConstantSchemaOptions(node);
        if(node.getSchemaSetConstant() != null)
        {
            node.getSchemaSetConstant().apply(this);
        }
        outAMpSetConstantSchemaOptions(node);
    }

    public void inAMpListSchemaSet(AMpListSchemaSet node)
    {
        defaultIn(node);
    }

    public void outAMpListSchemaSet(AMpListSchemaSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpListSchemaSet(AMpListSchemaSet node)
    {
        inAMpListSchemaSet(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSchemaNameList() != null)
        {
            node.getSchemaNameList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMpListSchemaSet(node);
    }

    public void inAMpSchemaNameList(AMpSchemaNameList node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNameList(AMpSchemaNameList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNameList(AMpSchemaNameList node)
    {
        inAMpSchemaNameList(node);
        {
            List<PSchemaNameListChildren> copy = new ArrayList<PSchemaNameListChildren>(node.getSchemaNameListChildren());
            Collections.reverse(copy);
            for(PSchemaNameListChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSchemaName() != null)
        {
            node.getSchemaName().apply(this);
        }
        outAMpSchemaNameList(node);
    }

    public void inAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        inAMpSchemaNameListChildren(node);
        if(node.getSchemaName() != null)
        {
            node.getSchemaName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpSchemaNameListChildren(node);
    }

    public void inAMpSchemaName(AMpSchemaName node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaName(AMpSchemaName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaName(AMpSchemaName node)
    {
        inAMpSchemaName(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpSchemaName(node);
    }

    public void inAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        inAMpSchemaSetConstant(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpSchemaSetConstant(node);
    }

    public void inAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        inAMpPrimitiveTypeMatrixMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PMatrixAccessModifier> copy = new ArrayList<PMatrixAccessModifier>(node.getMatrixAccessModifier());
            Collections.reverse(copy);
            for(PMatrixAccessModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpMemberKeyword() != null)
        {
            node.getMpMemberKeyword().apply(this);
        }
        outAMpPrimitiveTypeMatrixMemberDeclaration(node);
    }

    public void inAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        inAMpComplexTypeMatrixMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponent());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PMatrixAccessModifier> copy = new ArrayList<PMatrixAccessModifier>(node.getMatrixAccessModifier());
            Collections.reverse(copy);
            for(PMatrixAccessModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpMemberKeyword() != null)
        {
            node.getMpMemberKeyword().apply(this);
        }
        outAMpComplexTypeMatrixMemberDeclaration(node);
    }

    public void inADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        defaultIn(node);
    }

    public void outADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        inADescriptorDynamicCreation(node);
        if(node.getDescriptorDynamicCreationOptions() != null)
        {
            node.getDescriptorDynamicCreationOptions().apply(this);
        }
        if(node.getMpCallKeyword() != null)
        {
            node.getMpCallKeyword().apply(this);
        }
        outADescriptorDynamicCreation(node);
    }

    public void inAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        defaultIn(node);
    }

    public void outAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        inAMethodInvocationDescriptorDynamicCreationOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodInvocationDescriptorDynamicCreationOptions(node);
    }

    public void inACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        defaultIn(node);
    }

    public void outACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        inACodeClosureDescriptorDynamicCreationOptions(node);
        if(node.getCodeClosure() != null)
        {
            node.getCodeClosure().apply(this);
        }
        outACodeClosureDescriptorDynamicCreationOptions(node);
    }

    public void inAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        inAMpFieldsetOptionsWColon(node);
        if(node.getFieldsetOptions() != null)
        {
            node.getFieldsetOptions().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAMpFieldsetOptionsWColon(node);
    }

    public void inAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        inAMpFieldsetParametermapWColon(node);
        if(node.getFieldsetParametermapOptions() != null)
        {
            node.getFieldsetParametermapOptions().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAMpFieldsetParametermapWColon(node);
    }

    public void inAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        defaultIn(node);
    }

    public void outAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        inAMpParameterMapFieldsetOptions(node);
        if(node.getFieldsetParametermapOptions() != null)
        {
            node.getFieldsetParametermapOptions().apply(this);
        }
        outAMpParameterMapFieldsetOptions(node);
    }

    public void inAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        defaultIn(node);
    }

    public void outAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        inAMpTupleFieldsetOptions(node);
        if(node.getFieldsetTupleOptions() != null)
        {
            node.getFieldsetTupleOptions().apply(this);
        }
        outAMpTupleFieldsetOptions(node);
    }

    public void inAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        inAMpStdFieldsetParametermapOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getFieldsetParametermap() != null)
        {
            node.getFieldsetParametermap().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpStdFieldsetParametermapOptions(node);
    }

    public void inAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        inAMpEmptyBracesFieldsetParametermapOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpEmptyBracesFieldsetParametermapOptions(node);
    }

    public void inAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        inAMpFieldsetParametermap(node);
        {
            List<PFieldsetParameterChildren> copy = new ArrayList<PFieldsetParameterChildren>(node.getFieldsetParameterChildren());
            Collections.reverse(copy);
            for(PFieldsetParameterChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameterMappingToValue() != null)
        {
            node.getParameterMappingToValue().apply(this);
        }
        if(node.getFieldname() != null)
        {
            node.getFieldname().apply(this);
        }
        outAMpFieldsetParametermap(node);
    }

    public void inAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        inAMpFieldsetParameterChildren(node);
        if(node.getParameterMappingToValue() != null)
        {
            node.getParameterMappingToValue().apply(this);
        }
        if(node.getFieldname() != null)
        {
            node.getFieldname().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpFieldsetParameterChildren(node);
    }

    public void inAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        defaultIn(node);
    }

    public void outAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        inAMpParameterMappingToValue(node);
        if(node.getMatrixFieldExpression() != null)
        {
            node.getMatrixFieldExpression().apply(this);
        }
        if(node.getMpThickMpArrowOperator() != null)
        {
            node.getMpThickMpArrowOperator().apply(this);
        }
        outAMpParameterMappingToValue(node);
    }

    public void inAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        inAMpStdFieldsetTupleOptions(node);
        if(node.getFieldsetTupleWBraces() != null)
        {
            node.getFieldsetTupleWBraces().apply(this);
        }
        outAMpStdFieldsetTupleOptions(node);
    }

    public void inAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        inAMpFieldsetTupleWBraces(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getFieldsetTuple() != null)
        {
            node.getFieldsetTuple().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpFieldsetTupleWBraces(node);
    }

    public void inAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        inAMpFieldsetTuple(node);
        {
            List<PFieldsetParameter> copy = new ArrayList<PFieldsetParameter>(node.getFieldsetParameter());
            Collections.reverse(copy);
            for(PFieldsetParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMatrixFieldExpression() != null)
        {
            node.getMatrixFieldExpression().apply(this);
        }
        outAMpFieldsetTuple(node);
    }

    public void inAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        inAMpFieldsetParameter(node);
        if(node.getMatrixFieldExpression() != null)
        {
            node.getMatrixFieldExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpFieldsetParameter(node);
    }

    public void inAMpFieldname(AMpFieldname node)
    {
        defaultIn(node);
    }

    public void outAMpFieldname(AMpFieldname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldname(AMpFieldname node)
    {
        inAMpFieldname(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpFieldname(node);
    }

    public void inALabelname(ALabelname node)
    {
        defaultIn(node);
    }

    public void outALabelname(ALabelname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelname(ALabelname node)
    {
        inALabelname(node);
        if(node.getLabelnameBacktik() != null)
        {
            node.getLabelnameBacktik().apply(this);
        }
        outALabelname(node);
    }

    public void inAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        inAMpSimpleLabelnameBacktik(node);
        if(node.getLabelnameBacktikSimple() != null)
        {
            node.getLabelnameBacktikSimple().apply(this);
        }
        outAMpSimpleLabelnameBacktik(node);
    }

    public void inAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        defaultIn(node);
    }

    public void outAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        inAMpTwoPartLabelnameBacktik(node);
        if(node.getLabelnameBacktikTwopart() != null)
        {
            node.getLabelnameBacktikTwopart().apply(this);
        }
        outAMpTwoPartLabelnameBacktik(node);
    }

    public void inAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        defaultIn(node);
    }

    public void outAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        inAMpLabelnameBacktikSimple(node);
        {
            List<PLabelnameBacktiksChildren> copy = new ArrayList<PLabelnameBacktiksChildren>(node.getLabelnameBacktiksChildren());
            Collections.reverse(copy);
            for(PLabelnameBacktiksChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMpLabelnameBacktikSimple(node);
    }

    public void inAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        defaultIn(node);
    }

    public void outAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        inAMpLabelnameBacktiksChildren(node);
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpLabelnameBacktiksChildren(node);
    }

    public void inAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        defaultIn(node);
    }

    public void outAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        inAMpLabelnameBacktikTwopart(node);
        if(node.getInNamePackage() != null)
        {
            node.getInNamePackage().apply(this);
        }
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMpLabelnameBacktikTwopart(node);
    }

    public void inAMpInNamePackage(AMpInNamePackage node)
    {
        defaultIn(node);
    }

    public void outAMpInNamePackage(AMpInNamePackage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpInNamePackage(AMpInNamePackage node)
    {
        inAMpInNamePackage(node);
        if(node.getNamePackageName() != null)
        {
            node.getNamePackageName().apply(this);
        }
        if(node.getMpInKeyword() != null)
        {
            node.getMpInKeyword().apply(this);
        }
        outAMpInNamePackage(node);
    }

    public void inAMpNamePackageName(AMpNamePackageName node)
    {
        defaultIn(node);
    }

    public void outAMpNamePackageName(AMpNamePackageName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNamePackageName(AMpNamePackageName node)
    {
        inAMpNamePackageName(node);
        {
            List<PNamePackageNameChildren> copy = new ArrayList<PNamePackageNameChildren>(node.getNamePackageNameChildren());
            Collections.reverse(copy);
            for(PNamePackageNameChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpNamePackageName(node);
    }

    public void inAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        defaultIn(node);
    }

    public void outAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        inAMpNamePackageNameChildren(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpNamePackageNameChildren(node);
    }

    public void inAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        inAMpDescriptorTagnameForlabel(node);
        {
            List<PDescriptorTagnameForlabelChildren> copy = new ArrayList<PDescriptorTagnameForlabelChildren>(node.getDescriptorTagnameForlabelChildren());
            Collections.reverse(copy);
            for(PDescriptorTagnameForlabelChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMpColonPercentOperator() != null)
        {
            node.getMpColonPercentOperator().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMpDescriptorTagnameForlabel(node);
    }

    public void inAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        inAMpDescriptorTagnameForlabelChildren(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpDescriptorTagnameForlabelChildren(node);
    }

    public void inAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        inAMpSetInstanceCreation(node);
        if(node.getSetCreate() != null)
        {
            node.getSetCreate().apply(this);
        }
        outAMpSetInstanceCreation(node);
    }

    public void inAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        defaultIn(node);
    }

    public void outAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        inAMpNewNameSetInstanceCreation(node);
        if(node.getNewNameSetCreate() != null)
        {
            node.getNewNameSetCreate().apply(this);
        }
        outAMpNewNameSetInstanceCreation(node);
    }

    public void inAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        inAMpSimpleSetCreate(node);
        if(node.getSetCreateSimple() != null)
        {
            node.getSetCreateSimple().apply(this);
        }
        outAMpSimpleSetCreate(node);
    }

    public void inAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        inAMpTypedSetCreate(node);
        if(node.getSetCreateTyped() != null)
        {
            node.getSetCreateTyped().apply(this);
        }
        outAMpTypedSetCreate(node);
    }

    public void inAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        inAMpSubsetCardinalitySetCreate(node);
        if(node.getSetCreateSubsetCardinality() != null)
        {
            node.getSetCreateSubsetCardinality().apply(this);
        }
        outAMpSubsetCardinalitySetCreate(node);
    }

    public void inAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        inAMpTypedAndSubsetCardinalitySetCreate(node);
        if(node.getSetCreateTypedAndSubsetCardinality() != null)
        {
            node.getSetCreateTypedAndSubsetCardinality().apply(this);
        }
        outAMpTypedAndSubsetCardinalitySetCreate(node);
    }

    public void inAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        inAMpSetCreateSimple(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSetItems() != null)
        {
            node.getSetItems().apply(this);
        }
        if(node.getSetCreationOperOptions() != null)
        {
            node.getSetCreationOperOptions().apply(this);
        }
        outAMpSetCreateSimple(node);
    }

    public void inAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        inAMpSetCreateTyped(node);
        if(node.getTypeCloseSetBody() != null)
        {
            node.getTypeCloseSetBody().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getTypedSetCreationOperOptions() != null)
        {
            node.getTypedSetCreationOperOptions().apply(this);
        }
        outAMpSetCreateTyped(node);
    }

    public void inAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        inAMpSetCreateSubsetCardinality(node);
        if(node.getTypeCloseSetBody() != null)
        {
            node.getTypeCloseSetBody().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getTypedSetCreationOperOptions() != null)
        {
            node.getTypedSetCreationOperOptions().apply(this);
        }
        outAMpSetCreateSubsetCardinality(node);
    }

    public void inAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        inAMpSetCreateTypedAndSubsetCardinality(node);
        if(node.getTypeCloseSetBody() != null)
        {
            node.getTypeCloseSetBody().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getTypedSetCreationOperOptions() != null)
        {
            node.getTypedSetCreationOperOptions().apply(this);
        }
        outAMpSetCreateTypedAndSubsetCardinality(node);
    }

    public void inAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        defaultIn(node);
    }

    public void outAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        inAMpTypeCloseSetBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSetItems() != null)
        {
            node.getSetItems().apply(this);
        }
        if(node.getMpGtWBraceOperator() != null)
        {
            node.getMpGtWBraceOperator().apply(this);
        }
        outAMpTypeCloseSetBody(node);
    }

    public void inAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        inAMpStdSetCreationOperOptions(node);
        if(node.getMpSetCreationOperator() != null)
        {
            node.getMpSetCreationOperator().apply(this);
        }
        outAMpStdSetCreationOperOptions(node);
    }

    public void inAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        inAMpSymbolSetCreationOperOptions(node);
        if(node.getMpSymbolMpSetCreationOperator() != null)
        {
            node.getMpSymbolMpSetCreationOperator().apply(this);
        }
        outAMpSymbolSetCreationOperOptions(node);
    }

    public void inAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        inAMpStdNameSetCreationOperOptions(node);
        if(node.getMpSetCreationOperatorWName() != null)
        {
            node.getMpSetCreationOperatorWName().apply(this);
        }
        outAMpStdNameSetCreationOperOptions(node);
    }

    public void inAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        inAMpSymbolNameSetCreationOperOptions(node);
        if(node.getMpSymbolSetCreationOperatorWName() != null)
        {
            node.getMpSymbolSetCreationOperatorWName().apply(this);
        }
        outAMpSymbolNameSetCreationOperOptions(node);
    }

    public void inAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        inAMpStdTypedSetCreationOperOptions(node);
        if(node.getMpTypedMpSetCreationOperator() != null)
        {
            node.getMpTypedMpSetCreationOperator().apply(this);
        }
        outAMpStdTypedSetCreationOperOptions(node);
    }

    public void inAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        inAMpSymbolTypedSetCreationOperOptions(node);
        if(node.getMpTypedMpSymbolMpSetCreationOperator() != null)
        {
            node.getMpTypedMpSymbolMpSetCreationOperator().apply(this);
        }
        outAMpSymbolTypedSetCreationOperOptions(node);
    }

    public void inAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        inAMpStdNameTypedSetCreationOperOptions(node);
        if(node.getMpTypedSetCreationOperatorWName() != null)
        {
            node.getMpTypedSetCreationOperatorWName().apply(this);
        }
        outAMpStdNameTypedSetCreationOperOptions(node);
    }

    public void inAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        inAMpSymbolNameTypedSetCreationOperOptions(node);
        if(node.getMpTypedSymbolSetCreationOperatorWName() != null)
        {
            node.getMpTypedSymbolSetCreationOperatorWName().apply(this);
        }
        outAMpSymbolNameTypedSetCreationOperOptions(node);
    }

    public void inAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        inAMpNewNameSetCreate(node);
        if(node.getSetCreate() != null)
        {
            node.getSetCreate().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMpNewNameSetCreate(node);
    }

    public void inAMpSetItems(AMpSetItems node)
    {
        defaultIn(node);
    }

    public void outAMpSetItems(AMpSetItems node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetItems(AMpSetItems node)
    {
        inAMpSetItems(node);
        {
            List<PSetItemsChildren> copy = new ArrayList<PSetItemsChildren>(node.getSetItemsChildren());
            Collections.reverse(copy);
            for(PSetItemsChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpSetItems(node);
    }

    public void inAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        defaultIn(node);
    }

    public void outAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        inAMpSetItemsChildren(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpSetItemsChildren(node);
    }

    public void inAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        inAMpSimpleSubsetCreation(node);
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpSimpleSubsetCreation(node);
    }

    public void inAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        defaultIn(node);
    }

    public void outAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        inAMpExpandingSubsetCreation(node);
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAMpExpandingSubsetCreation(node);
    }

    public void inAMpSubsetCreate(AMpSubsetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCreate(AMpSubsetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCreate(AMpSubsetCreate node)
    {
        inAMpSubsetCreate(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSubsetBodyOptions() != null)
        {
            node.getSubsetBodyOptions().apply(this);
        }
        if(node.getMpSymbolSetCreationOperator() != null)
        {
            node.getMpSymbolSetCreationOperator().apply(this);
        }
        outAMpSubsetCreate(node);
    }

    public void inAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        inAMpItemsSubsetBodyOptions(node);
        if(node.getSetItems() != null)
        {
            node.getSetItems().apply(this);
        }
        outAMpItemsSubsetBodyOptions(node);
    }

    public void inAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        inAMpAnnotationSubsetBodyOptions(node);
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        outAMpAnnotationSubsetBodyOptions(node);
    }

    public void inAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        inAMpFilterSubsetBodyOptions(node);
        if(node.getFilterStatement() != null)
        {
            node.getFilterStatement().apply(this);
        }
        outAMpFilterSubsetBodyOptions(node);
    }

    public void inAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        inAMpAllSubsetBodyOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpAllSubsetBodyOptions(node);
    }

    public void inAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        inAMpEmptySubsetBodyOptions(node);
        outAMpEmptySubsetBodyOptions(node);
    }

    public void inAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        inAMpSubsetCreateAbbr(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSubsetBodyOptions() != null)
        {
            node.getSubsetBodyOptions().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpSubsetCreateAbbr(node);
    }

    public void inAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        defaultIn(node);
    }

    public void outAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        inAMpAccessMpSymbolUseage(node);
        if(node.getSymbolAccess() != null)
        {
            node.getSymbolAccess().apply(this);
        }
        outAMpAccessMpSymbolUseage(node);
    }

    public void inAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        defaultIn(node);
    }

    public void outAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        inAMpCreationMpSymbolUseage(node);
        if(node.getSymbolCreation() != null)
        {
            node.getSymbolCreation().apply(this);
        }
        outAMpCreationMpSymbolUseage(node);
    }

    public void inAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        defaultIn(node);
    }

    public void outAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        inAMpStandardSymbolAccess(node);
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        outAMpStandardSymbolAccess(node);
    }

    public void inAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        defaultIn(node);
    }

    public void outAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        inAMpHasChildernSymbolAccess(node);
        if(node.getSymbolChildren() != null)
        {
            node.getSymbolChildren().apply(this);
        }
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        outAMpHasChildernSymbolAccess(node);
    }

    public void inAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        defaultIn(node);
    }

    public void outAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        inAMpChildrenSymbolChildren(node);
        if(node.getSymbolChildren() != null)
        {
            node.getSymbolChildren().apply(this);
        }
        if(node.getSymbolchildOptions() != null)
        {
            node.getSymbolchildOptions().apply(this);
        }
        outAMpChildrenSymbolChildren(node);
    }

    public void inAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        defaultIn(node);
    }

    public void outAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        inAMpEndSymbolChildren(node);
        if(node.getSymbolchildEnd() != null)
        {
            node.getSymbolchildEnd().apply(this);
        }
        outAMpEndSymbolChildren(node);
    }

    public void inAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        inAMpSymbolcreationSymbolChildren(node);
        if(node.getLatestartSymbolCreation() != null)
        {
            node.getLatestartSymbolCreation().apply(this);
        }
        outAMpSymbolcreationSymbolChildren(node);
    }

    public void inAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        defaultIn(node);
    }

    public void outAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        inAMpLatestartSymbolCreation(node);
        if(node.getSymbolCreation() != null)
        {
            node.getSymbolCreation().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpLatestartSymbolCreation(node);
    }

    public void inAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        defaultIn(node);
    }

    public void outAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        inAMpIdSymbolchildOptions(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpIdSymbolchildOptions(node);
    }

    public void inAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        defaultIn(node);
    }

    public void outAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        inAMpQuotesSymbolchildOptions(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpQuotesSymbolchildOptions(node);
    }

    public void inAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        inAMpBacktiksSymbolchildOptions(node);
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpBacktiksSymbolchildOptions(node);
    }

    public void inAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        defaultIn(node);
    }

    public void outAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        inAMpStandardSymbolchildEnd(node);
        if(node.getSymbolchildOptions() != null)
        {
            node.getSymbolchildOptions().apply(this);
        }
        outAMpStandardSymbolchildEnd(node);
    }

    public void inAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        inAMpSubsetSymbolchildEnd(node);
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        outAMpSubsetSymbolchildEnd(node);
    }

    public void inAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        inAMpStandardSymbolOptions(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAMpStandardSymbolOptions(node);
    }

    public void inAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        inAMpDesctagnameSymbolOptions(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMpColonPercentOperator() != null)
        {
            node.getMpColonPercentOperator().apply(this);
        }
        outAMpDesctagnameSymbolOptions(node);
    }

    public void inAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        inAMpQuotesSymbolOptions(node);
        if(node.getMpSymbolLiteralQuotes() != null)
        {
            node.getMpSymbolLiteralQuotes().apply(this);
        }
        outAMpQuotesSymbolOptions(node);
    }

    public void inAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        inAMpBacktiksSymbolOptions(node);
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        outAMpBacktiksSymbolOptions(node);
    }

    public void inAMpSymbolCreation(AMpSymbolCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolCreation(AMpSymbolCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolCreation(AMpSymbolCreation node)
    {
        inAMpSymbolCreation(node);
        if(node.getSymbolCreationChildrenOptions() != null)
        {
            node.getSymbolCreationChildrenOptions().apply(this);
        }
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMpSymbolCreation(node);
    }

    public void inAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        defaultIn(node);
    }

    public void outAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        inAMpPlusesSymbolCreationChildrenOptions(node);
        {
            List<PSymbolCreationWChildPluses> copy = new ArrayList<PSymbolCreationWChildPluses>(node.getSymbolCreationWChildPluses());
            Collections.reverse(copy);
            for(PSymbolCreationWChildPluses e : copy)
            {
                e.apply(this);
            }
        }
        outAMpPlusesSymbolCreationChildrenOptions(node);
    }

    public void inAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        defaultIn(node);
    }

    public void outAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        inAMpNoPlusesSymbolCreationChildrenOptions(node);
        {
            List<PSymbolCreationNoChildPluses> copy = new ArrayList<PSymbolCreationNoChildPluses>(node.getSymbolCreationNoChildPluses());
            Collections.reverse(copy);
            for(PSymbolCreationNoChildPluses e : copy)
            {
                e.apply(this);
            }
        }
        outAMpNoPlusesSymbolCreationChildrenOptions(node);
    }

    public void inAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        inAMpSymbolCreationWChildPluses(node);
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpSymbolCreationWChildPluses(node);
    }

    public void inAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        inAMpSymbolCreationNoChildPluses(node);
        if(node.getSymbolchildOptions() != null)
        {
            node.getSymbolchildOptions().apply(this);
        }
        outAMpSymbolCreationNoChildPluses(node);
    }

    public void inAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        defaultIn(node);
    }

    public void outAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        inAMpStartsWithPrimaryMatrixAccess(node);
        {
            List<PMatrixElemAccess> copy = new ArrayList<PMatrixElemAccess>(node.getMatrixElemAccess());
            Collections.reverse(copy);
            for(PMatrixElemAccess e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAMpStartsWithPrimaryMatrixAccess(node);
    }

    public void inAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        defaultIn(node);
    }

    public void outAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        inAMpStartsWithMatrixelementMatrixAccess(node);
        {
            List<PMatrixElemAccess> copy = new ArrayList<PMatrixElemAccess>(node.getMatrixElemAccess());
            Collections.reverse(copy);
            for(PMatrixElemAccess e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpStartsWithMatrixelementMatrixAccess(node);
    }

    public void inAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        inAMpMatrixElemAccess(node);
        if(node.getMatrixElemMultipleAccessOptions() != null)
        {
            node.getMatrixElemMultipleAccessOptions().apply(this);
        }
        if(node.getElementNameSpecifierOptions() != null)
        {
            node.getElementNameSpecifierOptions().apply(this);
        }
        if(node.getMatrixElemAccessOperatorOptions() != null)
        {
            node.getMatrixElemAccessOperatorOptions().apply(this);
        }
        outAMpMatrixElemAccess(node);
    }

    public void inAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        inAMpStdArrowMatrixElemAccessOperatorOptions(node);
        if(node.getMpArrowOperator() != null)
        {
            node.getMpArrowOperator().apply(this);
        }
        outAMpStdArrowMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        inAMpAnnotatedArrowMatrixElemAccessOperatorOptions(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        if(node.getMpDashLtOperator() != null)
        {
            node.getMpDashLtOperator().apply(this);
        }
        outAMpAnnotatedArrowMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        inAMpStdFieldaccessMatrixElemAccessOperatorOptions(node);
        if(node.getMpFieldAccessOperator() != null)
        {
            node.getMpFieldAccessOperator().apply(this);
        }
        outAMpStdFieldaccessMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        inAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        if(node.getMpColonLtOperator() != null)
        {
            node.getMpColonLtOperator().apply(this);
        }
        outAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        inAMpBracketElementNameSpecifierOptions(node);
        if(node.getElementNameSpecifyByBracket() != null)
        {
            node.getElementNameSpecifyByBracket().apply(this);
        }
        outAMpBracketElementNameSpecifierOptions(node);
    }

    public void inAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        defaultIn(node);
    }

    public void outAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        inAMpElemNameOrLabelElementNameSpecifierOptions(node);
        if(node.getElementNameOrDescriptorLabel() != null)
        {
            node.getElementNameOrDescriptorLabel().apply(this);
        }
        outAMpElemNameOrLabelElementNameSpecifierOptions(node);
    }

    public void inAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        defaultIn(node);
    }

    public void outAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        inAMpElemNameAndSecondAccessorElementNameSpecifierOptions(node);
        if(node.getElemNameAndSecondAccessor() != null)
        {
            node.getElemNameAndSecondAccessor().apply(this);
        }
        outAMpElemNameAndSecondAccessorElementNameSpecifierOptions(node);
    }

    public void inAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        defaultIn(node);
    }

    public void outAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        inAMpElementNameSpecifyByBracket(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getSecondDynAccessor() != null)
        {
            node.getSecondDynAccessor().apply(this);
        }
        if(node.getFirstDynAccessor() != null)
        {
            node.getFirstDynAccessor().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        outAMpElementNameSpecifyByBracket(node);
    }

    public void inAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        inAMpTagNameElementNameOrDescriptorLabel(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpTagNameElementNameOrDescriptorLabel(node);
    }

    public void inAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        inAMpLabelNameElementNameOrDescriptorLabel(node);
        if(node.getLabelnameBacktik() != null)
        {
            node.getLabelnameBacktik().apply(this);
        }
        outAMpLabelNameElementNameOrDescriptorLabel(node);
    }

    public void inAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        inAMpElemNameAndSecondAccessor(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getSecondAccessor() != null)
        {
            node.getSecondAccessor().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpElemNameAndSecondAccessor(node);
    }

    public void inAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        inAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(node);
        if(node.getMatrixElementNameIdentifierWOneOrMoreNamescopes() != null)
        {
            node.getMatrixElementNameIdentifierWOneOrMoreNamescopes().apply(this);
        }
        outAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(node);
    }

    public void inAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        inAMpSymbolExprFirstDynAccessor(node);
        if(node.getSymbolExpression() != null)
        {
            node.getSymbolExpression().apply(this);
        }
        outAMpSymbolExprFirstDynAccessor(node);
    }

    public void inAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        inAMpSecondDynAccessor(node);
        if(node.getSecondAccessor() != null)
        {
            node.getSecondAccessor().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpSecondDynAccessor(node);
    }

    public void inAMpSecondAccessor(AMpSecondAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpSecondAccessor(AMpSecondAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSecondAccessor(AMpSecondAccessor node)
    {
        inAMpSecondAccessor(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpSecondAccessor(node);
    }

    public void inAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        inAMpAnnotationSpaceshipUseage(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAMpAnnotationSpaceshipUseage(node);
    }

    public void inAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        inAMpStdMatrixElemMultipleAccessOptions(node);
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        outAMpStdMatrixElemMultipleAccessOptions(node);
    }

    public void inAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        inAMpAbbrMatrixElemMultipleAccessOptions(node);
        if(node.getSubsetCreateAbbr() != null)
        {
            node.getSubsetCreateAbbr().apply(this);
        }
        outAMpAbbrMatrixElemMultipleAccessOptions(node);
    }

    public void inAMpSymbolExpression(AMpSymbolExpression node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolExpression(AMpSymbolExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolExpression(AMpSymbolExpression node)
    {
        inAMpSymbolExpression(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpSymbolExpression(node);
    }

    public void inAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        inAMpMatrixElemAccessNoLabels(node);
        {
            List<PMatrixElemAccessNoLabelsChildren> copy = new ArrayList<PMatrixElemAccessNoLabelsChildren>(node.getMatrixElemAccessNoLabelsChildren());
            Collections.reverse(copy);
            for(PMatrixElemAccessNoLabelsChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpMatrixElemAccessNoLabels(node);
    }

    public void inAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        inAMpMatrixElemAccessNoLabelsChildren(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getArrowOrFieldAccess() != null)
        {
            node.getArrowOrFieldAccess().apply(this);
        }
        outAMpMatrixElemAccessNoLabelsChildren(node);
    }

    public void inAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        inAMpArrowArrowOrFieldAccess(node);
        if(node.getMpArrowOperator() != null)
        {
            node.getMpArrowOperator().apply(this);
        }
        outAMpArrowArrowOrFieldAccess(node);
    }

    public void inAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        inAMpFieldArrowOrFieldAccess(node);
        if(node.getMpFieldAccessOperator() != null)
        {
            node.getMpFieldAccessOperator().apply(this);
        }
        outAMpFieldArrowOrFieldAccess(node);
    }

    public void inAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        inAMpAnnotationUseage(node);
        if(node.getAnnotationNameOptions() != null)
        {
            node.getAnnotationNameOptions().apply(this);
        }
        outAMpAnnotationUseage(node);
    }

    public void inAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        inAMpIdAnnotationNameOptions(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpIdAnnotationNameOptions(node);
    }

    public void inAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        inAMpIntAnnotationNameOptions(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpIntAnnotationNameOptions(node);
    }

    public void inAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        inAMpFloatAnnotationNameOptions(node);
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpFloatAnnotationNameOptions(node);
    }

    public void inAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        inAMpAnnotationStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getAnnotationCall() != null)
        {
            node.getAnnotationCall().apply(this);
        }
        outAMpAnnotationStatement(node);
    }

    public void inAMpAnnotationCall(AMpAnnotationCall node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationCall(AMpAnnotationCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationCall(AMpAnnotationCall node)
    {
        inAMpAnnotationCall(node);
        {
            List<PAnnotationCallParameterOptions> copy = new ArrayList<PAnnotationCallParameterOptions>(node.getAnnotationCallParameterOptions());
            Collections.reverse(copy);
            for(PAnnotationCallParameterOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAnnotationNameOptions() != null)
        {
            node.getAnnotationNameOptions().apply(this);
        }
        outAMpAnnotationCall(node);
    }

    public void inAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        defaultIn(node);
    }

    public void outAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        inAMpCodeClosureAnnotationCallParameterOptions(node);
        if(node.getCodeClosure() != null)
        {
            node.getCodeClosure().apply(this);
        }
        outAMpCodeClosureAnnotationCallParameterOptions(node);
    }

    public void inAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        inAMpMpAnnotationsDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PMpAnnotationsBodyOptions> copy = new ArrayList<PMpAnnotationsBodyOptions>(node.getMpAnnotationsBodyOptions());
            Collections.reverse(copy);
            for(PMpAnnotationsBodyOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getMpAnnotationsKeyword() != null)
        {
            node.getMpAnnotationsKeyword().apply(this);
        }
        outAMpMpAnnotationsDeclaration(node);
    }

    public void inAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        inAMpCatchBlockMpAnnotationsBodyOptions(node);
        if(node.getCatchBlockDeclaration() != null)
        {
            node.getCatchBlockDeclaration().apply(this);
        }
        outAMpCatchBlockMpAnnotationsBodyOptions(node);
    }

    public void inAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        inAMpAnnotationHandlerMpAnnotationsBodyOptions(node);
        if(node.getAnnotationHandlerDeclaration() != null)
        {
            node.getAnnotationHandlerDeclaration().apply(this);
        }
        outAMpAnnotationHandlerMpAnnotationsBodyOptions(node);
    }

    public void inAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        inAMpCatchBlockDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PCatchBlockStatement> copy = new ArrayList<PCatchBlockStatement>(node.getCatchBlockStatement());
            Collections.reverse(copy);
            for(PCatchBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getCatchTypeList() != null)
        {
            node.getCatchTypeList().apply(this);
        }
        outAMpCatchBlockDeclaration(node);
    }

    public void inAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        inAMpCatchBlockStatement(node);
        if(node.getAnnotationBlockStatement() != null)
        {
            node.getAnnotationBlockStatement().apply(this);
        }
        outAMpCatchBlockStatement(node);
    }

    public void inAMpCatchTypeList(AMpCatchTypeList node)
    {
        defaultIn(node);
    }

    public void outAMpCatchTypeList(AMpCatchTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchTypeList(AMpCatchTypeList node)
    {
        inAMpCatchTypeList(node);
        {
            List<PCatchTypeParameter> copy = new ArrayList<PCatchTypeParameter>(node.getCatchTypeParameter());
            Collections.reverse(copy);
            for(PCatchTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCatchType() != null)
        {
            node.getCatchType().apply(this);
        }
        outAMpCatchTypeList(node);
    }

    public void inAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        defaultIn(node);
    }

    public void outAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        inAMpCatchTypeParameter(node);
        if(node.getCatchType() != null)
        {
            node.getCatchType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpCatchTypeParameter(node);
    }

    public void inAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        inAMpErrorsCatchType(node);
        if(node.getMpErrorsKeyword() != null)
        {
            node.getMpErrorsKeyword().apply(this);
        }
        outAMpErrorsCatchType(node);
    }

    public void inAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        inAMpEmptyCatchType(node);
        if(node.getMpEmptyKeyword() != null)
        {
            node.getMpEmptyKeyword().apply(this);
        }
        outAMpEmptyCatchType(node);
    }

    public void inAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        inAMpFiltersCatchType(node);
        if(node.getMpFiltersKeyword() != null)
        {
            node.getMpFiltersKeyword().apply(this);
        }
        outAMpFiltersCatchType(node);
    }

    public void inAMpAllCatchType(AMpAllCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpAllCatchType(AMpAllCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAllCatchType(AMpAllCatchType node)
    {
        inAMpAllCatchType(node);
        if(node.getMpAllKeyword() != null)
        {
            node.getMpAllKeyword().apply(this);
        }
        outAMpAllCatchType(node);
    }

    public void inAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        inAMpExceptionsCatchType(node);
        if(node.getMpExceptionsKeyword() != null)
        {
            node.getMpExceptionsKeyword().apply(this);
        }
        outAMpExceptionsCatchType(node);
    }

    public void inAMpIdCatchType(AMpIdCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpIdCatchType(AMpIdCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdCatchType(AMpIdCatchType node)
    {
        inAMpIdCatchType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpIdCatchType(node);
    }

    public void inAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        inAMpAnnotationHandlerDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PAnnotationBlockStatement> copy = new ArrayList<PAnnotationBlockStatement>(node.getAnnotationBlockStatement());
            Collections.reverse(copy);
            for(PAnnotationBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getAnnotationParameters() != null)
        {
            node.getAnnotationParameters().apply(this);
        }
        if(node.getAnnotationHandlerNameOptions() != null)
        {
            node.getAnnotationHandlerNameOptions().apply(this);
        }
        outAMpAnnotationHandlerDeclaration(node);
    }

    public void inAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        inAMpAnnotationNamesAnnotationHandlerNameOptions(node);
        if(node.getAnnotationNameOptions() != null)
        {
            node.getAnnotationNameOptions().apply(this);
        }
        outAMpAnnotationNamesAnnotationHandlerNameOptions(node);
    }

    public void inAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        inAMpDefaultAnnotationHandlerNameOptions(node);
        if(node.getMpAnnoteDefaultKeyword() != null)
        {
            node.getMpAnnoteDefaultKeyword().apply(this);
        }
        outAMpDefaultAnnotationHandlerNameOptions(node);
    }

    public void inAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        inAMpAnnotationParameters(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMpAnnotationParameters(node);
    }

    public void inAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        inAMpAccessorReturnAnnotationBlockStatement(node);
        if(node.getAccessorReturnStatement() != null)
        {
            node.getAccessorReturnStatement().apply(this);
        }
        outAMpAccessorReturnAnnotationBlockStatement(node);
    }

    public void inAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        inAMpMatrixStmtAnnotationBlockStatement(node);
        if(node.getMatrixStatement() != null)
        {
            node.getMatrixStatement().apply(this);
        }
        outAMpMatrixStmtAnnotationBlockStatement(node);
    }

    public void inAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        inAMpFilterAnnotationBlockStatement(node);
        if(node.getFilterStatement() != null)
        {
            node.getFilterStatement().apply(this);
        }
        outAMpFilterAnnotationBlockStatement(node);
    }

    public void inAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        inAMpAnnotationHandlerAnnotationBlockStatement(node);
        if(node.getAnnotationHandlerDeclaration() != null)
        {
            node.getAnnotationHandlerDeclaration().apply(this);
        }
        outAMpAnnotationHandlerAnnotationBlockStatement(node);
    }

    public void inAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        inAMpCatchBlockAnnotationBlockStatement(node);
        if(node.getAnnotationBlockErrorHandler() != null)
        {
            node.getAnnotationBlockErrorHandler().apply(this);
        }
        outAMpCatchBlockAnnotationBlockStatement(node);
    }

    public void inAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        inAMpAnnotationBlockErrorHandler(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PAnnotationBlockErrorStatement> copy = new ArrayList<PAnnotationBlockErrorStatement>(node.getAnnotationBlockErrorStatement());
            Collections.reverse(copy);
            for(PAnnotationBlockErrorStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getMpErrorsKeyword() != null)
        {
            node.getMpErrorsKeyword().apply(this);
        }
        outAMpAnnotationBlockErrorHandler(node);
    }

    public void inAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        inAMpAccessorReturnAnnotationBlockErrorStatement(node);
        if(node.getAccessorReturnStatement() != null)
        {
            node.getAccessorReturnStatement().apply(this);
        }
        outAMpAccessorReturnAnnotationBlockErrorStatement(node);
    }

    public void inAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        inAMpMatrixStmtAnnotationBlockErrorStatement(node);
        if(node.getMatrixStatement() != null)
        {
            node.getMatrixStatement().apply(this);
        }
        outAMpMatrixStmtAnnotationBlockErrorStatement(node);
    }

    public void inAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        inAMpAccessorReturnStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        if(node.getMpReturnKeyword() != null)
        {
            node.getMpReturnKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpAccessorKeyword() != null)
        {
            node.getMpAccessorKeyword().apply(this);
        }
        outAMpAccessorReturnStatement(node);
    }

    public void inAMpFilterStatement(AMpFilterStatement node)
    {
        defaultIn(node);
    }

    public void outAMpFilterStatement(AMpFilterStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterStatement(AMpFilterStatement node)
    {
        inAMpFilterStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFilterFields() != null)
        {
            node.getFilterFields().apply(this);
        }
        if(node.getFilterWhere() != null)
        {
            node.getFilterWhere().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMpFromKeyword() != null)
        {
            node.getMpFromKeyword().apply(this);
        }
        if(node.getMpSelectKeyword() != null)
        {
            node.getMpSelectKeyword().apply(this);
        }
        outAMpFilterStatement(node);
    }

    public void inAMpFilterWhere(AMpFilterWhere node)
    {
        defaultIn(node);
    }

    public void outAMpFilterWhere(AMpFilterWhere node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterWhere(AMpFilterWhere node)
    {
        inAMpFilterWhere(node);
        if(node.getWhereExpression() != null)
        {
            node.getWhereExpression().apply(this);
        }
        if(node.getMpWhereKeyword() != null)
        {
            node.getMpWhereKeyword().apply(this);
        }
        outAMpFilterWhere(node);
    }

    public void inAMpFilterFields(AMpFilterFields node)
    {
        defaultIn(node);
    }

    public void outAMpFilterFields(AMpFilterFields node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterFields(AMpFilterFields node)
    {
        inAMpFilterFields(node);
        if(node.getFilterFieldlist() != null)
        {
            node.getFilterFieldlist().apply(this);
        }
        if(node.getMpFieldsKeyword() != null)
        {
            node.getMpFieldsKeyword().apply(this);
        }
        outAMpFilterFields(node);
    }

    public void inAMpWhereExpression(AMpWhereExpression node)
    {
        defaultIn(node);
    }

    public void outAMpWhereExpression(AMpWhereExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpWhereExpression(AMpWhereExpression node)
    {
        inAMpWhereExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMpWhereExpression(node);
    }

    public void inAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        defaultIn(node);
    }

    public void outAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        inAMpFilterFieldlist(node);
        {
            List<PFilterFieldChildren> copy = new ArrayList<PFilterFieldChildren>(node.getFilterFieldChildren());
            Collections.reverse(copy);
            for(PFilterFieldChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFilterField() != null)
        {
            node.getFilterField().apply(this);
        }
        outAMpFilterFieldlist(node);
    }

    public void inAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        defaultIn(node);
    }

    public void outAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        inAMpFilterFieldChildren(node);
        if(node.getFilterField() != null)
        {
            node.getFilterField().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMpFilterFieldChildren(node);
    }

    public void inAMpFilterField(AMpFilterField node)
    {
        defaultIn(node);
    }

    public void outAMpFilterField(AMpFilterField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterField(AMpFilterField node)
    {
        inAMpFilterField(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpFilterField(node);
    }

    public void inAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        inAMpVarMpMatrixTypes(node);
        if(node.getMpVarKeyword() != null)
        {
            node.getMpVarKeyword().apply(this);
        }
        outAMpVarMpMatrixTypes(node);
    }

    public void inAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        inAMpSymbolMpMatrixTypes(node);
        if(node.getMpSymbolKeyword() != null)
        {
            node.getMpSymbolKeyword().apply(this);
        }
        outAMpSymbolMpMatrixTypes(node);
    }

    public void inAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        inAMpClosureMpMatrixTypes(node);
        if(node.getMpClosureKeyword() != null)
        {
            node.getMpClosureKeyword().apply(this);
        }
        outAMpClosureMpMatrixTypes(node);
    }

    public void inAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        inAMpMatrixMpMatrixTypes(node);
        if(node.getMpMatrixElementTypes() != null)
        {
            node.getMpMatrixElementTypes().apply(this);
        }
        outAMpMatrixMpMatrixTypes(node);
    }

    public void inAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        inAMpSetMpMatrixTypes(node);
        if(node.getMpSetType() != null)
        {
            node.getMpSetType().apply(this);
        }
        outAMpSetMpMatrixTypes(node);
    }

    public void inAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        inAMpMatrixMpMatrixElementTypes(node);
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        outAMpMatrixMpMatrixElementTypes(node);
    }

    public void inAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        inAMpSchemaMpMatrixElementTypes(node);
        if(node.getMpSchemaKeyword() != null)
        {
            node.getMpSchemaKeyword().apply(this);
        }
        outAMpSchemaMpMatrixElementTypes(node);
    }

    public void inAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        inAMpDescriptorMpMatrixElementTypes(node);
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        outAMpDescriptorMpMatrixElementTypes(node);
    }

    public void inAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        inAMpItemMpMatrixElementTypes(node);
        if(node.getMpItemKeyword() != null)
        {
            node.getMpItemKeyword().apply(this);
        }
        outAMpItemMpMatrixElementTypes(node);
    }

    public void inAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        inAMpFieldMpMatrixElementTypes(node);
        if(node.getMpFieldKeyword() != null)
        {
            node.getMpFieldKeyword().apply(this);
        }
        outAMpFieldMpMatrixElementTypes(node);
    }

    public void inAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        inAMpElementMpMatrixElementTypes(node);
        if(node.getMpElementKeyword() != null)
        {
            node.getMpElementKeyword().apply(this);
        }
        outAMpElementMpMatrixElementTypes(node);
    }

    public void inAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        inAMpSimpleMpSetType(node);
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        outAMpSimpleMpSetType(node);
    }

    public void inAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        inAMpTypedMpSetType(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        outAMpTypedMpSetType(node);
    }

    public void inAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        inAMpSubsetCardinalityMpSetType(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        outAMpSubsetCardinalityMpSetType(node);
    }

    public void inAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        inAMpTypedAndSubsetCardinalityMpSetType(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        outAMpTypedAndSubsetCardinalityMpSetType(node);
    }

    public void inAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        inAMpMatrixMatrixElementCreation(node);
        if(node.getMatrixNewDeclaration() != null)
        {
            node.getMatrixNewDeclaration().apply(this);
        }
        outAMpMatrixMatrixElementCreation(node);
    }

    public void inAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        inAMpSchemaMatrixElementCreation(node);
        if(node.getSchemaNewDeclaration() != null)
        {
            node.getSchemaNewDeclaration().apply(this);
        }
        outAMpSchemaMatrixElementCreation(node);
    }

    public void inAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        inAMpDescriptorMatrixElementCreation(node);
        if(node.getDescriptorNew() != null)
        {
            node.getDescriptorNew().apply(this);
        }
        outAMpDescriptorMatrixElementCreation(node);
    }

    public void inAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        inAMpItemMatrixElementCreation(node);
        if(node.getItemNew() != null)
        {
            node.getItemNew().apply(this);
        }
        outAMpItemMatrixElementCreation(node);
    }

    public void inAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        inAMpFieldMatrixElementCreation(node);
        if(node.getFieldNew() != null)
        {
            node.getFieldNew().apply(this);
        }
        outAMpFieldMatrixElementCreation(node);
    }

    public void inAMpDescriptorNew(AMpDescriptorNew node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorNew(AMpDescriptorNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorNew(AMpDescriptorNew node)
    {
        inAMpDescriptorNew(node);
        if(node.getDescriptorNewBodyOptions() != null)
        {
            node.getDescriptorNewBodyOptions().apply(this);
        }
        if(node.getNewUsesSchema() != null)
        {
            node.getNewUsesSchema().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        outAMpDescriptorNew(node);
    }

    public void inAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        inAMpBracesDescriptorNewBodyOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getDescriptorNewBody() != null)
        {
            node.getDescriptorNewBody().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpBracesDescriptorNewBodyOptions(node);
    }

    public void inAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        inAMpEmptyDescriptorNewBodyOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpEmptyDescriptorNewBodyOptions(node);
    }

    public void inAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        inAMpDescriptorNewBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDescriptorFieldAndBodyOptions() != null)
        {
            node.getDescriptorFieldAndBodyOptions().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getDescriptorHeadStd() != null)
        {
            node.getDescriptorHeadStd().apply(this);
        }
        outAMpDescriptorNewBody(node);
    }

    public void inAMpItemNew(AMpItemNew node)
    {
        defaultIn(node);
    }

    public void outAMpItemNew(AMpItemNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemNew(AMpItemNew node)
    {
        inAMpItemNew(node);
        if(node.getItemNewBodyOptions() != null)
        {
            node.getItemNewBodyOptions().apply(this);
        }
        if(node.getNewUsesSchema() != null)
        {
            node.getNewUsesSchema().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpItemKeyword() != null)
        {
            node.getMpItemKeyword().apply(this);
        }
        outAMpItemNew(node);
    }

    public void inAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        inAMpBracesItemNewBodyOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getItemNewBody() != null)
        {
            node.getItemNewBody().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpBracesItemNewBodyOptions(node);
    }

    public void inAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        inAMpEmptyItemNewBodyOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpEmptyItemNewBodyOptions(node);
    }

    public void inAMpItemNewBody(AMpItemNewBody node)
    {
        defaultIn(node);
    }

    public void outAMpItemNewBody(AMpItemNewBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemNewBody(AMpItemNewBody node)
    {
        inAMpItemNewBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDescriptorFieldAndBodyOptions() != null)
        {
            node.getDescriptorFieldAndBodyOptions().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getItemNewNameOptions() != null)
        {
            node.getItemNewNameOptions().apply(this);
        }
        outAMpItemNewBody(node);
    }

    public void inAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        inAMpStdItemNewNameOptions(node);
        if(node.getDescriptorHeadHiddenTagname() != null)
        {
            node.getDescriptorHeadHiddenTagname().apply(this);
        }
        outAMpStdItemNewNameOptions(node);
    }

    public void inAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        inAMpPassInNameItemNewNameOptions(node);
        if(node.getElementNameSpecifyByBracket() != null)
        {
            node.getElementNameSpecifyByBracket().apply(this);
        }
        outAMpPassInNameItemNewNameOptions(node);
    }

    public void inAMpFieldNew(AMpFieldNew node)
    {
        defaultIn(node);
    }

    public void outAMpFieldNew(AMpFieldNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldNew(AMpFieldNew node)
    {
        inAMpFieldNew(node);
        if(node.getFieldBody() != null)
        {
            node.getFieldBody().apply(this);
        }
        if(node.getNewUsesSchema() != null)
        {
            node.getNewUsesSchema().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpFieldKeyword() != null)
        {
            node.getMpFieldKeyword().apply(this);
        }
        outAMpFieldNew(node);
    }

    public void inAMpStdFieldBody(AMpStdFieldBody node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldBody(AMpStdFieldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldBody(AMpStdFieldBody node)
    {
        inAMpStdFieldBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getParameterMappingToValue() != null)
        {
            node.getParameterMappingToValue().apply(this);
        }
        if(node.getMatrixElemAccessOptionsFromFieldBody() != null)
        {
            node.getMatrixElemAccessOptionsFromFieldBody().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpStdFieldBody(node);
    }

    public void inAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        inAMpEmptyFieldBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpEmptyFieldBody(node);
    }

    public void inAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        defaultIn(node);
    }

    public void outAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        inAMpNewUsesSchema(node);
        if(node.getNewSchemaOptions() != null)
        {
            node.getNewSchemaOptions().apply(this);
        }
        if(node.getMpUsesKeyword() != null)
        {
            node.getMpUsesKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMpNewUsesSchema(node);
    }

    public void inAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        inAMpSetNewSchemaOptions(node);
        if(node.getNewSchemaSet() != null)
        {
            node.getNewSchemaSet().apply(this);
        }
        outAMpSetNewSchemaOptions(node);
    }

    public void inAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        defaultIn(node);
    }

    public void outAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        inAMpNewSchemaSet(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getSchemaNameList() != null)
        {
            node.getSchemaNameList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAMpNewSchemaSet(node);
    }

    public void inAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        inAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(node);
        if(node.getMatrixElemAccessNoLabels() != null)
        {
            node.getMatrixElemAccessNoLabels().apply(this);
        }
        outAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(node);
    }

    public void inAMpCodeClosure(AMpCodeClosure node)
    {
        defaultIn(node);
    }

    public void outAMpCodeClosure(AMpCodeClosure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCodeClosure(AMpCodeClosure node)
    {
        inAMpCodeClosure(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PCodeClosureStatementOptions> copy = new ArrayList<PCodeClosureStatementOptions>(node.getCodeClosureStatementOptions());
            Collections.reverse(copy);
            for(PCodeClosureStatementOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpCodeClosureOperator() != null)
        {
            node.getMpCodeClosureOperator().apply(this);
        }
        outAMpCodeClosure(node);
    }

    public void inAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        defaultIn(node);
    }

    public void outAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        inAMpExpressionCodeClosureStatementOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMpExpressionCodeClosureStatementOptions(node);
    }

    public void inAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        inAMpStatementCodeClosureStatementOptions(node);
        if(node.getMatrixStatement() != null)
        {
            node.getMatrixStatement().apply(this);
        }
        outAMpStatementCodeClosureStatementOptions(node);
    }

    public void inAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        inAMpMatrixFieldExpression(node);
        if(node.getMatrixFieldExpressionContinuation() != null)
        {
            node.getMatrixFieldExpressionContinuation().apply(this);
        }
        outAMpMatrixFieldExpression(node);
    }

    public void inAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        inAMpMatrixFieldExpressionContinuation(node);
        if(node.getContinuationOperator() != null)
        {
            node.getContinuationOperator().apply(this);
        }
        if(node.getMatrixFieldExpressionOptions() != null)
        {
            node.getMatrixFieldExpressionOptions().apply(this);
        }
        outAMpMatrixFieldExpressionContinuation(node);
    }

    public void inAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        inAMpMatrixExpressionMatrixFieldExpressionOptions(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpMatrixExpressionMatrixFieldExpressionOptions(node);
    }

    public void inAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        inAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(node);
        if(node.getFieldValueOperatorOptions() != null)
        {
            node.getFieldValueOperatorOptions().apply(this);
        }
        outAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(node);
    }

    public void inAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        inAMpPrimitiveMatrixFieldExpressionOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpPrimitiveMatrixFieldExpressionOptions(node);
    }

    public void inAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        inAMpReferenceMatrixFieldExpressionOptions(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAMpReferenceMatrixFieldExpressionOptions(node);
    }

    public void inAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        inAMpDefaultFieldValueOperatorOptions(node);
        if(node.getDefaultFieldvalueOptions() != null)
        {
            node.getDefaultFieldvalueOptions().apply(this);
        }
        outAMpDefaultFieldValueOperatorOptions(node);
    }

    public void inAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        inAMpUnusedFieldValueOperatorOptions(node);
        if(node.getUnusedFieldvalueOptions() != null)
        {
            node.getUnusedFieldvalueOptions().apply(this);
        }
        outAMpUnusedFieldValueOperatorOptions(node);
    }

    public void inAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        inAMpDittoPrevFieldValueOperatorOptions(node);
        if(node.getDittoPrevFieldvalueOptions() != null)
        {
            node.getDittoPrevFieldvalueOptions().apply(this);
        }
        outAMpDittoPrevFieldValueOperatorOptions(node);
    }

    public void inAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        inAMpDittoPrevLevelFieldValueOperatorOptions(node);
        if(node.getDittoPrevLevelFieldvalueOptions() != null)
        {
            node.getDittoPrevLevelFieldvalueOptions().apply(this);
        }
        outAMpDittoPrevLevelFieldValueOperatorOptions(node);
    }

    public void inAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        inAMpOpDefaultFieldvalueOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpOpDefaultFieldvalueOptions(node);
    }

    public void inAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        inAMpVarDefaultFieldvalueOptions(node);
        if(node.getMpDefaultKeyword() != null)
        {
            node.getMpDefaultKeyword().apply(this);
        }
        outAMpVarDefaultFieldvalueOptions(node);
    }

    public void inAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        inAMpOpUnusedFieldvalueOptions(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMpOpUnusedFieldvalueOptions(node);
    }

    public void inAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        inAMpVarUnusedFieldvalueOptions(node);
        if(node.getMpUnusedKeyword() != null)
        {
            node.getMpUnusedKeyword().apply(this);
        }
        outAMpVarUnusedFieldvalueOptions(node);
    }

    public void inAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        inAMpOpDittoPrevFieldvalueOptions(node);
        if(node.getMpPairSinglequotes() != null)
        {
            node.getMpPairSinglequotes().apply(this);
        }
        outAMpOpDittoPrevFieldvalueOptions(node);
    }

    public void inAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        inAMpVarDittoPrevFieldvalueOptions(node);
        if(node.getMpDittoKeyword() != null)
        {
            node.getMpDittoKeyword().apply(this);
        }
        outAMpVarDittoPrevFieldvalueOptions(node);
    }

    public void inAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        inAMpOpDittoPrevLevelFieldvalueOptions(node);
        if(node.getMpDittoPrevLevelOperator() != null)
        {
            node.getMpDittoPrevLevelOperator().apply(this);
        }
        outAMpOpDittoPrevLevelFieldvalueOptions(node);
    }

    public void inAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        inAMpVarDittoPrevLevelFieldvalueOptions(node);
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getMpDittoKeyword() != null)
        {
            node.getMpDittoKeyword().apply(this);
        }
        outAMpVarDittoPrevLevelFieldvalueOptions(node);
    }

    public void inAContinuationOperator(AContinuationOperator node)
    {
        defaultIn(node);
    }

    public void outAContinuationOperator(AContinuationOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinuationOperator(AContinuationOperator node)
    {
        inAContinuationOperator(node);
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        outAContinuationOperator(node);
    }

    public void inAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        defaultIn(node);
    }

    public void outAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        inAMpVarDeclarationMatrixStatement(node);
        if(node.getLocalVariableDeclarationStatement() != null)
        {
            node.getLocalVariableDeclarationStatement().apply(this);
        }
        outAMpVarDeclarationMatrixStatement(node);
    }

    public void inAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        defaultIn(node);
    }

    public void outAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        inAMpStatementMatrixStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAMpStatementMatrixStatement(node);
    }

    public void inAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        defaultIn(node);
    }

    public void outAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        inAMpExpressionMatrixExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMpExpressionMatrixExpression(node);
    }

    public void inAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        defaultIn(node);
    }

    public void outAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        inAMpIdMatrixExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpIdMatrixExpression(node);
    }

    public void inAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        defaultIn(node);
    }

    public void outAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        inAMpOutsideIncludedProdMatrixExpression(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMpOutsideIncludedProdMatrixExpression(node);
    }

    public void inAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        inAMpSymbolMpOutsideIncludedExpressionRelatedProd(node);
        if(node.getMpSymbolUseage() != null)
        {
            node.getMpSymbolUseage().apply(this);
        }
        outAMpSymbolMpOutsideIncludedExpressionRelatedProd(node);
    }

    public void inAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultIn(node);
    }

    public void outAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        inAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(node);
        if(node.getMatrixElementCreation() != null)
        {
            node.getMatrixElementCreation().apply(this);
        }
        outAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(node);
    }

    public void inAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultIn(node);
    }

    public void outAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        inAMpElementMpOutsideIncludedExprRelatedProdPlusId(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMpElementMpOutsideIncludedExprRelatedProdPlusId(node);
    }

    public void inAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultIn(node);
    }

    public void outAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        inAMpIdMpOutsideIncludedExprRelatedProdPlusId(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpIdMpOutsideIncludedExprRelatedProdPlusId(node);
    }

    public void inAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        defaultIn(node);
    }

    public void outAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        inAMpPrimitiveMpTypes(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAMpPrimitiveMpTypes(node);
    }

    public void inAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        defaultIn(node);
    }

    public void outAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        inAMpReferenceMpTypes(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpReferenceMpTypes(node);
    }

    public void inAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        inAMpIntMpIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAMpIntMpIntegerLiteral(node);
    }

    public void inAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        inAMpUnlimitedConstantMpIntegerLiteral(node);
        if(node.getMpNKeyword() != null)
        {
            node.getMpNKeyword().apply(this);
        }
        outAMpUnlimitedConstantMpIntegerLiteral(node);
    }

    public void inAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        inAMpIntegerRangeMpIntegerLiteral(node);
        if(node.getMpTokenNumberRange() != null)
        {
            node.getMpTokenNumberRange().apply(this);
        }
        outAMpIntegerRangeMpIntegerLiteral(node);
    }

    public void inAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        inAMpNotANumberMpIntegerLiteral(node);
        if(node.getMpNanKeyword() != null)
        {
            node.getMpNanKeyword().apply(this);
        }
        outAMpNotANumberMpIntegerLiteral(node);
    }

    public void inAMpItVariable(AMpItVariable node)
    {
        defaultIn(node);
    }

    public void outAMpItVariable(AMpItVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItVariable(AMpItVariable node)
    {
        inAMpItVariable(node);
        if(node.getMpItKeyword() != null)
        {
            node.getMpItKeyword().apply(this);
        }
        outAMpItVariable(node);
    }

    public void inAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        defaultIn(node);
    }

    public void outAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        inAMpExistMatrixPredefinedMethods(node);
        if(node.getExistMethod() != null)
        {
            node.getExistMethod().apply(this);
        }
        outAMpExistMatrixPredefinedMethods(node);
    }

    public void inAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        defaultIn(node);
    }

    public void outAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        inAMpValidMatrixPredefinedMethods(node);
        if(node.getValidMethod() != null)
        {
            node.getValidMethod().apply(this);
        }
        outAMpValidMatrixPredefinedMethods(node);
    }

    public void inAMpExistMethod(AMpExistMethod node)
    {
        defaultIn(node);
    }

    public void outAMpExistMethod(AMpExistMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExistMethod(AMpExistMethod node)
    {
        inAMpExistMethod(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMpExistKeyword() != null)
        {
            node.getMpExistKeyword().apply(this);
        }
        outAMpExistMethod(node);
    }

    public void inAMpValidMethod(AMpValidMethod node)
    {
        defaultIn(node);
    }

    public void outAMpValidMethod(AMpValidMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpValidMethod(AMpValidMethod node)
    {
        inAMpValidMethod(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMpValidKeyword() != null)
        {
            node.getMpValidKeyword().apply(this);
        }
        outAMpValidMethod(node);
    }

    public void inAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        inAMpMatrixImportDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAMpMatrixImportDeclaration(node);
    }

    public void inAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        inAMpSchemaImportDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getMpSchemaKeyword() != null)
        {
            node.getMpSchemaKeyword().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAMpSchemaImportDeclaration(node);
    }

    public void inAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        defaultIn(node);
    }

    public void outAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        inAMpPublicMatrixAccessModifier(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAMpPublicMatrixAccessModifier(node);
    }

    public void inAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        defaultIn(node);
    }

    public void outAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        inAMpPrivateMatrixAccessModifier(node);
        if(node.getPrivate() != null)
        {
            node.getPrivate().apply(this);
        }
        outAMpPrivateMatrixAccessModifier(node);
    }

    public void inAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        inAMpDescriptorVariableType(node);
        if(node.getMatrixAccessType() != null)
        {
            node.getMatrixAccessType().apply(this);
        }
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpDescriptorVariableType(node);
    }

    public void inAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        inAMpMatrixAccessMatrixAccessType(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAMpMatrixAccessMatrixAccessType(node);
    }

    public void inASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        inASingleImportDeclaration(node);
        if(node.getSingleTypeImportDeclaration() != null)
        {
            node.getSingleTypeImportDeclaration().apply(this);
        }
        outASingleImportDeclaration(node);
    }

    public void inASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        inASingleDemandImportDeclaration(node);
        if(node.getTypeImportOnDemandDeclaration() != null)
        {
            node.getTypeImportOnDemandDeclaration().apply(this);
        }
        outASingleDemandImportDeclaration(node);
    }

    public void inAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        inAStaticImportDeclaration(node);
        if(node.getSingleStaticImportDeclaration() != null)
        {
            node.getSingleStaticImportDeclaration().apply(this);
        }
        outAStaticImportDeclaration(node);
    }

    public void inAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        inAStaticDemandImportDeclaration(node);
        if(node.getStaticImportOnDemandDeclaration() != null)
        {
            node.getStaticImportOnDemandDeclaration().apply(this);
        }
        outAStaticDemandImportDeclaration(node);
    }

    public void inAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        inAMjMatrixImportImportDeclaration(node);
        if(node.getMatrixImportDeclaration() != null)
        {
            node.getMatrixImportDeclaration().apply(this);
        }
        outAMjMatrixImportImportDeclaration(node);
    }

    public void inAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        inAMjSchemaImportImportDeclaration(node);
        if(node.getSchemaImportDeclaration() != null)
        {
            node.getSchemaImportDeclaration().apply(this);
        }
        outAMjSchemaImportImportDeclaration(node);
    }

    public void inAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassTypeDeclaration(AClassTypeDeclaration node)
    {
        inAClassTypeDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassTypeDeclaration(node);
    }

    public void inAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceTypeDeclaration(AInterfaceTypeDeclaration node)
    {
        inAInterfaceTypeDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceTypeDeclaration(node);
    }

    public void inAEmptyTypeDeclaration(AEmptyTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEmptyTypeDeclaration(AEmptyTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyTypeDeclaration(AEmptyTypeDeclaration node)
    {
        inAEmptyTypeDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyTypeDeclaration(node);
    }

    public void inANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        inANormalAnnotationAnnotation(node);
        if(node.getNormalAnnotation() != null)
        {
            node.getNormalAnnotation().apply(this);
        }
        outANormalAnnotationAnnotation(node);
    }

    public void inAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        inAMarkerAnnotationAnnotation(node);
        if(node.getMarkerAnnotation() != null)
        {
            node.getMarkerAnnotation().apply(this);
        }
        outAMarkerAnnotationAnnotation(node);
    }

    public void inASingleElementAnnotationAnnotation(ASingleElementAnnotationAnnotation node)
    {
        defaultIn(node);
    }

    public void outASingleElementAnnotationAnnotation(ASingleElementAnnotationAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleElementAnnotationAnnotation(ASingleElementAnnotationAnnotation node)
    {
        inASingleElementAnnotationAnnotation(node);
        if(node.getSingleElementAnnotation() != null)
        {
            node.getSingleElementAnnotation().apply(this);
        }
        outASingleElementAnnotationAnnotation(node);
    }

    public void inASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        inASingleTypeImportDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outASingleTypeImportDeclaration(node);
    }

    public void inATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        inATypeImportOnDemandDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outATypeImportOnDemandDeclaration(node);
    }

    public void inASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        inASingleStaticImportDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outASingleStaticImportDeclaration(node);
    }

    public void inAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        inAStaticImportOnDemandDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAStaticImportOnDemandDeclaration(node);
    }

    public void inANormalClassClassDeclaration(ANormalClassClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalClassClassDeclaration(ANormalClassClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalClassClassDeclaration(ANormalClassClassDeclaration node)
    {
        inANormalClassClassDeclaration(node);
        if(node.getNormalClassDeclaration() != null)
        {
            node.getNormalClassDeclaration().apply(this);
        }
        outANormalClassClassDeclaration(node);
    }

    public void inAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumClassDeclaration(AEnumClassDeclaration node)
    {
        inAEnumClassDeclaration(node);
        if(node.getEnumDeclaration() != null)
        {
            node.getEnumDeclaration().apply(this);
        }
        outAEnumClassDeclaration(node);
    }

    public void inANormalInterfaceInterfaceDeclaration(ANormalInterfaceInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalInterfaceInterfaceDeclaration(ANormalInterfaceInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalInterfaceInterfaceDeclaration(ANormalInterfaceInterfaceDeclaration node)
    {
        inANormalInterfaceInterfaceDeclaration(node);
        if(node.getNormalInterfaceDeclaration() != null)
        {
            node.getNormalInterfaceDeclaration().apply(this);
        }
        outANormalInterfaceInterfaceDeclaration(node);
    }

    public void inAAnnotationTypeInterfaceDeclaration(AAnnotationTypeInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeInterfaceDeclaration(AAnnotationTypeInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeInterfaceDeclaration(AAnnotationTypeInterfaceDeclaration node)
    {
        inAAnnotationTypeInterfaceDeclaration(node);
        if(node.getAnnotationTypeDeclaration() != null)
        {
            node.getAnnotationTypeDeclaration().apply(this);
        }
        outAAnnotationTypeInterfaceDeclaration(node);
    }

    public void inANormalAnnotation(ANormalAnnotation node)
    {
        defaultIn(node);
    }

    public void outANormalAnnotation(ANormalAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        inANormalAnnotation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getElementValuePairs() != null)
        {
            node.getElementValuePairs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        outANormalAnnotation(node);
    }

    public void inAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultIn(node);
    }

    public void outAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        inAMarkerAnnotation(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        outAMarkerAnnotation(node);
    }

    public void inASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultIn(node);
    }

    public void outASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        inASingleElementAnnotation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        outASingleElementAnnotation(node);
    }

    public void inANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalClassDeclaration(ANormalClassDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalClassDeclaration(ANormalClassDeclaration node)
    {
        inANormalClassDeclaration(node);
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getInterfaces() != null)
        {
            node.getInterfaces().apply(this);
        }
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outANormalClassDeclaration(node);
    }

    public void inAEnumDeclaration(AEnumDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEnumDeclaration(AEnumDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumDeclaration(AEnumDeclaration node)
    {
        inAEnumDeclaration(node);
        if(node.getEnumBody() != null)
        {
            node.getEnumBody().apply(this);
        }
        if(node.getInterfaces() != null)
        {
            node.getInterfaces().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAEnumDeclaration(node);
    }

    public void inANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultIn(node);
    }

    public void outANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalInterfaceDeclaration(ANormalInterfaceDeclaration node)
    {
        inANormalInterfaceDeclaration(node);
        if(node.getInterfaceBody() != null)
        {
            node.getInterfaceBody().apply(this);
        }
        if(node.getExtendsInterfaces() != null)
        {
            node.getExtendsInterfaces().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInterface() != null)
        {
            node.getInterface().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outANormalInterfaceDeclaration(node);
    }

    public void inAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeDeclaration(AAnnotationTypeDeclaration node)
    {
        inAAnnotationTypeDeclaration(node);
        if(node.getAnnotationTypeBody() != null)
        {
            node.getAnnotationTypeBody().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInterface() != null)
        {
            node.getInterface().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAAnnotationTypeDeclaration(node);
    }

    public void inAOneElementValuePairs(AOneElementValuePairs node)
    {
        defaultIn(node);
    }

    public void outAOneElementValuePairs(AOneElementValuePairs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneElementValuePairs(AOneElementValuePairs node)
    {
        inAOneElementValuePairs(node);
        if(node.getElementValuePair() != null)
        {
            node.getElementValuePair().apply(this);
        }
        outAOneElementValuePairs(node);
    }

    public void inAManyElementValuePairs(AManyElementValuePairs node)
    {
        defaultIn(node);
    }

    public void outAManyElementValuePairs(AManyElementValuePairs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyElementValuePairs(AManyElementValuePairs node)
    {
        inAManyElementValuePairs(node);
        if(node.getElementValuePair() != null)
        {
            node.getElementValuePair().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getElementValuePairs() != null)
        {
            node.getElementValuePairs().apply(this);
        }
        outAManyElementValuePairs(node);
    }

    public void inAConditionalElementValue(AConditionalElementValue node)
    {
        defaultIn(node);
    }

    public void outAConditionalElementValue(AConditionalElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        inAConditionalElementValue(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        outAConditionalElementValue(node);
    }

    public void inAIdentifierElementValue(AIdentifierElementValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierElementValue(AIdentifierElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierElementValue(AIdentifierElementValue node)
    {
        inAIdentifierElementValue(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierElementValue(node);
    }

    public void inAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultIn(node);
    }

    public void outAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        inAAnnotationElementValue(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationElementValue(node);
    }

    public void inAArrayInitializerElementValue(AArrayInitializerElementValue node)
    {
        defaultIn(node);
    }

    public void outAArrayInitializerElementValue(AArrayInitializerElementValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitializerElementValue(AArrayInitializerElementValue node)
    {
        inAArrayInitializerElementValue(node);
        if(node.getElementValueArrayInitializer() != null)
        {
            node.getElementValueArrayInitializer().apply(this);
        }
        outAArrayInitializerElementValue(node);
    }

    public void inAGtTypeParameters(AGtTypeParameters node)
    {
        defaultIn(node);
    }

    public void outAGtTypeParameters(AGtTypeParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtTypeParameters(AGtTypeParameters node)
    {
        inAGtTypeParameters(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getTypeParameterList() != null)
        {
            node.getTypeParameterList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAGtTypeParameters(node);
    }

    public void inAShrTypeParameters(AShrTypeParameters node)
    {
        defaultIn(node);
    }

    public void outAShrTypeParameters(AShrTypeParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrTypeParameters(AShrTypeParameters node)
    {
        inAShrTypeParameters(node);
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getTypeParameterListShr() != null)
        {
            node.getTypeParameterListShr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAShrTypeParameters(node);
    }

    public void inAUshrTypeParameters(AUshrTypeParameters node)
    {
        defaultIn(node);
    }

    public void outAUshrTypeParameters(AUshrTypeParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrTypeParameters(AUshrTypeParameters node)
    {
        inAUshrTypeParameters(node);
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getTypeParameterListUshr() != null)
        {
            node.getTypeParameterListUshr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAUshrTypeParameters(node);
    }

    public void inASuper(ASuper node)
    {
        defaultIn(node);
    }

    public void outASuper(ASuper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuper(ASuper node)
    {
        inASuper(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outASuper(node);
    }

    public void inAInterfaces(AInterfaces node)
    {
        defaultIn(node);
    }

    public void outAInterfaces(AInterfaces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaces(AInterfaces node)
    {
        inAInterfaces(node);
        if(node.getInterfaceTypeList() != null)
        {
            node.getInterfaceTypeList().apply(this);
        }
        if(node.getImplements() != null)
        {
            node.getImplements().apply(this);
        }
        outAInterfaces(node);
    }

    public void inAClassBody(AClassBody node)
    {
        defaultIn(node);
    }

    public void outAClassBody(AClassBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        inAClassBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PClassBodyDeclaration> copy = new ArrayList<PClassBodyDeclaration>(node.getClassBodyDeclarations());
            Collections.reverse(copy);
            for(PClassBodyDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAClassBody(node);
    }

    public void inAEnumBody(AEnumBody node)
    {
        defaultIn(node);
    }

    public void outAEnumBody(AEnumBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumBody(AEnumBody node)
    {
        inAEnumBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getEnumBodyDeclarations() != null)
        {
            node.getEnumBodyDeclarations().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEnumConstants() != null)
        {
            node.getEnumConstants().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAEnumBody(node);
    }

    public void inAOneExtendsInterfaces(AOneExtendsInterfaces node)
    {
        defaultIn(node);
    }

    public void outAOneExtendsInterfaces(AOneExtendsInterfaces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneExtendsInterfaces(AOneExtendsInterfaces node)
    {
        inAOneExtendsInterfaces(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAOneExtendsInterfaces(node);
    }

    public void inAManyExtendsInterfaces(AManyExtendsInterfaces node)
    {
        defaultIn(node);
    }

    public void outAManyExtendsInterfaces(AManyExtendsInterfaces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyExtendsInterfaces(AManyExtendsInterfaces node)
    {
        inAManyExtendsInterfaces(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExtendsInterfaces() != null)
        {
            node.getExtendsInterfaces().apply(this);
        }
        outAManyExtendsInterfaces(node);
    }

    public void inAInterfaceBody(AInterfaceBody node)
    {
        defaultIn(node);
    }

    public void outAInterfaceBody(AInterfaceBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceBody(AInterfaceBody node)
    {
        inAInterfaceBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PInterfaceMemberDeclaration> copy = new ArrayList<PInterfaceMemberDeclaration>(node.getInterfaceMemberDeclarations());
            Collections.reverse(copy);
            for(PInterfaceMemberDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAInterfaceBody(node);
    }

    public void inAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultIn(node);
    }

    public void outAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationTypeBody(AAnnotationTypeBody node)
    {
        inAAnnotationTypeBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PAnnotationTypeElementDeclaration> copy = new ArrayList<PAnnotationTypeElementDeclaration>(node.getAnnotationTypeElementDeclarations());
            Collections.reverse(copy);
            for(PAnnotationTypeElementDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAAnnotationTypeBody(node);
    }

    public void inAElementValuePair(AElementValuePair node)
    {
        defaultIn(node);
    }

    public void outAElementValuePair(AElementValuePair node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementValuePair(AElementValuePair node)
    {
        inAElementValuePair(node);
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAElementValuePair(node);
    }

    public void inASimpleConditionalExpression(ASimpleConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleConditionalExpression(ASimpleConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConditionalExpression(ASimpleConditionalExpression node)
    {
        inASimpleConditionalExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outASimpleConditionalExpression(node);
    }

    public void inAQmarkOrExOrConditionalExpression(AQmarkOrExOrConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmarkOrExOrConditionalExpression(AQmarkOrExOrConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkOrExOrConditionalExpression(AQmarkOrExOrConditionalExpression node)
    {
        inAQmarkOrExOrConditionalExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAQmarkOrExOrConditionalExpression(node);
    }

    public void inAQmarkOrExIdConditionalExpression(AQmarkOrExIdConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmarkOrExIdConditionalExpression(AQmarkOrExIdConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkOrExIdConditionalExpression(AQmarkOrExIdConditionalExpression node)
    {
        inAQmarkOrExIdConditionalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAQmarkOrExIdConditionalExpression(node);
    }

    public void inAQmarkOrIdOrConditionalExpression(AQmarkOrIdOrConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmarkOrIdOrConditionalExpression(AQmarkOrIdOrConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmarkOrIdOrConditionalExpression(AQmarkOrIdOrConditionalExpression node)
    {
        inAQmarkOrIdOrConditionalExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAQmarkOrIdOrConditionalExpression(node);
    }

    public void inAQmakrOrIdIdConditionalExpression(AQmakrOrIdIdConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmakrOrIdIdConditionalExpression(AQmakrOrIdIdConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmakrOrIdIdConditionalExpression(AQmakrOrIdIdConditionalExpression node)
    {
        inAQmakrOrIdIdConditionalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAQmakrOrIdIdConditionalExpression(node);
    }

    public void inAQmakrIdExOrConditionalExpression(AQmakrIdExOrConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmakrIdExOrConditionalExpression(AQmakrIdExOrConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmakrIdExOrConditionalExpression(AQmakrIdExOrConditionalExpression node)
    {
        inAQmakrIdExOrConditionalExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAQmakrIdExOrConditionalExpression(node);
    }

    public void inAQmakrIdExIdConditionalExpression(AQmakrIdExIdConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmakrIdExIdConditionalExpression(AQmakrIdExIdConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmakrIdExIdConditionalExpression(AQmakrIdExIdConditionalExpression node)
    {
        inAQmakrIdExIdConditionalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAQmakrIdExIdConditionalExpression(node);
    }

    public void inAQmakrIdIdOrConditionalExpression(AQmakrIdIdOrConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmakrIdIdOrConditionalExpression(AQmakrIdIdOrConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmakrIdIdOrConditionalExpression(AQmakrIdIdOrConditionalExpression node)
    {
        inAQmakrIdIdOrConditionalExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAQmakrIdIdOrConditionalExpression(node);
    }

    public void inAQmakrIdIdIdConditionalExpression(AQmakrIdIdIdConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAQmakrIdIdIdConditionalExpression(AQmakrIdIdIdConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQmakrIdIdIdConditionalExpression(AQmakrIdIdIdConditionalExpression node)
    {
        inAQmakrIdIdIdConditionalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers3());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier3() != null)
        {
            node.getIdentifier3().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAQmakrIdIdIdConditionalExpression(node);
    }

    public void inAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        inAElementValueArrayInitializer(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getElementValues() != null)
        {
            node.getElementValues().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAElementValueArrayInitializer(node);
    }

    public void inAOneTypeParameterList(AOneTypeParameterList node)
    {
        defaultIn(node);
    }

    public void outAOneTypeParameterList(AOneTypeParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneTypeParameterList(AOneTypeParameterList node)
    {
        inAOneTypeParameterList(node);
        if(node.getTypeParameter() != null)
        {
            node.getTypeParameter().apply(this);
        }
        outAOneTypeParameterList(node);
    }

    public void inAManyTypeParameterList(AManyTypeParameterList node)
    {
        defaultIn(node);
    }

    public void outAManyTypeParameterList(AManyTypeParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyTypeParameterList(AManyTypeParameterList node)
    {
        inAManyTypeParameterList(node);
        if(node.getTypeParameter() != null)
        {
            node.getTypeParameter().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypeParameterList() != null)
        {
            node.getTypeParameterList().apply(this);
        }
        outAManyTypeParameterList(node);
    }

    public void inAOneTypeParameterListShr(AOneTypeParameterListShr node)
    {
        defaultIn(node);
    }

    public void outAOneTypeParameterListShr(AOneTypeParameterListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneTypeParameterListShr(AOneTypeParameterListShr node)
    {
        inAOneTypeParameterListShr(node);
        if(node.getTypeParameterShr() != null)
        {
            node.getTypeParameterShr().apply(this);
        }
        outAOneTypeParameterListShr(node);
    }

    public void inAManyTypeParameterListShr(AManyTypeParameterListShr node)
    {
        defaultIn(node);
    }

    public void outAManyTypeParameterListShr(AManyTypeParameterListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyTypeParameterListShr(AManyTypeParameterListShr node)
    {
        inAManyTypeParameterListShr(node);
        if(node.getTypeParameterShr() != null)
        {
            node.getTypeParameterShr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypeParameterList() != null)
        {
            node.getTypeParameterList().apply(this);
        }
        outAManyTypeParameterListShr(node);
    }

    public void inAOneTypeParameterListUshr(AOneTypeParameterListUshr node)
    {
        defaultIn(node);
    }

    public void outAOneTypeParameterListUshr(AOneTypeParameterListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneTypeParameterListUshr(AOneTypeParameterListUshr node)
    {
        inAOneTypeParameterListUshr(node);
        if(node.getTypeParameterUshr() != null)
        {
            node.getTypeParameterUshr().apply(this);
        }
        outAOneTypeParameterListUshr(node);
    }

    public void inAManyTypeParameterListUshr(AManyTypeParameterListUshr node)
    {
        defaultIn(node);
    }

    public void outAManyTypeParameterListUshr(AManyTypeParameterListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyTypeParameterListUshr(AManyTypeParameterListUshr node)
    {
        inAManyTypeParameterListUshr(node);
        if(node.getTypeParameterUshr() != null)
        {
            node.getTypeParameterUshr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypeParameterList() != null)
        {
            node.getTypeParameterList().apply(this);
        }
        outAManyTypeParameterListUshr(node);
    }

    public void inAOneInterfaceTypeList(AOneInterfaceTypeList node)
    {
        defaultIn(node);
    }

    public void outAOneInterfaceTypeList(AOneInterfaceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneInterfaceTypeList(AOneInterfaceTypeList node)
    {
        inAOneInterfaceTypeList(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOneInterfaceTypeList(node);
    }

    public void inAManyInterfaceTypeList(AManyInterfaceTypeList node)
    {
        defaultIn(node);
    }

    public void outAManyInterfaceTypeList(AManyInterfaceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyInterfaceTypeList(AManyInterfaceTypeList node)
    {
        inAManyInterfaceTypeList(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInterfaceTypeList() != null)
        {
            node.getInterfaceTypeList().apply(this);
        }
        outAManyInterfaceTypeList(node);
    }

    public void inAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberClassBodyDeclaration(AMemberClassBodyDeclaration node)
    {
        inAMemberClassBodyDeclaration(node);
        if(node.getClassMemberDeclaration() != null)
        {
            node.getClassMemberDeclaration().apply(this);
        }
        outAMemberClassBodyDeclaration(node);
    }

    public void inAInstanceInitializerClassBodyDeclaration(AInstanceInitializerClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInstanceInitializerClassBodyDeclaration(AInstanceInitializerClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceInitializerClassBodyDeclaration(AInstanceInitializerClassBodyDeclaration node)
    {
        inAInstanceInitializerClassBodyDeclaration(node);
        if(node.getInstanceInitializer() != null)
        {
            node.getInstanceInitializer().apply(this);
        }
        outAInstanceInitializerClassBodyDeclaration(node);
    }

    public void inAStaticInitializerClassBodyDeclaration(AStaticInitializerClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticInitializerClassBodyDeclaration(AStaticInitializerClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticInitializerClassBodyDeclaration(AStaticInitializerClassBodyDeclaration node)
    {
        inAStaticInitializerClassBodyDeclaration(node);
        if(node.getStaticInitializer() != null)
        {
            node.getStaticInitializer().apply(this);
        }
        outAStaticInitializerClassBodyDeclaration(node);
    }

    public void inAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorClassBodyDeclaration(AConstructorClassBodyDeclaration node)
    {
        inAConstructorClassBodyDeclaration(node);
        if(node.getConstructorDeclaration() != null)
        {
            node.getConstructorDeclaration().apply(this);
        }
        outAConstructorClassBodyDeclaration(node);
    }

    public void inAOneEnumConstants(AOneEnumConstants node)
    {
        defaultIn(node);
    }

    public void outAOneEnumConstants(AOneEnumConstants node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneEnumConstants(AOneEnumConstants node)
    {
        inAOneEnumConstants(node);
        if(node.getEnumConstant() != null)
        {
            node.getEnumConstant().apply(this);
        }
        outAOneEnumConstants(node);
    }

    public void inAManyEnumConstants(AManyEnumConstants node)
    {
        defaultIn(node);
    }

    public void outAManyEnumConstants(AManyEnumConstants node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyEnumConstants(AManyEnumConstants node)
    {
        inAManyEnumConstants(node);
        if(node.getEnumConstant() != null)
        {
            node.getEnumConstant().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEnumConstants() != null)
        {
            node.getEnumConstants().apply(this);
        }
        outAManyEnumConstants(node);
    }

    public void inAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        defaultIn(node);
    }

    public void outAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumBodyDeclarations(AEnumBodyDeclarations node)
    {
        inAEnumBodyDeclarations(node);
        {
            List<PClassBodyDeclaration> copy = new ArrayList<PClassBodyDeclaration>(node.getClassBodyDeclarations());
            Collections.reverse(copy);
            for(PClassBodyDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEnumBodyDeclarations(node);
    }

    public void inAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantInterfaceMemberDeclaration(AConstantInterfaceMemberDeclaration node)
    {
        inAConstantInterfaceMemberDeclaration(node);
        if(node.getConstantDeclaration() != null)
        {
            node.getConstantDeclaration().apply(this);
        }
        outAConstantInterfaceMemberDeclaration(node);
    }

    public void inAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInterfaceMemberDeclaration(AMethodInterfaceMemberDeclaration node)
    {
        inAMethodInterfaceMemberDeclaration(node);
        if(node.getAbstractMethodDeclaration() != null)
        {
            node.getAbstractMethodDeclaration().apply(this);
        }
        outAMethodInterfaceMemberDeclaration(node);
    }

    public void inAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInterfaceMemberDeclaration(AClassInterfaceMemberDeclaration node)
    {
        inAClassInterfaceMemberDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassInterfaceMemberDeclaration(node);
    }

    public void inAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceInterfaceMemberDeclaration(AInterfaceInterfaceMemberDeclaration node)
    {
        inAInterfaceInterfaceMemberDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceInterfaceMemberDeclaration(node);
    }

    public void inAEmptyInterfaceMemberDeclaration(AEmptyInterfaceMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEmptyInterfaceMemberDeclaration(AEmptyInterfaceMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyInterfaceMemberDeclaration(AEmptyInterfaceMemberDeclaration node)
    {
        inAEmptyInterfaceMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyInterfaceMemberDeclaration(node);
    }

    public void inAPrimitiveMethodAnnotationTypeElementDeclaration(APrimitiveMethodAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveMethodAnnotationTypeElementDeclaration(APrimitiveMethodAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveMethodAnnotationTypeElementDeclaration(APrimitiveMethodAnnotationTypeElementDeclaration node)
    {
        inAPrimitiveMethodAnnotationTypeElementDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDefaultValue() != null)
        {
            node.getDefaultValue().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveMethodAnnotationTypeElementDeclaration(node);
    }

    public void inAReferenceMethodAnnotationTypeElementDeclaration(AReferenceMethodAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReferenceMethodAnnotationTypeElementDeclaration(AReferenceMethodAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceMethodAnnotationTypeElementDeclaration(AReferenceMethodAnnotationTypeElementDeclaration node)
    {
        inAReferenceMethodAnnotationTypeElementDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDefaultValue() != null)
        {
            node.getDefaultValue().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceMethodAnnotationTypeElementDeclaration(node);
    }

    public void inAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantAnnotationTypeElementDeclaration(AConstantAnnotationTypeElementDeclaration node)
    {
        inAConstantAnnotationTypeElementDeclaration(node);
        if(node.getConstantDeclaration() != null)
        {
            node.getConstantDeclaration().apply(this);
        }
        outAConstantAnnotationTypeElementDeclaration(node);
    }

    public void inAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassAnnotationTypeElementDeclaration(AClassAnnotationTypeElementDeclaration node)
    {
        inAClassAnnotationTypeElementDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassAnnotationTypeElementDeclaration(node);
    }

    public void inAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceAnnotationTypeElementDeclaration(AInterfaceAnnotationTypeElementDeclaration node)
    {
        inAInterfaceAnnotationTypeElementDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceAnnotationTypeElementDeclaration(node);
    }

    public void inAEmptyAnnotationTypeElementDeclaration(AEmptyAnnotationTypeElementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEmptyAnnotationTypeElementDeclaration(AEmptyAnnotationTypeElementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyAnnotationTypeElementDeclaration(AEmptyAnnotationTypeElementDeclaration node)
    {
        inAEmptyAnnotationTypeElementDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyAnnotationTypeElementDeclaration(node);
    }

    public void inASimpleConditionalOrExpression(ASimpleConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleConditionalOrExpression(ASimpleConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConditionalOrExpression(ASimpleConditionalOrExpression node)
    {
        inASimpleConditionalOrExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outASimpleConditionalOrExpression(node);
    }

    public void inABarBarOrOrConditionalOrExpression(ABarBarOrOrConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarBarOrOrConditionalOrExpression(ABarBarOrOrConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarBarOrOrConditionalOrExpression(ABarBarOrOrConditionalOrExpression node)
    {
        inABarBarOrOrConditionalOrExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outABarBarOrOrConditionalOrExpression(node);
    }

    public void inABarBarOrIdConditionalOrExpression(ABarBarOrIdConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarBarOrIdConditionalOrExpression(ABarBarOrIdConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarBarOrIdConditionalOrExpression(ABarBarOrIdConditionalOrExpression node)
    {
        inABarBarOrIdConditionalOrExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outABarBarOrIdConditionalOrExpression(node);
    }

    public void inABarBarIdOrConditionalOrExpression(ABarBarIdOrConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarBarIdOrConditionalOrExpression(ABarBarIdOrConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarBarIdOrConditionalOrExpression(ABarBarIdOrConditionalOrExpression node)
    {
        inABarBarIdOrConditionalOrExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outABarBarIdOrConditionalOrExpression(node);
    }

    public void inABarBarIdIdConditionalOrExpression(ABarBarIdIdConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarBarIdIdConditionalOrExpression(ABarBarIdIdConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarBarIdIdConditionalOrExpression(ABarBarIdIdConditionalOrExpression node)
    {
        inABarBarIdIdConditionalOrExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outABarBarIdIdConditionalOrExpression(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        outAExpression(node);
    }

    public void inAOneElementValues(AOneElementValues node)
    {
        defaultIn(node);
    }

    public void outAOneElementValues(AOneElementValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneElementValues(AOneElementValues node)
    {
        inAOneElementValues(node);
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        outAOneElementValues(node);
    }

    public void inAManyElementValues(AManyElementValues node)
    {
        defaultIn(node);
    }

    public void outAManyElementValues(AManyElementValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyElementValues(AManyElementValues node)
    {
        inAManyElementValues(node);
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getElementValues() != null)
        {
            node.getElementValues().apply(this);
        }
        outAManyElementValues(node);
    }

    public void inATypeParameter(ATypeParameter node)
    {
        defaultIn(node);
    }

    public void outATypeParameter(ATypeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameter(ATypeParameter node)
    {
        inATypeParameter(node);
        if(node.getTypeBound() != null)
        {
            node.getTypeBound().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeParameter(node);
    }

    public void inATypeParameterShr(ATypeParameterShr node)
    {
        defaultIn(node);
    }

    public void outATypeParameterShr(ATypeParameterShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameterShr(ATypeParameterShr node)
    {
        inATypeParameterShr(node);
        if(node.getTypeBoundShr() != null)
        {
            node.getTypeBoundShr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeParameterShr(node);
    }

    public void inATypeParameterUshr(ATypeParameterUshr node)
    {
        defaultIn(node);
    }

    public void outATypeParameterUshr(ATypeParameterUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParameterUshr(ATypeParameterUshr node)
    {
        inATypeParameterUshr(node);
        if(node.getTypeBoundUshr() != null)
        {
            node.getTypeBoundUshr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeParameterUshr(node);
    }

    public void inAGtTypeArguments(AGtTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAGtTypeArguments(AGtTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        inAGtTypeArguments(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAGtTypeArguments(node);
    }

    public void inAShrTypeArguments(AShrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAShrTypeArguments(AShrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        inAShrTypeArguments(node);
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getActualTypeArgumentListShr() != null)
        {
            node.getActualTypeArgumentListShr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAShrTypeArguments(node);
    }

    public void inAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        inAUshrTypeArguments(node);
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getActualTypeArgumentListUshr() != null)
        {
            node.getActualTypeArgumentListUshr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAUshrTypeArguments(node);
    }

    public void inATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        inATypeArgumentsShrNoGt(node);
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outATypeArgumentsShrNoGt(node);
    }

    public void inATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        inATypeArgumentsUshrNoGtGt(node);
        if(node.getActualTypeArgumentListUshrNoGt() != null)
        {
            node.getActualTypeArgumentListUshrNoGt().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outATypeArgumentsUshrNoGtGt(node);
    }

    public void inATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        inATypeArgumentsUshrNoGt(node);
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outATypeArgumentsUshrNoGt(node);
    }

    public void inAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldClassMemberDeclaration(AFieldClassMemberDeclaration node)
    {
        inAFieldClassMemberDeclaration(node);
        if(node.getFieldDeclaration() != null)
        {
            node.getFieldDeclaration().apply(this);
        }
        outAFieldClassMemberDeclaration(node);
    }

    public void inAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodClassMemberDeclaration(AMethodClassMemberDeclaration node)
    {
        inAMethodClassMemberDeclaration(node);
        if(node.getMethodDeclaration() != null)
        {
            node.getMethodDeclaration().apply(this);
        }
        outAMethodClassMemberDeclaration(node);
    }

    public void inAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassClassMemberDeclaration(AClassClassMemberDeclaration node)
    {
        inAClassClassMemberDeclaration(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassClassMemberDeclaration(node);
    }

    public void inAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceClassMemberDeclaration(AInterfaceClassMemberDeclaration node)
    {
        inAInterfaceClassMemberDeclaration(node);
        if(node.getInterfaceDeclaration() != null)
        {
            node.getInterfaceDeclaration().apply(this);
        }
        outAInterfaceClassMemberDeclaration(node);
    }

    public void inAEmptyClassMemberDeclaration(AEmptyClassMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEmptyClassMemberDeclaration(AEmptyClassMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyClassMemberDeclaration(AEmptyClassMemberDeclaration node)
    {
        inAEmptyClassMemberDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyClassMemberDeclaration(node);
    }

    public void inAInstanceInitializer(AInstanceInitializer node)
    {
        defaultIn(node);
    }

    public void outAInstanceInitializer(AInstanceInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        inAInstanceInitializer(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAInstanceInitializer(node);
    }

    public void inAStaticInitializer(AStaticInitializer node)
    {
        defaultIn(node);
    }

    public void outAStaticInitializer(AStaticInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticInitializer(AStaticInitializer node)
    {
        inAStaticInitializer(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        outAStaticInitializer(node);
    }

    public void inAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultIn(node);
    }

    public void outAConstructorDeclaration(AConstructorDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorDeclaration(AConstructorDeclaration node)
    {
        inAConstructorDeclaration(node);
        if(node.getConstructorBody() != null)
        {
            node.getConstructorBody().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getConstructorDeclarator() != null)
        {
            node.getConstructorDeclarator().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAConstructorDeclaration(node);
    }

    public void inAEnumConstant(AEnumConstant node)
    {
        defaultIn(node);
    }

    public void outAEnumConstant(AEnumConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumConstant(AEnumConstant node)
    {
        inAEnumConstant(node);
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAEnumConstant(node);
    }

    public void inAPrimitiveConstantDeclaration(APrimitiveConstantDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveConstantDeclaration(APrimitiveConstantDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveConstantDeclaration(APrimitiveConstantDeclaration node)
    {
        inAPrimitiveConstantDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveConstantDeclaration(node);
    }

    public void inAReferenceConstantDeclaration(AReferenceConstantDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReferenceConstantDeclaration(AReferenceConstantDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceConstantDeclaration(AReferenceConstantDeclaration node)
    {
        inAReferenceConstantDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceConstantDeclaration(node);
    }

    public void inAPrimitiveAbstractMethodDeclaration(APrimitiveAbstractMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveAbstractMethodDeclaration(APrimitiveAbstractMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveAbstractMethodDeclaration(APrimitiveAbstractMethodDeclaration node)
    {
        inAPrimitiveAbstractMethodDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveAbstractMethodDeclaration(node);
    }

    public void inAReferenceAbstractMethodDeclaration(AReferenceAbstractMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReferenceAbstractMethodDeclaration(AReferenceAbstractMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceAbstractMethodDeclaration(AReferenceAbstractMethodDeclaration node)
    {
        inAReferenceAbstractMethodDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceAbstractMethodDeclaration(node);
    }

    public void inAVoidAbstractMethodDeclaration(AVoidAbstractMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVoidAbstractMethodDeclaration(AVoidAbstractMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidAbstractMethodDeclaration(AVoidAbstractMethodDeclaration node)
    {
        inAVoidAbstractMethodDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAVoidAbstractMethodDeclaration(node);
    }

    public void inADefaultValue(ADefaultValue node)
    {
        defaultIn(node);
    }

    public void outADefaultValue(ADefaultValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultValue(ADefaultValue node)
    {
        inADefaultValue(node);
        if(node.getElementValue() != null)
        {
            node.getElementValue().apply(this);
        }
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        outADefaultValue(node);
    }

    public void inASimpleConditionalAndExpression(ASimpleConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleConditionalAndExpression(ASimpleConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConditionalAndExpression(ASimpleConditionalAndExpression node)
    {
        inASimpleConditionalAndExpression(node);
        if(node.getInclusiveOrExpression() != null)
        {
            node.getInclusiveOrExpression().apply(this);
        }
        outASimpleConditionalAndExpression(node);
    }

    public void inAAmpAmpAnOrConditionalAndExpression(AAmpAmpAnOrConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpAmpAnOrConditionalAndExpression(AAmpAmpAnOrConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAmpAnOrConditionalAndExpression(AAmpAmpAnOrConditionalAndExpression node)
    {
        inAAmpAmpAnOrConditionalAndExpression(node);
        if(node.getInclusiveOrExpression() != null)
        {
            node.getInclusiveOrExpression().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outAAmpAmpAnOrConditionalAndExpression(node);
    }

    public void inAAmpAmpAnIdConditionalAndExpression(AAmpAmpAnIdConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpAmpAnIdConditionalAndExpression(AAmpAmpAnIdConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAmpAnIdConditionalAndExpression(AAmpAmpAnIdConditionalAndExpression node)
    {
        inAAmpAmpAnIdConditionalAndExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outAAmpAmpAnIdConditionalAndExpression(node);
    }

    public void inAAmpAmpIdOrConditionalAndExpression(AAmpAmpIdOrConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpAmpIdOrConditionalAndExpression(AAmpAmpIdOrConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAmpIdOrConditionalAndExpression(AAmpAmpIdOrConditionalAndExpression node)
    {
        inAAmpAmpIdOrConditionalAndExpression(node);
        if(node.getInclusiveOrExpression() != null)
        {
            node.getInclusiveOrExpression().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAmpAmpIdOrConditionalAndExpression(node);
    }

    public void inAAmpAmpIdIdConditionalAndExpression(AAmpAmpIdIdConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpAmpIdIdConditionalAndExpression(AAmpAmpIdIdConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAmpIdIdConditionalAndExpression(AAmpAmpIdIdConditionalAndExpression node)
    {
        inAAmpAmpIdIdConditionalAndExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAAmpAmpIdIdConditionalAndExpression(node);
    }

    public void inAConditionalAssignmentExpression(AConditionalAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAConditionalAssignmentExpression(AConditionalAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalAssignmentExpression(AConditionalAssignmentExpression node)
    {
        inAConditionalAssignmentExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        outAConditionalAssignmentExpression(node);
    }

    public void inAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        inAAssignmentAssignmentExpression(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentAssignmentExpression(node);
    }

    public void inAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        inAMjOutsideIncludedAssignmentExpression(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOutsideIncludedAssignmentExpression(node);
    }

    public void inATypeBound(ATypeBound node)
    {
        defaultIn(node);
    }

    public void outATypeBound(ATypeBound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeBound(ATypeBound node)
    {
        inATypeBound(node);
        {
            List<PAdditionalBound> copy = new ArrayList<PAdditionalBound>(node.getAdditionalBounds());
            Collections.reverse(copy);
            for(PAdditionalBound e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outATypeBound(node);
    }

    public void inAArgumentTypeBoundShr(AArgumentTypeBoundShr node)
    {
        defaultIn(node);
    }

    public void outAArgumentTypeBoundShr(AArgumentTypeBoundShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentTypeBoundShr(AArgumentTypeBoundShr node)
    {
        inAArgumentTypeBoundShr(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAArgumentTypeBoundShr(node);
    }

    public void inABoundTypeBoundShr(ABoundTypeBoundShr node)
    {
        defaultIn(node);
    }

    public void outABoundTypeBoundShr(ABoundTypeBoundShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoundTypeBoundShr(ABoundTypeBoundShr node)
    {
        inABoundTypeBoundShr(node);
        if(node.getAdditionalBoundShrNoGt() != null)
        {
            node.getAdditionalBoundShrNoGt().apply(this);
        }
        {
            List<PAdditionalBound> copy = new ArrayList<PAdditionalBound>(node.getAdditionalBounds());
            Collections.reverse(copy);
            for(PAdditionalBound e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outABoundTypeBoundShr(node);
    }

    public void inAArgumentTypeBoundUshr(AArgumentTypeBoundUshr node)
    {
        defaultIn(node);
    }

    public void outAArgumentTypeBoundUshr(AArgumentTypeBoundUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentTypeBoundUshr(AArgumentTypeBoundUshr node)
    {
        inAArgumentTypeBoundUshr(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAArgumentTypeBoundUshr(node);
    }

    public void inABoundTypeBoundUshr(ABoundTypeBoundUshr node)
    {
        defaultIn(node);
    }

    public void outABoundTypeBoundUshr(ABoundTypeBoundUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoundTypeBoundUshr(ABoundTypeBoundUshr node)
    {
        inABoundTypeBoundUshr(node);
        if(node.getAdditionalBoundUshrNoGtGt() != null)
        {
            node.getAdditionalBoundUshrNoGtGt().apply(this);
        }
        {
            List<PAdditionalBound> copy = new ArrayList<PAdditionalBound>(node.getAdditionalBounds());
            Collections.reverse(copy);
            for(PAdditionalBound e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outABoundTypeBoundUshr(node);
    }

    public void inATypeComponent(ATypeComponent node)
    {
        defaultIn(node);
    }

    public void outATypeComponent(ATypeComponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeComponent(ATypeComponent node)
    {
        inATypeComponent(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        outATypeComponent(node);
    }

    public void inAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        inAOneActualTypeArgumentList(node);
        if(node.getActualTypeArgument() != null)
        {
            node.getActualTypeArgument().apply(this);
        }
        outAOneActualTypeArgumentList(node);
    }

    public void inAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        inAManyActualTypeArgumentList(node);
        if(node.getActualTypeArgument() != null)
        {
            node.getActualTypeArgument().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        outAManyActualTypeArgumentList(node);
    }

    public void inAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        inAOneActualTypeArgumentListShr(node);
        if(node.getActualTypeArgumentShr() != null)
        {
            node.getActualTypeArgumentShr().apply(this);
        }
        outAOneActualTypeArgumentListShr(node);
    }

    public void inAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        inAManyActualTypeArgumentListShr(node);
        if(node.getActualTypeArgumentShr() != null)
        {
            node.getActualTypeArgumentShr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        outAManyActualTypeArgumentListShr(node);
    }

    public void inAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        inAOneActualTypeArgumentListUshr(node);
        if(node.getActualTypeArgumentUshr() != null)
        {
            node.getActualTypeArgumentUshr().apply(this);
        }
        outAOneActualTypeArgumentListUshr(node);
    }

    public void inAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        inAManyActualTypeArgumentListUshr(node);
        if(node.getActualTypeArgumentUshr() != null)
        {
            node.getActualTypeArgumentUshr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        outAManyActualTypeArgumentListUshr(node);
    }

    public void inAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        inAOneActualTypeArgumentListUshrNoGt(node);
        if(node.getActualTypeArgumentUshrNoGt() != null)
        {
            node.getActualTypeArgumentUshrNoGt().apply(this);
        }
        outAOneActualTypeArgumentListUshrNoGt(node);
    }

    public void inAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        inAManyActualTypeArgumentListUshrNoGt(node);
        if(node.getActualTypeArgumentUshrNoGt() != null)
        {
            node.getActualTypeArgumentUshrNoGt().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        outAManyActualTypeArgumentListUshrNoGt(node);
    }

    public void inAPrimitiveFieldDeclaration(APrimitiveFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveFieldDeclaration(APrimitiveFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveFieldDeclaration(APrimitiveFieldDeclaration node)
    {
        inAPrimitiveFieldDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveFieldDeclaration(node);
    }

    public void inAReferenceFieldDeclaration(AReferenceFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReferenceFieldDeclaration(AReferenceFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceFieldDeclaration(AReferenceFieldDeclaration node)
    {
        inAReferenceFieldDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceFieldDeclaration(node);
    }

    public void inAMjDescVarFieldDeclaration(AMjDescVarFieldDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjDescVarFieldDeclaration(AMjDescVarFieldDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescVarFieldDeclaration(AMjDescVarFieldDeclaration node)
    {
        inAMjDescVarFieldDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        outAMjDescVarFieldDeclaration(node);
    }

    public void inAMethodDeclaration(AMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclaration(AMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        inAMethodDeclaration(node);
        if(node.getMethodBody() != null)
        {
            node.getMethodBody().apply(this);
        }
        if(node.getMethodHeader() != null)
        {
            node.getMethodHeader().apply(this);
        }
        outAMethodDeclaration(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatements());
            Collections.reverse(copy);
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outABlock(node);
    }

    public void inAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultIn(node);
    }

    public void outAConstructorDeclarator(AConstructorDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorDeclarator(AConstructorDeclarator node)
    {
        inAConstructorDeclarator(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        outAConstructorDeclarator(node);
    }

    public void inAThrows(AThrows node)
    {
        defaultIn(node);
    }

    public void outAThrows(AThrows node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrows(AThrows node)
    {
        inAThrows(node);
        if(node.getExceptionTypeList() != null)
        {
            node.getExceptionTypeList().apply(this);
        }
        if(node.getThrowsToken() != null)
        {
            node.getThrowsToken().apply(this);
        }
        outAThrows(node);
    }

    public void inAConstructorBody(AConstructorBody node)
    {
        defaultIn(node);
    }

    public void outAConstructorBody(AConstructorBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorBody(AConstructorBody node)
    {
        inAConstructorBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatements());
            Collections.reverse(copy);
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExplicitConstructorInvocation() != null)
        {
            node.getExplicitConstructorInvocation().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAConstructorBody(node);
    }

    public void inAArguments(AArguments node)
    {
        defaultIn(node);
    }

    public void outAArguments(AArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        inAArguments(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAArguments(node);
    }

    public void inAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        defaultIn(node);
    }

    public void outAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        inAOneVariableDeclarators(node);
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        outAOneVariableDeclarators(node);
    }

    public void inAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        defaultIn(node);
    }

    public void outAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        inAManyVariableDeclarators(node);
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        outAManyVariableDeclarators(node);
    }

    public void inAMethodDeclarator(AMethodDeclarator node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclarator(AMethodDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclarator(AMethodDeclarator node)
    {
        inAMethodDeclarator(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMethodDeclarator(node);
    }

    public void inANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        inANumericPrimitiveType(node);
        if(node.getNumericType() != null)
        {
            node.getNumericType().apply(this);
        }
        outANumericPrimitiveType(node);
    }

    public void inABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        inABooleanPrimitiveType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanPrimitiveType(node);
    }

    public void inAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        inAMjMatrixTypesPrimitiveType(node);
        if(node.getMpMatrixTypes() != null)
        {
            node.getMpMatrixTypes().apply(this);
        }
        outAMjMatrixTypesPrimitiveType(node);
    }

    public void inASimpleInclusiveOrExpression(ASimpleInclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleInclusiveOrExpression(ASimpleInclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleInclusiveOrExpression(ASimpleInclusiveOrExpression node)
    {
        inASimpleInclusiveOrExpression(node);
        if(node.getExclusiveOrExpression() != null)
        {
            node.getExclusiveOrExpression().apply(this);
        }
        outASimpleInclusiveOrExpression(node);
    }

    public void inABarOrOrInclusiveOrExpression(ABarOrOrInclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarOrOrInclusiveOrExpression(ABarOrOrInclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarOrOrInclusiveOrExpression(ABarOrOrInclusiveOrExpression node)
    {
        inABarOrOrInclusiveOrExpression(node);
        if(node.getExclusiveOrExpression() != null)
        {
            node.getExclusiveOrExpression().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getInclusiveOrExpression() != null)
        {
            node.getInclusiveOrExpression().apply(this);
        }
        outABarOrOrInclusiveOrExpression(node);
    }

    public void inABarOrIdInclusiveOrExpression(ABarOrIdInclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarOrIdInclusiveOrExpression(ABarOrIdInclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarOrIdInclusiveOrExpression(ABarOrIdInclusiveOrExpression node)
    {
        inABarOrIdInclusiveOrExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getInclusiveOrExpression() != null)
        {
            node.getInclusiveOrExpression().apply(this);
        }
        outABarOrIdInclusiveOrExpression(node);
    }

    public void inABarIdOrInclusiveOrExpression(ABarIdOrInclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarIdOrInclusiveOrExpression(ABarIdOrInclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarIdOrInclusiveOrExpression(ABarIdOrInclusiveOrExpression node)
    {
        inABarIdOrInclusiveOrExpression(node);
        if(node.getExclusiveOrExpression() != null)
        {
            node.getExclusiveOrExpression().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outABarIdOrInclusiveOrExpression(node);
    }

    public void inABarIdIdInclusiveOrExpression(ABarIdIdInclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outABarIdIdInclusiveOrExpression(ABarIdIdInclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarIdIdInclusiveOrExpression(ABarIdIdInclusiveOrExpression node)
    {
        inABarIdIdInclusiveOrExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outABarIdIdInclusiveOrExpression(node);
    }

    public void inAExpressionAssignment(AExpressionAssignment node)
    {
        defaultIn(node);
    }

    public void outAExpressionAssignment(AExpressionAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionAssignment(AExpressionAssignment node)
    {
        inAExpressionAssignment(node);
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        if(node.getAssignmentOperator() != null)
        {
            node.getAssignmentOperator().apply(this);
        }
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        outAExpressionAssignment(node);
    }

    public void inAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultIn(node);
    }

    public void outAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierAssignment(AIdentifierAssignment node)
    {
        inAIdentifierAssignment(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignmentOperator() != null)
        {
            node.getAssignmentOperator().apply(this);
        }
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        outAIdentifierAssignment(node);
    }

    public void inAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        inAMjOutsideIncludedAssignment(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        if(node.getAssignmentOperator() != null)
        {
            node.getAssignmentOperator().apply(this);
        }
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        outAMjOutsideIncludedAssignment(node);
    }

    public void inAAdditionalBound(AAdditionalBound node)
    {
        defaultIn(node);
    }

    public void outAAdditionalBound(AAdditionalBound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalBound(AAdditionalBound node)
    {
        inAAdditionalBound(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        outAAdditionalBound(node);
    }

    public void inAAdditionalBoundShrNoGt(AAdditionalBoundShrNoGt node)
    {
        defaultIn(node);
    }

    public void outAAdditionalBoundShrNoGt(AAdditionalBoundShrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalBoundShrNoGt(AAdditionalBoundShrNoGt node)
    {
        inAAdditionalBoundShrNoGt(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        outAAdditionalBoundShrNoGt(node);
    }

    public void inAAdditionalBoundUshrNoGtGt(AAdditionalBoundUshrNoGtGt node)
    {
        defaultIn(node);
    }

    public void outAAdditionalBoundUshrNoGtGt(AAdditionalBoundUshrNoGtGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalBoundUshrNoGtGt(AAdditionalBoundUshrNoGtGt node)
    {
        inAAdditionalBoundUshrNoGtGt(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        outAAdditionalBoundUshrNoGtGt(node);
    }

    public void inAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        inAPrimitiveActualTypeArgument(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAPrimitiveActualTypeArgument(node);
    }

    public void inAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        inAReferenceActualTypeArgument(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferenceActualTypeArgument(node);
    }

    public void inAWildcardActualTypeArgument(AWildcardActualTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAWildcardActualTypeArgument(AWildcardActualTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardActualTypeArgument(AWildcardActualTypeArgument node)
    {
        inAWildcardActualTypeArgument(node);
        if(node.getWildcard() != null)
        {
            node.getWildcard().apply(this);
        }
        outAWildcardActualTypeArgument(node);
    }

    public void inAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        inAReferenceActualTypeArgumentShr(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferenceActualTypeArgumentShr(node);
    }

    public void inAWildcardActualTypeArgumentShr(AWildcardActualTypeArgumentShr node)
    {
        defaultIn(node);
    }

    public void outAWildcardActualTypeArgumentShr(AWildcardActualTypeArgumentShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardActualTypeArgumentShr(AWildcardActualTypeArgumentShr node)
    {
        inAWildcardActualTypeArgumentShr(node);
        if(node.getWildcardShr() != null)
        {
            node.getWildcardShr().apply(this);
        }
        outAWildcardActualTypeArgumentShr(node);
    }

    public void inAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        inAReferenceActualTypeArgumentUshr(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferenceActualTypeArgumentUshr(node);
    }

    public void inAWildcardActualTypeArgumentUshr(AWildcardActualTypeArgumentUshr node)
    {
        defaultIn(node);
    }

    public void outAWildcardActualTypeArgumentUshr(AWildcardActualTypeArgumentUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardActualTypeArgumentUshr(AWildcardActualTypeArgumentUshr node)
    {
        inAWildcardActualTypeArgumentUshr(node);
        if(node.getWildcardUshr() != null)
        {
            node.getWildcardUshr().apply(this);
        }
        outAWildcardActualTypeArgumentUshr(node);
    }

    public void inAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        inAReferenceActualTypeArgumentUshrNoGt(node);
        if(node.getTypeArgumentsUshrNoGt() != null)
        {
            node.getTypeArgumentsUshrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferenceActualTypeArgumentUshrNoGt(node);
    }

    public void inAWildcardActualTypeArgumentUshrNoGt(AWildcardActualTypeArgumentUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAWildcardActualTypeArgumentUshrNoGt(AWildcardActualTypeArgumentUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardActualTypeArgumentUshrNoGt(AWildcardActualTypeArgumentUshrNoGt node)
    {
        inAWildcardActualTypeArgumentUshrNoGt(node);
        if(node.getWildcardUshrNoGt() != null)
        {
            node.getWildcardUshrNoGt().apply(this);
        }
        outAWildcardActualTypeArgumentUshrNoGt(node);
    }

    public void inAPrimitiveMethodHeader(APrimitiveMethodHeader node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveMethodHeader(APrimitiveMethodHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveMethodHeader(APrimitiveMethodHeader node)
    {
        inAPrimitiveMethodHeader(node);
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveMethodHeader(node);
    }

    public void inAReferenceMethodHeader(AReferenceMethodHeader node)
    {
        defaultIn(node);
    }

    public void outAReferenceMethodHeader(AReferenceMethodHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceMethodHeader(AReferenceMethodHeader node)
    {
        inAReferenceMethodHeader(node);
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceMethodHeader(node);
    }

    public void inAVoidMethodHeader(AVoidMethodHeader node)
    {
        defaultIn(node);
    }

    public void outAVoidMethodHeader(AVoidMethodHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidMethodHeader(AVoidMethodHeader node)
    {
        inAVoidMethodHeader(node);
        if(node.getThrows() != null)
        {
            node.getThrows().apply(this);
        }
        if(node.getMethodDeclarator() != null)
        {
            node.getMethodDeclarator().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getTypeParameters() != null)
        {
            node.getTypeParameters().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAVoidMethodHeader(node);
    }

    public void inABlockMethodBody(ABlockMethodBody node)
    {
        defaultIn(node);
    }

    public void outABlockMethodBody(ABlockMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockMethodBody(ABlockMethodBody node)
    {
        inABlockMethodBody(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockMethodBody(node);
    }

    public void inAEmptyMethodBody(AEmptyMethodBody node)
    {
        defaultIn(node);
    }

    public void outAEmptyMethodBody(AEmptyMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyMethodBody(AEmptyMethodBody node)
    {
        inAEmptyMethodBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyMethodBody(node);
    }

    public void inAVariableDeclarationBlockStatement(AVariableDeclarationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationBlockStatement(AVariableDeclarationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationBlockStatement(AVariableDeclarationBlockStatement node)
    {
        inAVariableDeclarationBlockStatement(node);
        if(node.getLocalVariableDeclarationStatement() != null)
        {
            node.getLocalVariableDeclarationStatement().apply(this);
        }
        outAVariableDeclarationBlockStatement(node);
    }

    public void inAClassDeclarationBlockStatement(AClassDeclarationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAClassDeclarationBlockStatement(AClassDeclarationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDeclarationBlockStatement(AClassDeclarationBlockStatement node)
    {
        inAClassDeclarationBlockStatement(node);
        if(node.getClassDeclaration() != null)
        {
            node.getClassDeclaration().apply(this);
        }
        outAClassDeclarationBlockStatement(node);
    }

    public void inAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        inAStatementBlockStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementBlockStatement(node);
    }

    public void inAOneFormalParameterList(AOneFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAOneFormalParameterList(AOneFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneFormalParameterList(AOneFormalParameterList node)
    {
        inAOneFormalParameterList(node);
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAOneFormalParameterList(node);
    }

    public void inAManyFormalParameterList(AManyFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAManyFormalParameterList(AManyFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyFormalParameterList(AManyFormalParameterList node)
    {
        inAManyFormalParameterList(node);
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormalParameters() != null)
        {
            node.getFormalParameters().apply(this);
        }
        outAManyFormalParameterList(node);
    }

    public void inAOneExceptionTypeList(AOneExceptionTypeList node)
    {
        defaultIn(node);
    }

    public void outAOneExceptionTypeList(AOneExceptionTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneExceptionTypeList(AOneExceptionTypeList node)
    {
        inAOneExceptionTypeList(node);
        if(node.getExceptionType() != null)
        {
            node.getExceptionType().apply(this);
        }
        outAOneExceptionTypeList(node);
    }

    public void inAManyExceptionTypeList(AManyExceptionTypeList node)
    {
        defaultIn(node);
    }

    public void outAManyExceptionTypeList(AManyExceptionTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyExceptionTypeList(AManyExceptionTypeList node)
    {
        inAManyExceptionTypeList(node);
        if(node.getExceptionType() != null)
        {
            node.getExceptionType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExceptionTypeList() != null)
        {
            node.getExceptionTypeList().apply(this);
        }
        outAManyExceptionTypeList(node);
    }

    public void inAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExplicitConstructorInvocation(AThisExplicitConstructorInvocation node)
    {
        inAThisExplicitConstructorInvocation(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        outAThisExplicitConstructorInvocation(node);
    }

    public void inASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperExplicitConstructorInvocation(ASuperExplicitConstructorInvocation node)
    {
        inASuperExplicitConstructorInvocation(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        outASuperExplicitConstructorInvocation(node);
    }

    public void inAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryExplicitConstructorInvocation(APrimaryExplicitConstructorInvocation node)
    {
        inAPrimaryExplicitConstructorInvocation(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryExplicitConstructorInvocation(node);
    }

    public void inAIdentifierExplicitConstructorInvocation(AIdentifierExplicitConstructorInvocation node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExplicitConstructorInvocation(AIdentifierExplicitConstructorInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExplicitConstructorInvocation(AIdentifierExplicitConstructorInvocation node)
    {
        inAIdentifierExplicitConstructorInvocation(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExplicitConstructorInvocation(node);
    }

    public void inAOneExArgumentList(AOneExArgumentList node)
    {
        defaultIn(node);
    }

    public void outAOneExArgumentList(AOneExArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneExArgumentList(AOneExArgumentList node)
    {
        inAOneExArgumentList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOneExArgumentList(node);
    }

    public void inAOneIdArgumentList(AOneIdArgumentList node)
    {
        defaultIn(node);
    }

    public void outAOneIdArgumentList(AOneIdArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneIdArgumentList(AOneIdArgumentList node)
    {
        inAOneIdArgumentList(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOneIdArgumentList(node);
    }

    public void inAManyExArgumentList(AManyExArgumentList node)
    {
        defaultIn(node);
    }

    public void outAManyExArgumentList(AManyExArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyExArgumentList(AManyExArgumentList node)
    {
        inAManyExArgumentList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        outAManyExArgumentList(node);
    }

    public void inAManyIdArgumentList(AManyIdArgumentList node)
    {
        defaultIn(node);
    }

    public void outAManyIdArgumentList(AManyIdArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyIdArgumentList(AManyIdArgumentList node)
    {
        inAManyIdArgumentList(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        outAManyIdArgumentList(node);
    }

    public void inAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        defaultIn(node);
    }

    public void outAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        inAMjOneOutsideIncludedArgumentList(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOneOutsideIncludedArgumentList(node);
    }

    public void inAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        defaultIn(node);
    }

    public void outAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        inAMjManyOutsideIncludedArgumentList(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        outAMjManyOutsideIncludedArgumentList(node);
    }

    public void inASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        inASimpleVariableDeclarator(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleVariableDeclarator(node);
    }

    public void inAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        inAInitializerVariableDeclarator(node);
        if(node.getVariableInitializer() != null)
        {
            node.getVariableInitializer().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAInitializerVariableDeclarator(node);
    }

    public void inAIntegralNumericType(AIntegralNumericType node)
    {
        defaultIn(node);
    }

    public void outAIntegralNumericType(AIntegralNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        inAIntegralNumericType(node);
        if(node.getIntegralType() != null)
        {
            node.getIntegralType().apply(this);
        }
        outAIntegralNumericType(node);
    }

    public void inAFloatingNumericType(AFloatingNumericType node)
    {
        defaultIn(node);
    }

    public void outAFloatingNumericType(AFloatingNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        inAFloatingNumericType(node);
        if(node.getFloatingPointType() != null)
        {
            node.getFloatingPointType().apply(this);
        }
        outAFloatingNumericType(node);
    }

    public void inASimpleExclusiveOrExpression(ASimpleExclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleExclusiveOrExpression(ASimpleExclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExclusiveOrExpression(ASimpleExclusiveOrExpression node)
    {
        inASimpleExclusiveOrExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outASimpleExclusiveOrExpression(node);
    }

    public void inACaretOrAnExclusiveOrExpression(ACaretOrAnExclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outACaretOrAnExclusiveOrExpression(ACaretOrAnExclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretOrAnExclusiveOrExpression(ACaretOrAnExclusiveOrExpression node)
    {
        inACaretOrAnExclusiveOrExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getExclusiveOrExpression() != null)
        {
            node.getExclusiveOrExpression().apply(this);
        }
        outACaretOrAnExclusiveOrExpression(node);
    }

    public void inACaretOrIdExclusiveOrExpression(ACaretOrIdExclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outACaretOrIdExclusiveOrExpression(ACaretOrIdExclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretOrIdExclusiveOrExpression(ACaretOrIdExclusiveOrExpression node)
    {
        inACaretOrIdExclusiveOrExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getExclusiveOrExpression() != null)
        {
            node.getExclusiveOrExpression().apply(this);
        }
        outACaretOrIdExclusiveOrExpression(node);
    }

    public void inACaretIdAnExclusiveOrExpression(ACaretIdAnExclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outACaretIdAnExclusiveOrExpression(ACaretIdAnExclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretIdAnExclusiveOrExpression(ACaretIdAnExclusiveOrExpression node)
    {
        inACaretIdAnExclusiveOrExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACaretIdAnExclusiveOrExpression(node);
    }

    public void inACaretIdIdExclusiveOrExpression(ACaretIdIdExclusiveOrExpression node)
    {
        defaultIn(node);
    }

    public void outACaretIdIdExclusiveOrExpression(ACaretIdIdExclusiveOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretIdIdExclusiveOrExpression(ACaretIdIdExclusiveOrExpression node)
    {
        inACaretIdIdExclusiveOrExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outACaretIdIdExclusiveOrExpression(node);
    }

    public void inAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        inAIdentifierLeftHandSide(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierLeftHandSide(node);
    }

    public void inAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        inAFieldLeftHandSide(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldLeftHandSide(node);
    }

    public void inAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        inAArrayLeftHandSide(node);
        if(node.getArrayAccess() != null)
        {
            node.getArrayAccess().apply(this);
        }
        outAArrayLeftHandSide(node);
    }

    public void inAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        inAMjMatrixAccessLeftHandSide(node);
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        outAMjMatrixAccessLeftHandSide(node);
    }

    public void inAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        inAAssignAssignmentOperator(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignAssignmentOperator(node);
    }

    public void inAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        inAStarAssignAssignmentOperator(node);
        if(node.getStarAssign() != null)
        {
            node.getStarAssign().apply(this);
        }
        outAStarAssignAssignmentOperator(node);
    }

    public void inASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        inASlashAssignAssignmentOperator(node);
        if(node.getSlashAssign() != null)
        {
            node.getSlashAssign().apply(this);
        }
        outASlashAssignAssignmentOperator(node);
    }

    public void inAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        inAPercentAssignAssignmentOperator(node);
        if(node.getPercentAssign() != null)
        {
            node.getPercentAssign().apply(this);
        }
        outAPercentAssignAssignmentOperator(node);
    }

    public void inAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        inAPlusAssignAssignmentOperator(node);
        if(node.getPlusAssign() != null)
        {
            node.getPlusAssign().apply(this);
        }
        outAPlusAssignAssignmentOperator(node);
    }

    public void inAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        inAMinusAssignAssignmentOperator(node);
        if(node.getMinusAssign() != null)
        {
            node.getMinusAssign().apply(this);
        }
        outAMinusAssignAssignmentOperator(node);
    }

    public void inAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        inAShlAssignAssignmentOperator(node);
        if(node.getShlAssign() != null)
        {
            node.getShlAssign().apply(this);
        }
        outAShlAssignAssignmentOperator(node);
    }

    public void inAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        inAShrAssignAssignmentOperator(node);
        if(node.getShrAssign() != null)
        {
            node.getShrAssign().apply(this);
        }
        outAShrAssignAssignmentOperator(node);
    }

    public void inAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        inAUshrAssignAssignmentOperator(node);
        if(node.getUshrAssign() != null)
        {
            node.getUshrAssign().apply(this);
        }
        outAUshrAssignAssignmentOperator(node);
    }

    public void inAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        inAAmpAssignAssignmentOperator(node);
        if(node.getAmpAssign() != null)
        {
            node.getAmpAssign().apply(this);
        }
        outAAmpAssignAssignmentOperator(node);
    }

    public void inACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        inACaretAssignAssignmentOperator(node);
        if(node.getCaretAssign() != null)
        {
            node.getCaretAssign().apply(this);
        }
        outACaretAssignAssignmentOperator(node);
    }

    public void inABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultIn(node);
    }

    public void outABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        inABarAssignAssignmentOperator(node);
        if(node.getBarAssign() != null)
        {
            node.getBarAssign().apply(this);
        }
        outABarAssignAssignmentOperator(node);
    }

    public void inAWildcard(AWildcard node)
    {
        defaultIn(node);
    }

    public void outAWildcard(AWildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcard(AWildcard node)
    {
        inAWildcard(node);
        if(node.getWildcardBounds() != null)
        {
            node.getWildcardBounds().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        outAWildcard(node);
    }

    public void inAWildcardShr(AWildcardShr node)
    {
        defaultIn(node);
    }

    public void outAWildcardShr(AWildcardShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardShr(AWildcardShr node)
    {
        inAWildcardShr(node);
        if(node.getWildcardBoundsShr() != null)
        {
            node.getWildcardBoundsShr().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        outAWildcardShr(node);
    }

    public void inAWildcardUshr(AWildcardUshr node)
    {
        defaultIn(node);
    }

    public void outAWildcardUshr(AWildcardUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardUshr(AWildcardUshr node)
    {
        inAWildcardUshr(node);
        if(node.getWildcardBoundsUshr() != null)
        {
            node.getWildcardBoundsUshr().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        outAWildcardUshr(node);
    }

    public void inAWildcardUshrNoGt(AWildcardUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAWildcardUshrNoGt(AWildcardUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardUshrNoGt(AWildcardUshrNoGt node)
    {
        inAWildcardUshrNoGt(node);
        if(node.getWildcardBoundsUshrNoGt() != null)
        {
            node.getWildcardBoundsUshrNoGt().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        outAWildcardUshrNoGt(node);
    }

    public void inALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultIn(node);
    }

    public void outALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        inALocalVariableDeclarationStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        outALocalVariableDeclarationStatement(node);
    }

    public void inANoTrailStatement(ANoTrailStatement node)
    {
        defaultIn(node);
    }

    public void outANoTrailStatement(ANoTrailStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoTrailStatement(ANoTrailStatement node)
    {
        inANoTrailStatement(node);
        if(node.getStatementWithoutTrailingSubstatement() != null)
        {
            node.getStatementWithoutTrailingSubstatement().apply(this);
        }
        outANoTrailStatement(node);
    }

    public void inALabelStatement(ALabelStatement node)
    {
        defaultIn(node);
    }

    public void outALabelStatement(ALabelStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelStatement(ALabelStatement node)
    {
        inALabelStatement(node);
        if(node.getLabeledStatement() != null)
        {
            node.getLabeledStatement().apply(this);
        }
        outALabelStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfThenStatement() != null)
        {
            node.getIfThenStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getIfThenElseStatement() != null)
        {
            node.getIfThenElseStatement().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAWhileLoopStatement(AWhileLoopStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileLoopStatement(AWhileLoopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileLoopStatement(AWhileLoopStatement node)
    {
        inAWhileLoopStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileLoopStatement(node);
    }

    public void inAForLoopStatement(AForLoopStatement node)
    {
        defaultIn(node);
    }

    public void outAForLoopStatement(AForLoopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForLoopStatement(AForLoopStatement node)
    {
        inAForLoopStatement(node);
        if(node.getForStatement() != null)
        {
            node.getForStatement().apply(this);
        }
        outAForLoopStatement(node);
    }

    public void inAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        inAPrimitiveVarArgLastFormalParameter(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveVarArgLastFormalParameter(node);
    }

    public void inAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        inAReferenceVarArgLastFormalParameter(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceVarArgLastFormalParameter(node);
    }

    public void inASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        inASimpleLastFormalParameter(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outASimpleLastFormalParameter(node);
    }

    public void inAOneFormalParameters(AOneFormalParameters node)
    {
        defaultIn(node);
    }

    public void outAOneFormalParameters(AOneFormalParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneFormalParameters(AOneFormalParameters node)
    {
        inAOneFormalParameters(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAOneFormalParameters(node);
    }

    public void inAManyFormalParameters(AManyFormalParameters node)
    {
        defaultIn(node);
    }

    public void outAManyFormalParameters(AManyFormalParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyFormalParameters(AManyFormalParameters node)
    {
        inAManyFormalParameters(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormalParameters() != null)
        {
            node.getFormalParameters().apply(this);
        }
        outAManyFormalParameters(node);
    }

    public void inAExceptionType(AExceptionType node)
    {
        defaultIn(node);
    }

    public void outAExceptionType(AExceptionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExceptionType(AExceptionType node)
    {
        inAExceptionType(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExceptionType(node);
    }

    public void inAGtNonWildTypeArguments(AGtNonWildTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAGtNonWildTypeArguments(AGtNonWildTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtNonWildTypeArguments(AGtNonWildTypeArguments node)
    {
        inAGtNonWildTypeArguments(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAGtNonWildTypeArguments(node);
    }

    public void inAShrNonWildTypeArguments(AShrNonWildTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAShrNonWildTypeArguments(AShrNonWildTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrNonWildTypeArguments(AShrNonWildTypeArguments node)
    {
        inAShrNonWildTypeArguments(node);
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getReferenceTypeListShr() != null)
        {
            node.getReferenceTypeListShr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAShrNonWildTypeArguments(node);
    }

    public void inAUshrNonWildTypeArguments(AUshrNonWildTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAUshrNonWildTypeArguments(AUshrNonWildTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrNonWildTypeArguments(AUshrNonWildTypeArguments node)
    {
        inAUshrNonWildTypeArguments(node);
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getReferenceTypeListUshr() != null)
        {
            node.getReferenceTypeListUshr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outAUshrNonWildTypeArguments(node);
    }

    public void inAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        inAMjMatrixAccessMpPrePrimary(node);
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        outAMjMatrixAccessMpPrePrimary(node);
    }

    public void inAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        inAPrimaryMpPrePrimary(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryMpPrePrimary(node);
    }

    public void inANoArrayPrimary(ANoArrayPrimary node)
    {
        defaultIn(node);
    }

    public void outANoArrayPrimary(ANoArrayPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoArrayPrimary(ANoArrayPrimary node)
    {
        inANoArrayPrimary(node);
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        outANoArrayPrimary(node);
    }

    public void inAArrayPrimary(AArrayPrimary node)
    {
        defaultIn(node);
    }

    public void outAArrayPrimary(AArrayPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayPrimary(AArrayPrimary node)
    {
        inAArrayPrimary(node);
        if(node.getArrayCreationExpression() != null)
        {
            node.getArrayCreationExpression().apply(this);
        }
        outAArrayPrimary(node);
    }

    public void inAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        inAExpressionVariableInitializer(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionVariableInitializer(node);
    }

    public void inAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        inAIdentifierVariableInitializer(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierVariableInitializer(node);
    }

    public void inAArrayVariableInitializer(AArrayVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAArrayVariableInitializer(AArrayVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVariableInitializer(AArrayVariableInitializer node)
    {
        inAArrayVariableInitializer(node);
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        outAArrayVariableInitializer(node);
    }

    public void inAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        inAMjOutsideIncludedVariableInitializer(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOutsideIncludedVariableInitializer(node);
    }

    public void inAByteIntegralType(AByteIntegralType node)
    {
        defaultIn(node);
    }

    public void outAByteIntegralType(AByteIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteIntegralType(AByteIntegralType node)
    {
        inAByteIntegralType(node);
        if(node.getByte() != null)
        {
            node.getByte().apply(this);
        }
        outAByteIntegralType(node);
    }

    public void inAShortIntegralType(AShortIntegralType node)
    {
        defaultIn(node);
    }

    public void outAShortIntegralType(AShortIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIntegralType(AShortIntegralType node)
    {
        inAShortIntegralType(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortIntegralType(node);
    }

    public void inAIntIntegralType(AIntIntegralType node)
    {
        defaultIn(node);
    }

    public void outAIntIntegralType(AIntIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntIntegralType(AIntIntegralType node)
    {
        inAIntIntegralType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntIntegralType(node);
    }

    public void inALongIntegralType(ALongIntegralType node)
    {
        defaultIn(node);
    }

    public void outALongIntegralType(ALongIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongIntegralType(ALongIntegralType node)
    {
        inALongIntegralType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongIntegralType(node);
    }

    public void inACharIntegralType(ACharIntegralType node)
    {
        defaultIn(node);
    }

    public void outACharIntegralType(ACharIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharIntegralType(ACharIntegralType node)
    {
        inACharIntegralType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharIntegralType(node);
    }

    public void inAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        inAFloatFloatingPointType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatFloatingPointType(node);
    }

    public void inADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        inADoubleFloatingPointType(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleFloatingPointType(node);
    }

    public void inASimpleAndExpression(ASimpleAndExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleAndExpression(ASimpleAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAndExpression(ASimpleAndExpression node)
    {
        inASimpleAndExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outASimpleAndExpression(node);
    }

    public void inAAmpAnEqAndExpression(AAmpAnEqAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpAnEqAndExpression(AAmpAnEqAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAnEqAndExpression(AAmpAnEqAndExpression node)
    {
        inAAmpAnEqAndExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outAAmpAnEqAndExpression(node);
    }

    public void inAAmpAnIdAndExpression(AAmpAnIdAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpAnIdAndExpression(AAmpAnIdAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpAnIdAndExpression(AAmpAnIdAndExpression node)
    {
        inAAmpAnIdAndExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outAAmpAnIdAndExpression(node);
    }

    public void inAAmpIdEqAndExpression(AAmpIdEqAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpIdEqAndExpression(AAmpIdEqAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpIdEqAndExpression(AAmpIdEqAndExpression node)
    {
        inAAmpIdEqAndExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAmpIdEqAndExpression(node);
    }

    public void inAAmpIdIdAndExpression(AAmpIdIdAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAmpIdIdAndExpression(AAmpIdIdAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpIdIdAndExpression(AAmpIdIdAndExpression node)
    {
        inAAmpIdIdAndExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getAmp() != null)
        {
            node.getAmp().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAAmpIdIdAndExpression(node);
    }

    public void inAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        inAPrimaryFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryFieldAccess(node);
    }

    public void inASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultIn(node);
    }

    public void outASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        inASuperFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperFieldAccess(node);
    }

    public void inAReferenceSuperFieldAccess(AReferenceSuperFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAReferenceSuperFieldAccess(AReferenceSuperFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceSuperFieldAccess(AReferenceSuperFieldAccess node)
    {
        inAReferenceSuperFieldAccess(node);
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getDot2() != null)
        {
            node.getDot2().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        if(node.getDot1() != null)
        {
            node.getDot1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAReferenceSuperFieldAccess(node);
    }

    public void inAPrimaryExArrayAccess(APrimaryExArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExArrayAccess(APrimaryExArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryExArrayAccess(APrimaryExArrayAccess node)
    {
        inAPrimaryExArrayAccess(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        outAPrimaryExArrayAccess(node);
    }

    public void inAPrimaryIdArrayAccess(APrimaryIdArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAPrimaryIdArrayAccess(APrimaryIdArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryIdArrayAccess(APrimaryIdArrayAccess node)
    {
        inAPrimaryIdArrayAccess(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        outAPrimaryIdArrayAccess(node);
    }

    public void inAIdentifierExArrayAccess(AIdentifierExArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExArrayAccess(AIdentifierExArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExArrayAccess(AIdentifierExArrayAccess node)
    {
        inAIdentifierExArrayAccess(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExArrayAccess(node);
    }

    public void inAIdentifierIdArrayAccess(AIdentifierIdArrayAccess node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIdArrayAccess(AIdentifierIdArrayAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierIdArrayAccess(AIdentifierIdArrayAccess node)
    {
        inAIdentifierIdArrayAccess(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAIdentifierIdArrayAccess(node);
    }

    public void inAExtendsPrimitiveWildcardBounds(AExtendsPrimitiveWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outAExtendsPrimitiveWildcardBounds(AExtendsPrimitiveWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsPrimitiveWildcardBounds(AExtendsPrimitiveWildcardBounds node)
    {
        inAExtendsPrimitiveWildcardBounds(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAExtendsPrimitiveWildcardBounds(node);
    }

    public void inAExtendsReferenceWildcardBounds(AExtendsReferenceWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outAExtendsReferenceWildcardBounds(AExtendsReferenceWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsReferenceWildcardBounds(AExtendsReferenceWildcardBounds node)
    {
        inAExtendsReferenceWildcardBounds(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAExtendsReferenceWildcardBounds(node);
    }

    public void inASuperPrimitiveWildcardBounds(ASuperPrimitiveWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outASuperPrimitiveWildcardBounds(ASuperPrimitiveWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperPrimitiveWildcardBounds(ASuperPrimitiveWildcardBounds node)
    {
        inASuperPrimitiveWildcardBounds(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperPrimitiveWildcardBounds(node);
    }

    public void inASuperReferenceWildcardBounds(ASuperReferenceWildcardBounds node)
    {
        defaultIn(node);
    }

    public void outASuperReferenceWildcardBounds(ASuperReferenceWildcardBounds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperReferenceWildcardBounds(ASuperReferenceWildcardBounds node)
    {
        inASuperReferenceWildcardBounds(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperReferenceWildcardBounds(node);
    }

    public void inAExtendsReferenceWildcardBoundsShr(AExtendsReferenceWildcardBoundsShr node)
    {
        defaultIn(node);
    }

    public void outAExtendsReferenceWildcardBoundsShr(AExtendsReferenceWildcardBoundsShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsReferenceWildcardBoundsShr(AExtendsReferenceWildcardBoundsShr node)
    {
        inAExtendsReferenceWildcardBoundsShr(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAExtendsReferenceWildcardBoundsShr(node);
    }

    public void inASuperReferenceWildcardBoundsShr(ASuperReferenceWildcardBoundsShr node)
    {
        defaultIn(node);
    }

    public void outASuperReferenceWildcardBoundsShr(ASuperReferenceWildcardBoundsShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperReferenceWildcardBoundsShr(ASuperReferenceWildcardBoundsShr node)
    {
        inASuperReferenceWildcardBoundsShr(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperReferenceWildcardBoundsShr(node);
    }

    public void inAExtendsReferenceWildcardBoundsUshr(AExtendsReferenceWildcardBoundsUshr node)
    {
        defaultIn(node);
    }

    public void outAExtendsReferenceWildcardBoundsUshr(AExtendsReferenceWildcardBoundsUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsReferenceWildcardBoundsUshr(AExtendsReferenceWildcardBoundsUshr node)
    {
        inAExtendsReferenceWildcardBoundsUshr(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAExtendsReferenceWildcardBoundsUshr(node);
    }

    public void inASuperReferenceWildcardBoundsUshr(ASuperReferenceWildcardBoundsUshr node)
    {
        defaultIn(node);
    }

    public void outASuperReferenceWildcardBoundsUshr(ASuperReferenceWildcardBoundsUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperReferenceWildcardBoundsUshr(ASuperReferenceWildcardBoundsUshr node)
    {
        inASuperReferenceWildcardBoundsUshr(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperReferenceWildcardBoundsUshr(node);
    }

    public void inAExtendsReferenceWildcardBoundsUshrNoGt(AExtendsReferenceWildcardBoundsUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAExtendsReferenceWildcardBoundsUshrNoGt(AExtendsReferenceWildcardBoundsUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsReferenceWildcardBoundsUshrNoGt(AExtendsReferenceWildcardBoundsUshrNoGt node)
    {
        inAExtendsReferenceWildcardBoundsUshrNoGt(node);
        if(node.getTypeArgumentsUshrNoGt() != null)
        {
            node.getTypeArgumentsUshrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAExtendsReferenceWildcardBoundsUshrNoGt(node);
    }

    public void inASuperReferenceWildcardBoundsUshrNoGt(ASuperReferenceWildcardBoundsUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outASuperReferenceWildcardBoundsUshrNoGt(ASuperReferenceWildcardBoundsUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperReferenceWildcardBoundsUshrNoGt(ASuperReferenceWildcardBoundsUshrNoGt node)
    {
        inASuperReferenceWildcardBoundsUshrNoGt(node);
        if(node.getTypeArgumentsUshrNoGt() != null)
        {
            node.getTypeArgumentsUshrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperReferenceWildcardBoundsUshrNoGt(node);
    }

    public void inAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        inAPrimitiveLocalVariableDeclaration(node);
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveLocalVariableDeclaration(node);
    }

    public void inAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        inAReferenceLocalVariableDeclaration(node);
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceLocalVariableDeclaration(node);
    }

    public void inAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        inAMjDescVarLocalVariableDeclaration(node);
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        outAMjDescVarLocalVariableDeclaration(node);
    }

    public void inABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        inABlockStatementWithoutTrailingSubstatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatementWithoutTrailingSubstatement(node);
    }

    public void inAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        inAEmptyStatementStatementWithoutTrailingSubstatement(node);
        if(node.getEmptyStatement() != null)
        {
            node.getEmptyStatement().apply(this);
        }
        outAEmptyStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        inAExpressionStatementStatementWithoutTrailingSubstatement(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        inAAssertStatementStatementWithoutTrailingSubstatement(node);
        if(node.getAssertStatement() != null)
        {
            node.getAssertStatement().apply(this);
        }
        outAAssertStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        inASwitchStatementStatementWithoutTrailingSubstatement(node);
        if(node.getSwitchStatement() != null)
        {
            node.getSwitchStatement().apply(this);
        }
        outASwitchStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        inADoStatementStatementWithoutTrailingSubstatement(node);
        if(node.getDoStatement() != null)
        {
            node.getDoStatement().apply(this);
        }
        outADoStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        inABreakStatementStatementWithoutTrailingSubstatement(node);
        if(node.getBreakStatement() != null)
        {
            node.getBreakStatement().apply(this);
        }
        outABreakStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAContinueStmtStatementWithoutTrailingSubstatement(AContinueStmtStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStmtStatementWithoutTrailingSubstatement(AContinueStmtStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStmtStatementWithoutTrailingSubstatement(AContinueStmtStatementWithoutTrailingSubstatement node)
    {
        inAContinueStmtStatementWithoutTrailingSubstatement(node);
        if(node.getContinueStatement() != null)
        {
            node.getContinueStatement().apply(this);
        }
        outAContinueStmtStatementWithoutTrailingSubstatement(node);
    }

    public void inAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        inAReturnStatementStatementWithoutTrailingSubstatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outAReturnStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        inASynchronizedStatementStatementWithoutTrailingSubstatement(node);
        if(node.getSynchronizedStatement() != null)
        {
            node.getSynchronizedStatement().apply(this);
        }
        outASynchronizedStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        inAThrowStatementStatementWithoutTrailingSubstatement(node);
        if(node.getThrowStatement() != null)
        {
            node.getThrowStatement().apply(this);
        }
        outAThrowStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        inATryStatementStatementWithoutTrailingSubstatement(node);
        if(node.getTryStatement() != null)
        {
            node.getTryStatement().apply(this);
        }
        outATryStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAMjAnnotationStatementStatementWithoutTrailingSubstatement(AMjAnnotationStatementStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAMjAnnotationStatementStatementWithoutTrailingSubstatement(AMjAnnotationStatementStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjAnnotationStatementStatementWithoutTrailingSubstatement(AMjAnnotationStatementStatementWithoutTrailingSubstatement node)
    {
        inAMjAnnotationStatementStatementWithoutTrailingSubstatement(node);
        if(node.getAnnotationStatement() != null)
        {
            node.getAnnotationStatement().apply(this);
        }
        outAMjAnnotationStatementStatementWithoutTrailingSubstatement(node);
    }

    public void inAMjAnnotationsStatementWithoutTrailingSubstatement(AMjAnnotationsStatementWithoutTrailingSubstatement node)
    {
        defaultIn(node);
    }

    public void outAMjAnnotationsStatementWithoutTrailingSubstatement(AMjAnnotationsStatementWithoutTrailingSubstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjAnnotationsStatementWithoutTrailingSubstatement(AMjAnnotationsStatementWithoutTrailingSubstatement node)
    {
        inAMjAnnotationsStatementWithoutTrailingSubstatement(node);
        if(node.getMpAnnotationsDeclaration() != null)
        {
            node.getMpAnnotationsDeclaration().apply(this);
        }
        outAMjAnnotationsStatementWithoutTrailingSubstatement(node);
    }

    public void inALabeledStatement(ALabeledStatement node)
    {
        defaultIn(node);
    }

    public void outALabeledStatement(ALabeledStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatement(ALabeledStatement node)
    {
        inALabeledStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALabeledStatement(node);
    }

    public void inAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        inAExpressionIfThenStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAExpressionIfThenStatement(node);
    }

    public void inAIdentifierIfThenStatement(AIdentifierIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIfThenStatement(AIdentifierIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierIfThenStatement(AIdentifierIfThenStatement node)
    {
        inAIdentifierIfThenStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIdentifierIfThenStatement(node);
    }

    public void inAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        inAExpressionIfThenElseStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAExpressionIfThenElseStatement(node);
    }

    public void inAIdentifierIfThenElseStatement(AIdentifierIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIfThenElseStatement(AIdentifierIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierIfThenElseStatement(AIdentifierIfThenElseStatement node)
    {
        inAIdentifierIfThenElseStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIdentifierIfThenElseStatement(node);
    }

    public void inAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        inAExpressionWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAExpressionWhileStatement(node);
    }

    public void inAIdentifierWhileStatement(AIdentifierWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierWhileStatement(AIdentifierWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierWhileStatement(AIdentifierWhileStatement node)
    {
        inAIdentifierWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIdentifierWhileStatement(node);
    }

    public void inABasicForForStatement(ABasicForForStatement node)
    {
        defaultIn(node);
    }

    public void outABasicForForStatement(ABasicForForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        inABasicForForStatement(node);
        if(node.getBasicForStatement() != null)
        {
            node.getBasicForStatement().apply(this);
        }
        outABasicForForStatement(node);
    }

    public void inAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultIn(node);
    }

    public void outAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        inAEnhancedForForStatement(node);
        if(node.getEnhancedForStatement() != null)
        {
            node.getEnhancedForStatement().apply(this);
        }
        outAEnhancedForForStatement(node);
    }

    public void inAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        inAPrimitiveFormalParameter(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveFormalParameter(node);
    }

    public void inAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        inAReferenceFormalParameter(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceFormalParameter(node);
    }

    public void inAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        inAMpDescVarFormalParameter(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        outAMpDescVarFormalParameter(node);
    }

    public void inAOnePrimitiveReferenceTypeList(AOnePrimitiveReferenceTypeList node)
    {
        defaultIn(node);
    }

    public void outAOnePrimitiveReferenceTypeList(AOnePrimitiveReferenceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnePrimitiveReferenceTypeList(AOnePrimitiveReferenceTypeList node)
    {
        inAOnePrimitiveReferenceTypeList(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAOnePrimitiveReferenceTypeList(node);
    }

    public void inAOneReferenceReferenceTypeList(AOneReferenceReferenceTypeList node)
    {
        defaultIn(node);
    }

    public void outAOneReferenceReferenceTypeList(AOneReferenceReferenceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneReferenceReferenceTypeList(AOneReferenceReferenceTypeList node)
    {
        inAOneReferenceReferenceTypeList(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOneReferenceReferenceTypeList(node);
    }

    public void inAManyPrimitiveReferenceTypeList(AManyPrimitiveReferenceTypeList node)
    {
        defaultIn(node);
    }

    public void outAManyPrimitiveReferenceTypeList(AManyPrimitiveReferenceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyPrimitiveReferenceTypeList(AManyPrimitiveReferenceTypeList node)
    {
        inAManyPrimitiveReferenceTypeList(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        outAManyPrimitiveReferenceTypeList(node);
    }

    public void inAManyReferenceReferenceTypeList(AManyReferenceReferenceTypeList node)
    {
        defaultIn(node);
    }

    public void outAManyReferenceReferenceTypeList(AManyReferenceReferenceTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyReferenceReferenceTypeList(AManyReferenceReferenceTypeList node)
    {
        inAManyReferenceReferenceTypeList(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        outAManyReferenceReferenceTypeList(node);
    }

    public void inAOneReferenceReferenceTypeListShr(AOneReferenceReferenceTypeListShr node)
    {
        defaultIn(node);
    }

    public void outAOneReferenceReferenceTypeListShr(AOneReferenceReferenceTypeListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneReferenceReferenceTypeListShr(AOneReferenceReferenceTypeListShr node)
    {
        inAOneReferenceReferenceTypeListShr(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOneReferenceReferenceTypeListShr(node);
    }

    public void inAManyReferenceReferenceTypeListShr(AManyReferenceReferenceTypeListShr node)
    {
        defaultIn(node);
    }

    public void outAManyReferenceReferenceTypeListShr(AManyReferenceReferenceTypeListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyReferenceReferenceTypeListShr(AManyReferenceReferenceTypeListShr node)
    {
        inAManyReferenceReferenceTypeListShr(node);
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        outAManyReferenceReferenceTypeListShr(node);
    }

    public void inAOneReferenceReferenceTypeListUshr(AOneReferenceReferenceTypeListUshr node)
    {
        defaultIn(node);
    }

    public void outAOneReferenceReferenceTypeListUshr(AOneReferenceReferenceTypeListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneReferenceReferenceTypeListUshr(AOneReferenceReferenceTypeListUshr node)
    {
        inAOneReferenceReferenceTypeListUshr(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOneReferenceReferenceTypeListUshr(node);
    }

    public void inAManyReferenceReferenceTypeListUshr(AManyReferenceReferenceTypeListUshr node)
    {
        defaultIn(node);
    }

    public void outAManyReferenceReferenceTypeListUshr(AManyReferenceReferenceTypeListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyReferenceReferenceTypeListUshr(AManyReferenceReferenceTypeListUshr node)
    {
        inAManyReferenceReferenceTypeListUshr(node);
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getReferenceTypeList() != null)
        {
            node.getReferenceTypeList().apply(this);
        }
        outAManyReferenceReferenceTypeListUshr(node);
    }

    public void inALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        inALiteralPrimaryNoNewArray(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryNoNewArray(node);
    }

    public void inAPrimitivePrimaryNoNewArray(APrimitivePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAPrimitivePrimaryNoNewArray(APrimitivePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitivePrimaryNoNewArray(APrimitivePrimaryNoNewArray node)
    {
        inAPrimitivePrimaryNoNewArray(node);
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        outAPrimitivePrimaryNoNewArray(node);
    }

    public void inAReferencePrimaryNoNewArray(AReferencePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAReferencePrimaryNoNewArray(AReferencePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferencePrimaryNoNewArray(AReferencePrimaryNoNewArray node)
    {
        inAReferencePrimaryNoNewArray(node);
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferencePrimaryNoNewArray(node);
    }

    public void inAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        inAVoidPrimaryNoNewArray(node);
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidPrimaryNoNewArray(node);
    }

    public void inAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        inAThisPrimaryNoNewArray(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisPrimaryNoNewArray(node);
    }

    public void inAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        inAClassPrimaryNoNewArray(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassPrimaryNoNewArray(node);
    }

    public void inAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        inAExpressionPrimaryNoNewArray(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAExpressionPrimaryNoNewArray(node);
    }

    public void inAIdentifierPrimaryNoNewArray(AIdentifierPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAIdentifierPrimaryNoNewArray(AIdentifierPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierPrimaryNoNewArray(AIdentifierPrimaryNoNewArray node)
    {
        inAIdentifierPrimaryNoNewArray(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAIdentifierPrimaryNoNewArray(node);
    }

    public void inAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstancePrimaryNoNewArray(AInstancePrimaryNoNewArray node)
    {
        inAInstancePrimaryNoNewArray(node);
        if(node.getClassInstanceCreationExpression() != null)
        {
            node.getClassInstanceCreationExpression().apply(this);
        }
        outAInstancePrimaryNoNewArray(node);
    }

    public void inAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        inAFieldPrimaryNoNewArray(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldPrimaryNoNewArray(node);
    }

    public void inAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        inAMethodPrimaryNoNewArray(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodPrimaryNoNewArray(node);
    }

    public void inAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        inAArrayPrimaryNoNewArray(node);
        if(node.getArrayAccess() != null)
        {
            node.getArrayAccess().apply(this);
        }
        outAArrayPrimaryNoNewArray(node);
    }

    public void inAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        inAMjSetCreationPrimaryNoNewArray(node);
        if(node.getSetInstanceCreation() != null)
        {
            node.getSetInstanceCreation().apply(this);
        }
        outAMjSetCreationPrimaryNoNewArray(node);
    }

    public void inAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        inAMjSubsetCreationPrimaryNoNewArray(node);
        if(node.getSubsetCreation() != null)
        {
            node.getSubsetCreation().apply(this);
        }
        outAMjSubsetCreationPrimaryNoNewArray(node);
    }

    public void inAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        inAMjItVarPrimaryNoNewArray(node);
        if(node.getItVariable() != null)
        {
            node.getItVariable().apply(this);
        }
        outAMjItVarPrimaryNoNewArray(node);
    }

    public void inAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        inAMjClosurePrimaryNoNewArray(node);
        if(node.getCodeClosure() != null)
        {
            node.getCodeClosure().apply(this);
        }
        outAMjClosurePrimaryNoNewArray(node);
    }

    public void inAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        inAMjSymbolParensPrimaryNoNewArray(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getMpSymbolUseage() != null)
        {
            node.getMpSymbolUseage().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMjSymbolParensPrimaryNoNewArray(node);
    }

    public void inAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        inAMjMatrixElementCreationParensPrimaryNoNewArray(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getMatrixElementCreation() != null)
        {
            node.getMatrixElementCreation().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMjMatrixElementCreationParensPrimaryNoNewArray(node);
    }

    public void inAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        inAPrimitiveArrayCreationExpression(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDimExpr> copy = new ArrayList<PDimExpr>(node.getDimExprs());
            Collections.reverse(copy);
            for(PDimExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAPrimitiveArrayCreationExpression(node);
    }

    public void inAReferenceArrayCreationExpression(AReferenceArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceArrayCreationExpression(AReferenceArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceArrayCreationExpression(AReferenceArrayCreationExpression node)
    {
        inAReferenceArrayCreationExpression(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDimExpr> copy = new ArrayList<PDimExpr>(node.getDimExprs());
            Collections.reverse(copy);
            for(PDimExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAReferenceArrayCreationExpression(node);
    }

    public void inAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        inAPrimitiveInitializerArrayCreationExpression(node);
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAPrimitiveInitializerArrayCreationExpression(node);
    }

    public void inAReferenceInitializerArrayCreationExpression(AReferenceInitializerArrayCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceInitializerArrayCreationExpression(AReferenceInitializerArrayCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceInitializerArrayCreationExpression(AReferenceInitializerArrayCreationExpression node)
    {
        inAReferenceInitializerArrayCreationExpression(node);
        if(node.getArrayInitializer() != null)
        {
            node.getArrayInitializer().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAReferenceInitializerArrayCreationExpression(node);
    }

    public void inAArrayInitializer(AArrayInitializer node)
    {
        defaultIn(node);
    }

    public void outAArrayInitializer(AArrayInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitializer(AArrayInitializer node)
    {
        inAArrayInitializer(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableInitializers() != null)
        {
            node.getVariableInitializers().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAArrayInitializer(node);
    }

    public void inAOneVariableInitializers(AOneVariableInitializers node)
    {
        defaultIn(node);
    }

    public void outAOneVariableInitializers(AOneVariableInitializers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneVariableInitializers(AOneVariableInitializers node)
    {
        inAOneVariableInitializers(node);
        if(node.getVariableInitializer() != null)
        {
            node.getVariableInitializer().apply(this);
        }
        outAOneVariableInitializers(node);
    }

    public void inAManyVariableInitializers(AManyVariableInitializers node)
    {
        defaultIn(node);
    }

    public void outAManyVariableInitializers(AManyVariableInitializers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyVariableInitializers(AManyVariableInitializers node)
    {
        inAManyVariableInitializers(node);
        if(node.getVariableInitializer() != null)
        {
            node.getVariableInitializer().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableInitializers() != null)
        {
            node.getVariableInitializers().apply(this);
        }
        outAManyVariableInitializers(node);
    }

    public void inASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        inASimpleEqualityExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outASimpleEqualityExpression(node);
    }

    public void inAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        inAEqEqReEqualityExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outAEqEqReEqualityExpression(node);
    }

    public void inAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        inAMjEqEqMpEqualityExpression(node);
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outAMjEqEqMpEqualityExpression(node);
    }

    public void inAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        inAMjEqMpReEqualityExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        outAMjEqMpReEqualityExpression(node);
    }

    public void inAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        inAMjEqMpMpEqualityExpression(node);
        if(node.getMpElement2() != null)
        {
            node.getMpElement2().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getMpElement1() != null)
        {
            node.getMpElement1().apply(this);
        }
        outAMjEqMpMpEqualityExpression(node);
    }

    public void inANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        inANeqEqReEqualityExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outANeqEqReEqualityExpression(node);
    }

    public void inAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        inAMjNeqEqMpEqualityExpression(node);
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outAMjNeqEqMpEqualityExpression(node);
    }

    public void inAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        inAMjNeqMpReEqualityExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        outAMjNeqMpReEqualityExpression(node);
    }

    public void inAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        inAMjNeqMpMpEqualityExpression(node);
        if(node.getMpElement2() != null)
        {
            node.getMpElement2().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getMpElement1() != null)
        {
            node.getMpElement1().apply(this);
        }
        outAMjNeqMpMpEqualityExpression(node);
    }

    public void inAEmptyStatement(AEmptyStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatement(AEmptyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        inAEmptyStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyStatement(node);
    }

    public void inAExpressionStatement(AExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatement(AExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        inAExpressionStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        outAExpressionStatement(node);
    }

    public void inAOneExAssertStatement(AOneExAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAOneExAssertStatement(AOneExAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneExAssertStatement(AOneExAssertStatement node)
    {
        inAOneExAssertStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outAOneExAssertStatement(node);
    }

    public void inAOneIdAssertStatement(AOneIdAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAOneIdAssertStatement(AOneIdAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneIdAssertStatement(AOneIdAssertStatement node)
    {
        inAOneIdAssertStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outAOneIdAssertStatement(node);
    }

    public void inATwoExExAssertStatement(ATwoExExAssertStatement node)
    {
        defaultIn(node);
    }

    public void outATwoExExAssertStatement(ATwoExExAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoExExAssertStatement(ATwoExExAssertStatement node)
    {
        inATwoExExAssertStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outATwoExExAssertStatement(node);
    }

    public void inATwoExIdAssertStatement(ATwoExIdAssertStatement node)
    {
        defaultIn(node);
    }

    public void outATwoExIdAssertStatement(ATwoExIdAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoExIdAssertStatement(ATwoExIdAssertStatement node)
    {
        inATwoExIdAssertStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outATwoExIdAssertStatement(node);
    }

    public void inATwoIdExAssertStatement(ATwoIdExAssertStatement node)
    {
        defaultIn(node);
    }

    public void outATwoIdExAssertStatement(ATwoIdExAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoIdExAssertStatement(ATwoIdExAssertStatement node)
    {
        inATwoIdExAssertStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outATwoIdExAssertStatement(node);
    }

    public void inATwoIdIdAssertStatement(ATwoIdIdAssertStatement node)
    {
        defaultIn(node);
    }

    public void outATwoIdIdAssertStatement(ATwoIdIdAssertStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoIdIdAssertStatement(ATwoIdIdAssertStatement node)
    {
        inATwoIdIdAssertStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outATwoIdIdAssertStatement(node);
    }

    public void inAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        inAExpressionSwitchStatement(node);
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        outAExpressionSwitchStatement(node);
    }

    public void inAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        inAIdentifierSwitchStatement(node);
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        outAIdentifierSwitchStatement(node);
    }

    public void inAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDoStatement(AExpressionDoStatement node)
    {
        inAExpressionDoStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outAExpressionDoStatement(node);
    }

    public void inAIdentifierDoStatement(AIdentifierDoStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDoStatement(AIdentifierDoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierDoStatement(AIdentifierDoStatement node)
    {
        inAIdentifierDoStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outAIdentifierDoStatement(node);
    }

    public void inABreakStatement(ABreakStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatement(ABreakStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        inABreakStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakStatement(node);
    }

    public void inAContinueStatement(AContinueStatement node)
    {
        defaultIn(node);
    }

    public void outAContinueStatement(AContinueStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStatement(AContinueStatement node)
    {
        inAContinueStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getContinue() != null)
        {
            node.getContinue().apply(this);
        }
        outAContinueStatement(node);
    }

    public void inAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        inAEmptyReturnStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAEmptyReturnStatement(node);
    }

    public void inAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        inAExpressionReturnStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAExpressionReturnStatement(node);
    }

    public void inAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        inAIdentifierReturnStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAIdentifierReturnStatement(node);
    }

    public void inAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        inAMjOutsideIncludedReturnStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAMjOutsideIncludedReturnStatement(node);
    }

    public void inAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        inAExpressionSynchronizedStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outAExpressionSynchronizedStatement(node);
    }

    public void inAIdentifierSynchronizedStatement(AIdentifierSynchronizedStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSynchronizedStatement(AIdentifierSynchronizedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierSynchronizedStatement(AIdentifierSynchronizedStatement node)
    {
        inAIdentifierSynchronizedStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outAIdentifierSynchronizedStatement(node);
    }

    public void inAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        inAExpressionThrowStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getThrow() != null)
        {
            node.getThrow().apply(this);
        }
        outAExpressionThrowStatement(node);
    }

    public void inAIdentifierThrowStatement(AIdentifierThrowStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierThrowStatement(AIdentifierThrowStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierThrowStatement(AIdentifierThrowStatement node)
    {
        inAIdentifierThrowStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getThrow() != null)
        {
            node.getThrow().apply(this);
        }
        outAIdentifierThrowStatement(node);
    }

    public void inACatchTryStatement(ACatchTryStatement node)
    {
        defaultIn(node);
    }

    public void outACatchTryStatement(ACatchTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        inACatchTryStatement(node);
        {
            List<PCatchClause> copy = new ArrayList<PCatchClause>(node.getCatchClauses());
            Collections.reverse(copy);
            for(PCatchClause e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getTry() != null)
        {
            node.getTry().apply(this);
        }
        outACatchTryStatement(node);
    }

    public void inAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultIn(node);
    }

    public void outAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        inAFinallyTryStatement(node);
        if(node.getFinally() != null)
        {
            node.getFinally().apply(this);
        }
        {
            List<PCatchClause> copy = new ArrayList<PCatchClause>(node.getCatchClauses());
            Collections.reverse(copy);
            for(PCatchClause e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getTry() != null)
        {
            node.getTry().apply(this);
        }
        outAFinallyTryStatement(node);
    }

    public void inAStatementWithoutTrailingSubstatementStatementNoShortIf(AStatementWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAStatementWithoutTrailingSubstatementStatementNoShortIf(AStatementWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementWithoutTrailingSubstatementStatementNoShortIf(AStatementWithoutTrailingSubstatementStatementNoShortIf node)
    {
        inAStatementWithoutTrailingSubstatementStatementNoShortIf(node);
        if(node.getStatementWithoutTrailingSubstatement() != null)
        {
            node.getStatementWithoutTrailingSubstatement().apply(this);
        }
        outAStatementWithoutTrailingSubstatementStatementNoShortIf(node);
    }

    public void inALabeledStatementNoShortIfStatementNoShortIf(ALabeledStatementNoShortIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outALabeledStatementNoShortIfStatementNoShortIf(ALabeledStatementNoShortIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatementNoShortIfStatementNoShortIf(ALabeledStatementNoShortIfStatementNoShortIf node)
    {
        inALabeledStatementNoShortIfStatementNoShortIf(node);
        if(node.getLabeledStatementNoShortIf() != null)
        {
            node.getLabeledStatementNoShortIf().apply(this);
        }
        outALabeledStatementNoShortIfStatementNoShortIf(node);
    }

    public void inAIfThenElseStatementNoShortIfStatementNoShortIf(AIfThenElseStatementNoShortIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatementNoShortIfStatementNoShortIf(AIfThenElseStatementNoShortIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatementNoShortIfStatementNoShortIf(AIfThenElseStatementNoShortIfStatementNoShortIf node)
    {
        inAIfThenElseStatementNoShortIfStatementNoShortIf(node);
        if(node.getIfThenElseStatementNoShortIf() != null)
        {
            node.getIfThenElseStatementNoShortIf().apply(this);
        }
        outAIfThenElseStatementNoShortIfStatementNoShortIf(node);
    }

    public void inAWhileStatementNoShortIfStatementNoShortIf(AWhileStatementNoShortIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementNoShortIfStatementNoShortIf(AWhileStatementNoShortIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementNoShortIfStatementNoShortIf(AWhileStatementNoShortIfStatementNoShortIf node)
    {
        inAWhileStatementNoShortIfStatementNoShortIf(node);
        if(node.getWhileStatementNoShortIf() != null)
        {
            node.getWhileStatementNoShortIf().apply(this);
        }
        outAWhileStatementNoShortIfStatementNoShortIf(node);
    }

    public void inAForStatementNoShortIfStatementNoShortIf(AForStatementNoShortIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAForStatementNoShortIfStatementNoShortIf(AForStatementNoShortIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatementNoShortIfStatementNoShortIf(AForStatementNoShortIfStatementNoShortIf node)
    {
        inAForStatementNoShortIfStatementNoShortIf(node);
        if(node.getForStatementNoShortIf() != null)
        {
            node.getForStatementNoShortIf().apply(this);
        }
        outAForStatementNoShortIfStatementNoShortIf(node);
    }

    public void inAEmptyBasicForStatement(AEmptyBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyBasicForStatement(AEmptyBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyBasicForStatement(AEmptyBasicForStatement node)
    {
        inAEmptyBasicForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAEmptyBasicForStatement(node);
    }

    public void inAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        inAExpressionBasicForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAExpressionBasicForStatement(node);
    }

    public void inAIdentifierBasicForStatement(AIdentifierBasicForStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierBasicForStatement(AIdentifierBasicForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierBasicForStatement(AIdentifierBasicForStatement node)
    {
        inAIdentifierBasicForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAIdentifierBasicForStatement(node);
    }

    public void inAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        inAPrimitiveExpressionEnhancedForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAPrimitiveExpressionEnhancedForStatement(node);
    }

    public void inAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        inAPrimitiveIdentifierEnhancedForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAPrimitiveIdentifierEnhancedForStatement(node);
    }

    public void inAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        inAReferenceExpressionEnhancedForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAReferenceExpressionEnhancedForStatement(node);
    }

    public void inAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        inAReferenceIdentifierEnhancedForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier3() != null)
        {
            node.getIdentifier3().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            Collections.reverse(copy);
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAReferenceIdentifierEnhancedForStatement(node);
    }

    public void inAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        inAMjDescvarExpressionEnhancedForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAMjDescvarExpressionEnhancedForStatement(node);
    }

    public void inAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        inAMjDescvarIdentifierEnhancedForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAMjDescvarIdentifierEnhancedForStatement(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        inAFloatingPointLiteral(node);
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        outAFloatingPointLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inACharacterLiteral(ACharacterLiteral node)
    {
        defaultIn(node);
    }

    public void outACharacterLiteral(ACharacterLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        inACharacterLiteral(node);
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        outACharacterLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inANullLiteral(ANullLiteral node)
    {
        defaultIn(node);
    }

    public void outANullLiteral(ANullLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullLiteral(ANullLiteral node)
    {
        inANullLiteral(node);
        if(node.getNullLiteral() != null)
        {
            node.getNullLiteral().apply(this);
        }
        outANullLiteral(node);
    }

    public void inASimpleClassInstanceCreationExpression(ASimpleClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleClassInstanceCreationExpression(ASimpleClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleClassInstanceCreationExpression(ASimpleClassInstanceCreationExpression node)
    {
        inASimpleClassInstanceCreationExpression(node);
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTypeArguments2() != null)
        {
            node.getTypeArguments2().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeArguments1() != null)
        {
            node.getTypeArguments1().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outASimpleClassInstanceCreationExpression(node);
    }

    public void inAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryClassInstanceCreationExpression(APrimaryClassInstanceCreationExpression node)
    {
        inAPrimaryClassInstanceCreationExpression(node);
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTypeArguments2() != null)
        {
            node.getTypeArguments2().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeArguments1() != null)
        {
            node.getTypeArguments1().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryClassInstanceCreationExpression(node);
    }

    public void inAIdentifierClassInstanceCreationExpression(AIdentifierClassInstanceCreationExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierClassInstanceCreationExpression(AIdentifierClassInstanceCreationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierClassInstanceCreationExpression(AIdentifierClassInstanceCreationExpression node)
    {
        inAIdentifierClassInstanceCreationExpression(node);
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTypeArguments2() != null)
        {
            node.getTypeArguments2().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getTypeArguments1() != null)
        {
            node.getTypeArguments1().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAIdentifierClassInstanceCreationExpression(node);
    }

    public void inASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        inASimpleMethodInvocation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleMethodInvocation(node);
    }

    public void inAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        inAPrimaryMethodInvocation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryMethodInvocation(node);
    }

    public void inASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        inASuperMethodInvocation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        outASuperMethodInvocation(node);
    }

    public void inAClassNameMethodInvocation(AClassNameMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAClassNameMethodInvocation(AClassNameMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassNameMethodInvocation(AClassNameMethodInvocation node)
    {
        inAClassNameMethodInvocation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getDot2() != null)
        {
            node.getDot2().apply(this);
        }
        if(node.getSuperToken() != null)
        {
            node.getSuperToken().apply(this);
        }
        if(node.getDot1() != null)
        {
            node.getDot1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAClassNameMethodInvocation(node);
    }

    public void inATypeNameMethodInvocation(ATypeNameMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outATypeNameMethodInvocation(ATypeNameMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeNameMethodInvocation(ATypeNameMethodInvocation node)
    {
        inATypeNameMethodInvocation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getNonWildTypeArguments() != null)
        {
            node.getNonWildTypeArguments().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outATypeNameMethodInvocation(node);
    }

    public void inAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        inAMjPreDefinedMethodsMethodInvocation(node);
        if(node.getMatrixPredefinedMethods() != null)
        {
            node.getMatrixPredefinedMethods().apply(this);
        }
        outAMjPreDefinedMethodsMethodInvocation(node);
    }

    public void inAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDimExpr(AExpressionDimExpr node)
    {
        inAExpressionDimExpr(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        outAExpressionDimExpr(node);
    }

    public void inAIdentifierDimExpr(AIdentifierDimExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDimExpr(AIdentifierDimExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierDimExpr(AIdentifierDimExpr node)
    {
        inAIdentifierDimExpr(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        outAIdentifierDimExpr(node);
    }

    public void inADim(ADim node)
    {
        defaultIn(node);
    }

    public void outADim(ADim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADim(ADim node)
    {
        inADim(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        outADim(node);
    }

    public void inASimpleRelationalExpression(ASimpleRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleRelationalExpression(ASimpleRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleRelationalExpression(ASimpleRelationalExpression node)
    {
        inASimpleRelationalExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outASimpleRelationalExpression(node);
    }

    public void inALtShShRelationalExpression(ALtShShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALtShShRelationalExpression(ALtShShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtShShRelationalExpression(ALtShShRelationalExpression node)
    {
        inALtShShRelationalExpression(node);
        if(node.getShiftExpression2() != null)
        {
            node.getShiftExpression2().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getShiftExpression1() != null)
        {
            node.getShiftExpression1().apply(this);
        }
        outALtShShRelationalExpression(node);
    }

    public void inALtShIdRelationalExpression(ALtShIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALtShIdRelationalExpression(ALtShIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtShIdRelationalExpression(ALtShIdRelationalExpression node)
    {
        inALtShIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outALtShIdRelationalExpression(node);
    }

    public void inALtIdShRelationalExpression(ALtIdShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALtIdShRelationalExpression(ALtIdShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtIdShRelationalExpression(ALtIdShRelationalExpression node)
    {
        inALtIdShRelationalExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALtIdShRelationalExpression(node);
    }

    public void inALtIdIdRelationalExpression(ALtIdIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALtIdIdRelationalExpression(ALtIdIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtIdIdRelationalExpression(ALtIdIdRelationalExpression node)
    {
        inALtIdIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outALtIdIdRelationalExpression(node);
    }

    public void inAGtShShRelationalExpression(AGtShShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGtShShRelationalExpression(AGtShShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtShShRelationalExpression(AGtShShRelationalExpression node)
    {
        inAGtShShRelationalExpression(node);
        if(node.getShiftExpression2() != null)
        {
            node.getShiftExpression2().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getShiftExpression1() != null)
        {
            node.getShiftExpression1().apply(this);
        }
        outAGtShShRelationalExpression(node);
    }

    public void inAGtShIdRelationalExpression(AGtShIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGtShIdRelationalExpression(AGtShIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtShIdRelationalExpression(AGtShIdRelationalExpression node)
    {
        inAGtShIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAGtShIdRelationalExpression(node);
    }

    public void inAGtIdShRelationalExpression(AGtIdShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGtIdShRelationalExpression(AGtIdShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtIdShRelationalExpression(AGtIdShRelationalExpression node)
    {
        inAGtIdShRelationalExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAGtIdShRelationalExpression(node);
    }

    public void inAGtIdIdRelationalExpression(AGtIdIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGtIdIdRelationalExpression(AGtIdIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtIdIdRelationalExpression(AGtIdIdRelationalExpression node)
    {
        inAGtIdIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAGtIdIdRelationalExpression(node);
    }

    public void inALteqShShRelationalExpression(ALteqShShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALteqShShRelationalExpression(ALteqShShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqShShRelationalExpression(ALteqShShRelationalExpression node)
    {
        inALteqShShRelationalExpression(node);
        if(node.getShiftExpression2() != null)
        {
            node.getShiftExpression2().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getShiftExpression1() != null)
        {
            node.getShiftExpression1().apply(this);
        }
        outALteqShShRelationalExpression(node);
    }

    public void inALteqShIdRelationalExpression(ALteqShIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALteqShIdRelationalExpression(ALteqShIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqShIdRelationalExpression(ALteqShIdRelationalExpression node)
    {
        inALteqShIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outALteqShIdRelationalExpression(node);
    }

    public void inALteqIdShRelationalExpression(ALteqIdShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALteqIdShRelationalExpression(ALteqIdShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqIdShRelationalExpression(ALteqIdShRelationalExpression node)
    {
        inALteqIdShRelationalExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALteqIdShRelationalExpression(node);
    }

    public void inALteqIdIdRelationalExpression(ALteqIdIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALteqIdIdRelationalExpression(ALteqIdIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqIdIdRelationalExpression(ALteqIdIdRelationalExpression node)
    {
        inALteqIdIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outALteqIdIdRelationalExpression(node);
    }

    public void inAGteqShShRelationalExpression(AGteqShShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqShShRelationalExpression(AGteqShShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqShShRelationalExpression(AGteqShShRelationalExpression node)
    {
        inAGteqShShRelationalExpression(node);
        if(node.getShiftExpression2() != null)
        {
            node.getShiftExpression2().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getShiftExpression1() != null)
        {
            node.getShiftExpression1().apply(this);
        }
        outAGteqShShRelationalExpression(node);
    }

    public void inAGteqShIdRelationalExpression(AGteqShIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqShIdRelationalExpression(AGteqShIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqShIdRelationalExpression(AGteqShIdRelationalExpression node)
    {
        inAGteqShIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAGteqShIdRelationalExpression(node);
    }

    public void inAGteqIdShRelationalExpression(AGteqIdShRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqIdShRelationalExpression(AGteqIdShRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqIdShRelationalExpression(AGteqIdShRelationalExpression node)
    {
        inAGteqIdShRelationalExpression(node);
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAGteqIdShRelationalExpression(node);
    }

    public void inAGteqIdIdRelationalExpression(AGteqIdIdRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqIdIdRelationalExpression(AGteqIdIdRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqIdIdRelationalExpression(AGteqIdIdRelationalExpression node)
    {
        inAGteqIdIdRelationalExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAGteqIdIdRelationalExpression(node);
    }

    public void inAInstanceofShPrimitiveRelationalExpression(AInstanceofShPrimitiveRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAInstanceofShPrimitiveRelationalExpression(AInstanceofShPrimitiveRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofShPrimitiveRelationalExpression(AInstanceofShPrimitiveRelationalExpression node)
    {
        inAInstanceofShPrimitiveRelationalExpression(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAInstanceofShPrimitiveRelationalExpression(node);
    }

    public void inAInstanceofShReferenceRelationalExpression(AInstanceofShReferenceRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAInstanceofShReferenceRelationalExpression(AInstanceofShReferenceRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofShReferenceRelationalExpression(AInstanceofShReferenceRelationalExpression node)
    {
        inAInstanceofShReferenceRelationalExpression(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAInstanceofShReferenceRelationalExpression(node);
    }

    public void inAInstanceofIdPrimitiveRelationalExpression(AInstanceofIdPrimitiveRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAInstanceofIdPrimitiveRelationalExpression(AInstanceofIdPrimitiveRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofIdPrimitiveRelationalExpression(AInstanceofIdPrimitiveRelationalExpression node)
    {
        inAInstanceofIdPrimitiveRelationalExpression(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAInstanceofIdPrimitiveRelationalExpression(node);
    }

    public void inAInstanceofIdReferenceRelationalExpression(AInstanceofIdReferenceRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAInstanceofIdReferenceRelationalExpression(AInstanceofIdReferenceRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofIdReferenceRelationalExpression(AInstanceofIdReferenceRelationalExpression node)
    {
        inAInstanceofIdReferenceRelationalExpression(node);
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAInstanceofIdReferenceRelationalExpression(node);
    }

    public void inAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        inAAssignmentStatementExpression(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStatementExpression(node);
    }

    public void inAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        inAPreIncrementStatementExpression(node);
        if(node.getPreIncrementExpression() != null)
        {
            node.getPreIncrementExpression().apply(this);
        }
        outAPreIncrementStatementExpression(node);
    }

    public void inAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        inAPreDecrementStatementExpression(node);
        if(node.getPreDecrementExpression() != null)
        {
            node.getPreDecrementExpression().apply(this);
        }
        outAPreDecrementStatementExpression(node);
    }

    public void inAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        inAPostIncrementStatementExpression(node);
        if(node.getPostIncrementExpression() != null)
        {
            node.getPostIncrementExpression().apply(this);
        }
        outAPostIncrementStatementExpression(node);
    }

    public void inAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        inAPostDecrementStatementExpression(node);
        if(node.getPostDecrementExpression() != null)
        {
            node.getPostDecrementExpression().apply(this);
        }
        outAPostDecrementStatementExpression(node);
    }

    public void inAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        inAMethodInvocationStatementExpression(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodInvocationStatementExpression(node);
    }

    public void inAInstanceCreationStatementExpression(AInstanceCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAInstanceCreationStatementExpression(AInstanceCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceCreationStatementExpression(AInstanceCreationStatementExpression node)
    {
        inAInstanceCreationStatementExpression(node);
        if(node.getClassInstanceCreationExpression() != null)
        {
            node.getClassInstanceCreationExpression().apply(this);
        }
        outAInstanceCreationStatementExpression(node);
    }

    public void inAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        inAMjMatrixAccessStatementExpression(node);
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        outAMjMatrixAccessStatementExpression(node);
    }

    public void inAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        inAMjSetCreationStatementExpression(node);
        if(node.getSetInstanceCreation() != null)
        {
            node.getSetInstanceCreation().apply(this);
        }
        outAMjSetCreationStatementExpression(node);
    }

    public void inAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        inAMjNewNameSetCreationStatementExpression(node);
        if(node.getNewNameSetInstanceCreation() != null)
        {
            node.getNewNameSetInstanceCreation().apply(this);
        }
        outAMjNewNameSetCreationStatementExpression(node);
    }

    public void inAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        inAMjSubsetCreationStatementExpression(node);
        if(node.getSubsetCreation() != null)
        {
            node.getSubsetCreation().apply(this);
        }
        outAMjSubsetCreationStatementExpression(node);
    }

    public void inASwitchBlock(ASwitchBlock node)
    {
        defaultIn(node);
    }

    public void outASwitchBlock(ASwitchBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlock(ASwitchBlock node)
    {
        inASwitchBlock(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        {
            List<PSwitchLabel> copy = new ArrayList<PSwitchLabel>(node.getSwitchLabels());
            Collections.reverse(copy);
            for(PSwitchLabel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSwitchBlockStatementGroup> copy = new ArrayList<PSwitchBlockStatementGroup>(node.getSwitchBlockStatementGroups());
            Collections.reverse(copy);
            for(PSwitchBlockStatementGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outASwitchBlock(node);
    }

    public void inACatchClause(ACatchClause node)
    {
        defaultIn(node);
    }

    public void outACatchClause(ACatchClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatchClause(ACatchClause node)
    {
        inACatchClause(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCatch() != null)
        {
            node.getCatch().apply(this);
        }
        outACatchClause(node);
    }

    public void inAFinally(AFinally node)
    {
        defaultIn(node);
    }

    public void outAFinally(AFinally node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinally(AFinally node)
    {
        inAFinally(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getFinallyToken() != null)
        {
            node.getFinallyToken().apply(this);
        }
        outAFinally(node);
    }

    public void inALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        inALabeledStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALabeledStatementNoShortIf(node);
    }

    public void inAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        inAExpressionIfThenElseStatementNoShortIf(node);
        if(node.getStatementNoShortIf2() != null)
        {
            node.getStatementNoShortIf2().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatementNoShortIf1() != null)
        {
            node.getStatementNoShortIf1().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAExpressionIfThenElseStatementNoShortIf(node);
    }

    public void inAIdentifierIfThenElseStatementNoShortIf(AIdentifierIfThenElseStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIfThenElseStatementNoShortIf(AIdentifierIfThenElseStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierIfThenElseStatementNoShortIf(AIdentifierIfThenElseStatementNoShortIf node)
    {
        inAIdentifierIfThenElseStatementNoShortIf(node);
        if(node.getStatementNoShortIf2() != null)
        {
            node.getStatementNoShortIf2().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatementNoShortIf1() != null)
        {
            node.getStatementNoShortIf1().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIdentifierIfThenElseStatementNoShortIf(node);
    }

    public void inAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        inAExpressionWhileStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAExpressionWhileStatementNoShortIf(node);
    }

    public void inAIdentifierWhileStatementNoShortIf(AIdentifierWhileStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIdentifierWhileStatementNoShortIf(AIdentifierWhileStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierWhileStatementNoShortIf(AIdentifierWhileStatementNoShortIf node)
    {
        inAIdentifierWhileStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIdentifierWhileStatementNoShortIf(node);
    }

    public void inAEmptyForStatementNoShortIf(AEmptyForStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAEmptyForStatementNoShortIf(AEmptyForStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyForStatementNoShortIf(AEmptyForStatementNoShortIf node)
    {
        inAEmptyForStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAEmptyForStatementNoShortIf(node);
    }

    public void inAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        inAExpressionForStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAExpressionForStatementNoShortIf(node);
    }

    public void inAIdentifierForStatementNoShortIf(AIdentifierForStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIdentifierForStatementNoShortIf(AIdentifierForStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierForStatementNoShortIf(AIdentifierForStatementNoShortIf node)
    {
        inAIdentifierForStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getForUpdate() != null)
        {
            node.getForUpdate().apply(this);
        }
        if(node.getSemi2() != null)
        {
            node.getSemi2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi1() != null)
        {
            node.getSemi1().apply(this);
        }
        if(node.getForInit() != null)
        {
            node.getForInit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAIdentifierForStatementNoShortIf(node);
    }

    public void inAStatementForInit(AStatementForInit node)
    {
        defaultIn(node);
    }

    public void outAStatementForInit(AStatementForInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementForInit(AStatementForInit node)
    {
        inAStatementForInit(node);
        if(node.getStatementExpressionList() != null)
        {
            node.getStatementExpressionList().apply(this);
        }
        outAStatementForInit(node);
    }

    public void inAVariableDeclarationForInit(AVariableDeclarationForInit node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationForInit(AVariableDeclarationForInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationForInit(AVariableDeclarationForInit node)
    {
        inAVariableDeclarationForInit(node);
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        outAVariableDeclarationForInit(node);
    }

    public void inAForUpdate(AForUpdate node)
    {
        defaultIn(node);
    }

    public void outAForUpdate(AForUpdate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForUpdate(AForUpdate node)
    {
        inAForUpdate(node);
        if(node.getStatementExpressionList() != null)
        {
            node.getStatementExpressionList().apply(this);
        }
        outAForUpdate(node);
    }

    public void inASimpleShiftExpression(ASimpleShiftExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleShiftExpression(ASimpleShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleShiftExpression(ASimpleShiftExpression node)
    {
        inASimpleShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outASimpleShiftExpression(node);
    }

    public void inAShlShAdShiftExpression(AShlShAdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShlShAdShiftExpression(AShlShAdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlShAdShiftExpression(AShlShAdShiftExpression node)
    {
        inAShlShAdShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAShlShAdShiftExpression(node);
    }

    public void inAShlShIdShiftExpression(AShlShIdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShlShIdShiftExpression(AShlShIdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlShIdShiftExpression(AShlShIdShiftExpression node)
    {
        inAShlShIdShiftExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAShlShIdShiftExpression(node);
    }

    public void inAShlIdAdShiftExpression(AShlIdAdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShlIdAdShiftExpression(AShlIdAdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlIdAdShiftExpression(AShlIdAdShiftExpression node)
    {
        inAShlIdAdShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAShlIdAdShiftExpression(node);
    }

    public void inAShlIdIdShiftExpression(AShlIdIdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShlIdIdShiftExpression(AShlIdIdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShlIdIdShiftExpression(AShlIdIdShiftExpression node)
    {
        inAShlIdIdShiftExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getShl() != null)
        {
            node.getShl().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAShlIdIdShiftExpression(node);
    }

    public void inAShrShAdShiftExpression(AShrShAdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShrShAdShiftExpression(AShrShAdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrShAdShiftExpression(AShrShAdShiftExpression node)
    {
        inAShrShAdShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAShrShAdShiftExpression(node);
    }

    public void inAShrShIdShiftExpression(AShrShIdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShrShIdShiftExpression(AShrShIdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrShIdShiftExpression(AShrShIdShiftExpression node)
    {
        inAShrShIdShiftExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAShrShIdShiftExpression(node);
    }

    public void inAShrIdAdShiftExpression(AShrIdAdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShrIdAdShiftExpression(AShrIdAdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrIdAdShiftExpression(AShrIdAdShiftExpression node)
    {
        inAShrIdAdShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAShrIdAdShiftExpression(node);
    }

    public void inAShrIdIdShiftExpression(AShrIdIdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAShrIdIdShiftExpression(AShrIdIdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrIdIdShiftExpression(AShrIdIdShiftExpression node)
    {
        inAShrIdIdShiftExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAShrIdIdShiftExpression(node);
    }

    public void inAUshrShAdShiftExpression(AUshrShAdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAUshrShAdShiftExpression(AUshrShAdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrShAdShiftExpression(AUshrShAdShiftExpression node)
    {
        inAUshrShAdShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAUshrShAdShiftExpression(node);
    }

    public void inAUshrShIdShiftExpression(AUshrShIdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAUshrShIdShiftExpression(AUshrShIdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrShIdShiftExpression(AUshrShIdShiftExpression node)
    {
        inAUshrShIdShiftExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        if(node.getShiftExpression() != null)
        {
            node.getShiftExpression().apply(this);
        }
        outAUshrShIdShiftExpression(node);
    }

    public void inAUshrIdAdShiftExpression(AUshrIdAdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAUshrIdAdShiftExpression(AUshrIdAdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrIdAdShiftExpression(AUshrIdAdShiftExpression node)
    {
        inAUshrIdAdShiftExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUshrIdAdShiftExpression(node);
    }

    public void inAUshrIdIdShiftExpression(AUshrIdIdShiftExpression node)
    {
        defaultIn(node);
    }

    public void outAUshrIdIdShiftExpression(AUshrIdIdShiftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrIdIdShiftExpression(AUshrIdIdShiftExpression node)
    {
        inAUshrIdIdShiftExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAUshrIdIdShiftExpression(node);
    }

    public void inAExpressionPreIncrementExpression(AExpressionPreIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionPreIncrementExpression(AExpressionPreIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPreIncrementExpression(AExpressionPreIncrementExpression node)
    {
        inAExpressionPreIncrementExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        outAExpressionPreIncrementExpression(node);
    }

    public void inAIdentifierPreIncrementExpression(AIdentifierPreIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierPreIncrementExpression(AIdentifierPreIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierPreIncrementExpression(AIdentifierPreIncrementExpression node)
    {
        inAIdentifierPreIncrementExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        outAIdentifierPreIncrementExpression(node);
    }

    public void inAExpressionPreDecrementExpression(AExpressionPreDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionPreDecrementExpression(AExpressionPreDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPreDecrementExpression(AExpressionPreDecrementExpression node)
    {
        inAExpressionPreDecrementExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        outAExpressionPreDecrementExpression(node);
    }

    public void inAIdentifierPreDecrementExpression(AIdentifierPreDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierPreDecrementExpression(AIdentifierPreDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierPreDecrementExpression(AIdentifierPreDecrementExpression node)
    {
        inAIdentifierPreDecrementExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        outAIdentifierPreDecrementExpression(node);
    }

    public void inAExpressionPostIncrementExpression(AExpressionPostIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionPostIncrementExpression(AExpressionPostIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPostIncrementExpression(AExpressionPostIncrementExpression node)
    {
        inAExpressionPostIncrementExpression(node);
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        outAExpressionPostIncrementExpression(node);
    }

    public void inAIdentifierPostIncrementExpression(AIdentifierPostIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierPostIncrementExpression(AIdentifierPostIncrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierPostIncrementExpression(AIdentifierPostIncrementExpression node)
    {
        inAIdentifierPostIncrementExpression(node);
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierPostIncrementExpression(node);
    }

    public void inAExpressionPostDecrementExpression(AExpressionPostDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionPostDecrementExpression(AExpressionPostDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPostDecrementExpression(AExpressionPostDecrementExpression node)
    {
        inAExpressionPostDecrementExpression(node);
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        outAExpressionPostDecrementExpression(node);
    }

    public void inAIdentifierPostDecrementExpression(AIdentifierPostDecrementExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierPostDecrementExpression(AIdentifierPostDecrementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierPostDecrementExpression(AIdentifierPostDecrementExpression node)
    {
        inAIdentifierPostDecrementExpression(node);
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierPostDecrementExpression(node);
    }

    public void inASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultIn(node);
    }

    public void outASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        inASwitchBlockStatementGroup(node);
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatements());
            Collections.reverse(copy);
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSwitchLabel> copy = new ArrayList<PSwitchLabel>(node.getSwitchLabels());
            Collections.reverse(copy);
            for(PSwitchLabel e : copy)
            {
                e.apply(this);
            }
        }
        outASwitchBlockStatementGroup(node);
    }

    public void inAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        inAExpressionSwitchLabel(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAExpressionSwitchLabel(node);
    }

    public void inAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        inAIdentifierSwitchLabel(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAIdentifierSwitchLabel(node);
    }

    public void inADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        inADefaultSwitchLabel(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        outADefaultSwitchLabel(node);
    }

    public void inAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        inAMjElementSwitchLabel(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAMjElementSwitchLabel(node);
    }

    public void inAOneStatementExpressionList(AOneStatementExpressionList node)
    {
        defaultIn(node);
    }

    public void outAOneStatementExpressionList(AOneStatementExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneStatementExpressionList(AOneStatementExpressionList node)
    {
        inAOneStatementExpressionList(node);
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        outAOneStatementExpressionList(node);
    }

    public void inAManyStatementExpressionList(AManyStatementExpressionList node)
    {
        defaultIn(node);
    }

    public void outAManyStatementExpressionList(AManyStatementExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyStatementExpressionList(AManyStatementExpressionList node)
    {
        inAManyStatementExpressionList(node);
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStatementExpressionList() != null)
        {
            node.getStatementExpressionList().apply(this);
        }
        outAManyStatementExpressionList(node);
    }

    public void inASimpleAdditiveExpression(ASimpleAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleAdditiveExpression(ASimpleAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAdditiveExpression(ASimpleAdditiveExpression node)
    {
        inASimpleAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outASimpleAdditiveExpression(node);
    }

    public void inAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        inAPlusAdMuAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAPlusAdMuAdditiveExpression(node);
    }

    public void inAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        inAPlusAdIdAdditiveExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAPlusAdIdAdditiveExpression(node);
    }

    public void inAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        inAPlusIdMuAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPlusIdMuAdditiveExpression(node);
    }

    public void inAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        inAPlusIdIdAdditiveExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAPlusIdIdAdditiveExpression(node);
    }

    public void inAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        inAMinusAdMuAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAMinusAdMuAdditiveExpression(node);
    }

    public void inAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        inAMinusAdIdAdditiveExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAMinusAdIdAdditiveExpression(node);
    }

    public void inAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        inAMinusIdMuAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMinusIdMuAdditiveExpression(node);
    }

    public void inAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        inAMinusIdIdAdditiveExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAMinusIdIdAdditiveExpression(node);
    }

    public void inAPreIncrementUnaryExpression(APreIncrementUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPreIncrementUnaryExpression(APreIncrementUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreIncrementUnaryExpression(APreIncrementUnaryExpression node)
    {
        inAPreIncrementUnaryExpression(node);
        if(node.getPreIncrementExpression() != null)
        {
            node.getPreIncrementExpression().apply(this);
        }
        outAPreIncrementUnaryExpression(node);
    }

    public void inAPreDecrementUnaryExpression(APreDecrementUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPreDecrementUnaryExpression(APreDecrementUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreDecrementUnaryExpression(APreDecrementUnaryExpression node)
    {
        inAPreDecrementUnaryExpression(node);
        if(node.getPreDecrementExpression() != null)
        {
            node.getPreDecrementExpression().apply(this);
        }
        outAPreDecrementUnaryExpression(node);
    }

    public void inAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        inAPlusExpressionUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusExpressionUnaryExpression(node);
    }

    public void inAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        inAPlusIdentifierUnaryExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusIdentifierUnaryExpression(node);
    }

    public void inAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        inAMinusExpressionUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusExpressionUnaryExpression(node);
    }

    public void inAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        inAMinusIdentifierUnaryExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusIdentifierUnaryExpression(node);
    }

    public void inAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        inAUnaryUnaryExpression(node);
        if(node.getUnaryExpressionNotPlusMinus() != null)
        {
            node.getUnaryExpressionNotPlusMinus().apply(this);
        }
        outAUnaryUnaryExpression(node);
    }

    public void inAPostIncrementPostfixExpression(APostIncrementPostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAPostIncrementPostfixExpression(APostIncrementPostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostIncrementPostfixExpression(APostIncrementPostfixExpression node)
    {
        inAPostIncrementPostfixExpression(node);
        if(node.getPostIncrementExpression() != null)
        {
            node.getPostIncrementExpression().apply(this);
        }
        outAPostIncrementPostfixExpression(node);
    }

    public void inAPostDecrementPostfixExpression(APostDecrementPostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAPostDecrementPostfixExpression(APostDecrementPostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostDecrementPostfixExpression(APostDecrementPostfixExpression node)
    {
        inAPostDecrementPostfixExpression(node);
        if(node.getPostDecrementExpression() != null)
        {
            node.getPostDecrementExpression().apply(this);
        }
        outAPostDecrementPostfixExpression(node);
    }

    public void inAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        inAMjPassThroughPostfixExpression(node);
        if(node.getMpPrePrimary() != null)
        {
            node.getMpPrePrimary().apply(this);
        }
        outAMjPassThroughPostfixExpression(node);
    }

    public void inAConstantExpression(AConstantExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantExpression(AConstantExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpression(AConstantExpression node)
    {
        inAConstantExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAConstantExpression(node);
    }

    public void inASimpleMultiplicativeExpression(ASimpleMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleMultiplicativeExpression(ASimpleMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMultiplicativeExpression(ASimpleMultiplicativeExpression node)
    {
        inASimpleMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outASimpleMultiplicativeExpression(node);
    }

    public void inAStarMuUnMultiplicativeExpression(AStarMuUnMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAStarMuUnMultiplicativeExpression(AStarMuUnMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarMuUnMultiplicativeExpression(AStarMuUnMultiplicativeExpression node)
    {
        inAStarMuUnMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAStarMuUnMultiplicativeExpression(node);
    }

    public void inAStarMuIdMultiplicativeExpression(AStarMuIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAStarMuIdMultiplicativeExpression(AStarMuIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarMuIdMultiplicativeExpression(AStarMuIdMultiplicativeExpression node)
    {
        inAStarMuIdMultiplicativeExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAStarMuIdMultiplicativeExpression(node);
    }

    public void inAStarIdUnMultiplicativeExpression(AStarIdUnMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAStarIdUnMultiplicativeExpression(AStarIdUnMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarIdUnMultiplicativeExpression(AStarIdUnMultiplicativeExpression node)
    {
        inAStarIdUnMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStarIdUnMultiplicativeExpression(node);
    }

    public void inAStarIdIdMultiplicativeExpression(AStarIdIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAStarIdIdMultiplicativeExpression(AStarIdIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarIdIdMultiplicativeExpression(AStarIdIdMultiplicativeExpression node)
    {
        inAStarIdIdMultiplicativeExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAStarIdIdMultiplicativeExpression(node);
    }

    public void inASlashMuUnMultiplicativeExpression(ASlashMuUnMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outASlashMuUnMultiplicativeExpression(ASlashMuUnMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashMuUnMultiplicativeExpression(ASlashMuUnMultiplicativeExpression node)
    {
        inASlashMuUnMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outASlashMuUnMultiplicativeExpression(node);
    }

    public void inASlashMuIdMultiplicativeExpression(ASlashMuIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outASlashMuIdMultiplicativeExpression(ASlashMuIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashMuIdMultiplicativeExpression(ASlashMuIdMultiplicativeExpression node)
    {
        inASlashMuIdMultiplicativeExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outASlashMuIdMultiplicativeExpression(node);
    }

    public void inASlashIdUnMultiplicativeExpression(ASlashIdUnMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outASlashIdUnMultiplicativeExpression(ASlashIdUnMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashIdUnMultiplicativeExpression(ASlashIdUnMultiplicativeExpression node)
    {
        inASlashIdUnMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASlashIdUnMultiplicativeExpression(node);
    }

    public void inASlashIdIdMultiplicativeExpression(ASlashIdIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outASlashIdIdMultiplicativeExpression(ASlashIdIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashIdIdMultiplicativeExpression(ASlashIdIdMultiplicativeExpression node)
    {
        inASlashIdIdMultiplicativeExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outASlashIdIdMultiplicativeExpression(node);
    }

    public void inAPercentMuUnMultiplicativeExpression(APercentMuUnMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPercentMuUnMultiplicativeExpression(APercentMuUnMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentMuUnMultiplicativeExpression(APercentMuUnMultiplicativeExpression node)
    {
        inAPercentMuUnMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPercentMuUnMultiplicativeExpression(node);
    }

    public void inAPercentMuIdMultiplicativeExpression(APercentMuIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPercentMuIdMultiplicativeExpression(APercentMuIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentMuIdMultiplicativeExpression(APercentMuIdMultiplicativeExpression node)
    {
        inAPercentMuIdMultiplicativeExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPercentMuIdMultiplicativeExpression(node);
    }

    public void inAPercentIdUnMultiplicativeExpression(APercentIdUnMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPercentIdUnMultiplicativeExpression(APercentIdUnMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentIdUnMultiplicativeExpression(APercentIdUnMultiplicativeExpression node)
    {
        inAPercentIdUnMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPercentIdUnMultiplicativeExpression(node);
    }

    public void inAPercentIdIdMultiplicativeExpression(APercentIdIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPercentIdIdMultiplicativeExpression(APercentIdIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentIdIdMultiplicativeExpression(APercentIdIdMultiplicativeExpression node)
    {
        inAPercentIdIdMultiplicativeExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        outAPercentIdIdMultiplicativeExpression(node);
    }

    public void inAPostfixUnaryExpressionNotPlusMinus(APostfixUnaryExpressionNotPlusMinus node)
    {
        defaultIn(node);
    }

    public void outAPostfixUnaryExpressionNotPlusMinus(APostfixUnaryExpressionNotPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostfixUnaryExpressionNotPlusMinus(APostfixUnaryExpressionNotPlusMinus node)
    {
        inAPostfixUnaryExpressionNotPlusMinus(node);
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        outAPostfixUnaryExpressionNotPlusMinus(node);
    }

    public void inATildeExpressionUnaryExpressionNotPlusMinus(ATildeExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultIn(node);
    }

    public void outATildeExpressionUnaryExpressionNotPlusMinus(ATildeExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATildeExpressionUnaryExpressionNotPlusMinus(ATildeExpressionUnaryExpressionNotPlusMinus node)
    {
        inATildeExpressionUnaryExpressionNotPlusMinus(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getTilde() != null)
        {
            node.getTilde().apply(this);
        }
        outATildeExpressionUnaryExpressionNotPlusMinus(node);
    }

    public void inATildeIdentifierUnaryExpressionNotPlusMinus(ATildeIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultIn(node);
    }

    public void outATildeIdentifierUnaryExpressionNotPlusMinus(ATildeIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATildeIdentifierUnaryExpressionNotPlusMinus(ATildeIdentifierUnaryExpressionNotPlusMinus node)
    {
        inATildeIdentifierUnaryExpressionNotPlusMinus(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTilde() != null)
        {
            node.getTilde().apply(this);
        }
        outATildeIdentifierUnaryExpressionNotPlusMinus(node);
    }

    public void inAEmarkExpressionUnaryExpressionNotPlusMinus(AEmarkExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultIn(node);
    }

    public void outAEmarkExpressionUnaryExpressionNotPlusMinus(AEmarkExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmarkExpressionUnaryExpressionNotPlusMinus(AEmarkExpressionUnaryExpressionNotPlusMinus node)
    {
        inAEmarkExpressionUnaryExpressionNotPlusMinus(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getEmark() != null)
        {
            node.getEmark().apply(this);
        }
        outAEmarkExpressionUnaryExpressionNotPlusMinus(node);
    }

    public void inAEmarkIdentifierUnaryExpressionNotPlusMinus(AEmarkIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultIn(node);
    }

    public void outAEmarkIdentifierUnaryExpressionNotPlusMinus(AEmarkIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmarkIdentifierUnaryExpressionNotPlusMinus(AEmarkIdentifierUnaryExpressionNotPlusMinus node)
    {
        inAEmarkIdentifierUnaryExpressionNotPlusMinus(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEmark() != null)
        {
            node.getEmark().apply(this);
        }
        outAEmarkIdentifierUnaryExpressionNotPlusMinus(node);
    }

    public void inACastUnaryExpressionNotPlusMinus(ACastUnaryExpressionNotPlusMinus node)
    {
        defaultIn(node);
    }

    public void outACastUnaryExpressionNotPlusMinus(ACastUnaryExpressionNotPlusMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastUnaryExpressionNotPlusMinus(ACastUnaryExpressionNotPlusMinus node)
    {
        inACastUnaryExpressionNotPlusMinus(node);
        if(node.getCastExpression() != null)
        {
            node.getCastExpression().apply(this);
        }
        outACastUnaryExpressionNotPlusMinus(node);
    }

    public void inAPrimitiveExpressionCastExpression(APrimitiveExpressionCastExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveExpressionCastExpression(APrimitiveExpressionCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveExpressionCastExpression(APrimitiveExpressionCastExpression node)
    {
        inAPrimitiveExpressionCastExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPrimitiveExpressionCastExpression(node);
    }

    public void inAPrimitiveIdentifierCastExpression(APrimitiveIdentifierCastExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveIdentifierCastExpression(APrimitiveIdentifierCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveIdentifierCastExpression(APrimitiveIdentifierCastExpression node)
    {
        inAPrimitiveIdentifierCastExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPrimitiveIdentifierCastExpression(node);
    }

    public void inAReferenceExpressionCastExpression(AReferenceExpressionCastExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceExpressionCastExpression(AReferenceExpressionCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceExpressionCastExpression(AReferenceExpressionCastExpression node)
    {
        inAReferenceExpressionCastExpression(node);
        if(node.getUnaryExpressionNotPlusMinus() != null)
        {
            node.getUnaryExpressionNotPlusMinus().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAReferenceExpressionCastExpression(node);
    }

    public void inAReferenceIdentifierCastExpression(AReferenceIdentifierCastExpression node)
    {
        defaultIn(node);
    }

    public void outAReferenceIdentifierCastExpression(AReferenceIdentifierCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceIdentifierCastExpression(AReferenceIdentifierCastExpression node)
    {
        inAReferenceIdentifierCastExpression(node);
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            Collections.reverse(copy);
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            Collections.reverse(copy);
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAReferenceIdentifierCastExpression(node);
    }

    public void inAMjMatrixTypesExpressionCastExpression(AMjMatrixTypesExpressionCastExpression node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixTypesExpressionCastExpression(AMjMatrixTypesExpressionCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixTypesExpressionCastExpression(AMjMatrixTypesExpressionCastExpression node)
    {
        inAMjMatrixTypesExpressionCastExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpMatrixTypes() != null)
        {
            node.getMpMatrixTypes().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMjMatrixTypesExpressionCastExpression(node);
    }

    public void inAMjMatrixTypesMpOutsideIncludedPlusIdCastExpression(AMjMatrixTypesMpOutsideIncludedPlusIdCastExpression node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixTypesMpOutsideIncludedPlusIdCastExpression(AMjMatrixTypesMpOutsideIncludedPlusIdCastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixTypesMpOutsideIncludedPlusIdCastExpression(AMjMatrixTypesMpOutsideIncludedPlusIdCastExpression node)
    {
        inAMjMatrixTypesMpOutsideIncludedPlusIdCastExpression(node);
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            Collections.reverse(copy);
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpMatrixTypes() != null)
        {
            node.getMpMatrixTypes().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAMjMatrixTypesMpOutsideIncludedPlusIdCastExpression(node);
    }

    public void inAAbstractModifier(AAbstractModifier node)
    {
        defaultIn(node);
    }

    public void outAAbstractModifier(AAbstractModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractModifier(AAbstractModifier node)
    {
        inAAbstractModifier(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        outAAbstractModifier(node);
    }

    public void inAAnnotationModifier(AAnnotationModifier node)
    {
        defaultIn(node);
    }

    public void outAAnnotationModifier(AAnnotationModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        inAAnnotationModifier(node);
        if(node.getAnnotation() != null)
        {
            node.getAnnotation().apply(this);
        }
        outAAnnotationModifier(node);
    }

    public void inAFinalModifier(AFinalModifier node)
    {
        defaultIn(node);
    }

    public void outAFinalModifier(AFinalModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinalModifier(AFinalModifier node)
    {
        inAFinalModifier(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalModifier(node);
    }

    public void inANativeModifier(ANativeModifier node)
    {
        defaultIn(node);
    }

    public void outANativeModifier(ANativeModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativeModifier(ANativeModifier node)
    {
        inANativeModifier(node);
        if(node.getNative() != null)
        {
            node.getNative().apply(this);
        }
        outANativeModifier(node);
    }

    public void inAPrivateModifier(APrivateModifier node)
    {
        defaultIn(node);
    }

    public void outAPrivateModifier(APrivateModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivateModifier(APrivateModifier node)
    {
        inAPrivateModifier(node);
        if(node.getPrivate() != null)
        {
            node.getPrivate().apply(this);
        }
        outAPrivateModifier(node);
    }

    public void inAProtectedModifier(AProtectedModifier node)
    {
        defaultIn(node);
    }

    public void outAProtectedModifier(AProtectedModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProtectedModifier(AProtectedModifier node)
    {
        inAProtectedModifier(node);
        if(node.getProtected() != null)
        {
            node.getProtected().apply(this);
        }
        outAProtectedModifier(node);
    }

    public void inAPublicModifier(APublicModifier node)
    {
        defaultIn(node);
    }

    public void outAPublicModifier(APublicModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicModifier(APublicModifier node)
    {
        inAPublicModifier(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAPublicModifier(node);
    }

    public void inAStaticModifier(AStaticModifier node)
    {
        defaultIn(node);
    }

    public void outAStaticModifier(AStaticModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticModifier(AStaticModifier node)
    {
        inAStaticModifier(node);
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        outAStaticModifier(node);
    }

    public void inAStrictfpModifier(AStrictfpModifier node)
    {
        defaultIn(node);
    }

    public void outAStrictfpModifier(AStrictfpModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        inAStrictfpModifier(node);
        if(node.getStrictfp() != null)
        {
            node.getStrictfp().apply(this);
        }
        outAStrictfpModifier(node);
    }

    public void inASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultIn(node);
    }

    public void outASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        inASynchronizedModifier(node);
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outASynchronizedModifier(node);
    }

    public void inATransientModifier(ATransientModifier node)
    {
        defaultIn(node);
    }

    public void outATransientModifier(ATransientModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATransientModifier(ATransientModifier node)
    {
        inATransientModifier(node);
        if(node.getTransient() != null)
        {
            node.getTransient().apply(this);
        }
        outATransientModifier(node);
    }

    public void inAVolatileModifier(AVolatileModifier node)
    {
        defaultIn(node);
    }

    public void outAVolatileModifier(AVolatileModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVolatileModifier(AVolatileModifier node)
    {
        inAVolatileModifier(node);
        if(node.getVolatile() != null)
        {
            node.getVolatile().apply(this);
        }
        outAVolatileModifier(node);
    }

    public void inAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        defaultIn(node);
    }

    public void outAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        inAAdditionalIdentifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAAdditionalIdentifier(node);
    }

    public void inATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        inATrueBooleanLiteral(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanLiteral(node);
    }

    public void inAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        inAFalseBooleanLiteral(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanLiteral(node);
    }
}
