/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

package net.unconventionalthinking.hierarchy;

import net.unconventionalthinking.lang.ExecutionInfo;
import net.unconventionalthinking.matrix.AppControl_Base;
import net.unconventionalthinking.matrix.AppControl_Simple;
import net.unconventionalthinking.matrix.Exception_Descriptor;
import net.unconventionalthinking.matrix.MatrixControl;
import net.unconventionalthinking.matrix.SchemaControl;
import net.unconventionalthinking.matrix.symbols.Symbol;
import net.unconventionalthinking.matrix.symbols.SymbolControl;
import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.Map;



/**
 * NOTE: Very similar to the AppControl class generated by the Metacompiler!
 *
 * @author peterjoh
 */
public class HierarchyControl {

	public AppControl_Base  appControl;
	public SymbolControl    symbolControl;
	public SchemaControl    schemaControl;
	public MatrixControl    matrixControl;
	public ExecutionInfo    executionInfo;

    public HierarchySettings hierarchySettings;

	public Map<Symbol, Constructor> fieldSetTupleSpecialized_Constructor_Index;

    Map<String, Map<String, Object>> returnValuesMap_for_Methods_Index;

    /** This version called the during phase 1 of meta compilation, when there is no app control, or symbolControl */
    public HierarchyControl(HierarchySettings hierarchySettings) throws Exception_HierarchyCompiler {

        this.hierarchySettings = hierarchySettings;
        appControl = new AppControl_Simple();

		executionInfo = new ExecutionInfo();

		symbolControl = new SymbolControl();
		initialize_Symbols();

        appControl.executionInfo = executionInfo;
        appControl.symbolControl = symbolControl;
        try {
    		schemaControl = new SchemaControl(executionInfo, appControl);
        } catch (Exception e) {
            throw new Exception_HierarchyCompiler("Tried to create the schema control, but had an error", e);
        }
        
		fieldSetTupleSpecialized_Constructor_Index = schemaControl.get_FieldSetTupleSpecialized_Constructor_Index_byTypeSymbol();
        appControl.fieldSetTupleSpecialized_Constructor_Index = fieldSetTupleSpecialized_Constructor_Index;

		matrixControl = new MatrixControl(appControl);

        returnValuesMap_for_Methods_Index = new HashMap<String, Map<String, Object>>();

    }

    /**
     * Initialize from an existing appControl.
     * 
     * @param appControl
     * @throws Exception_HierarchyCompiler
     */
    public HierarchyControl(HierarchySettings hierarchySettings, AppControl_Base appControl) {

        this.hierarchySettings = hierarchySettings;

		executionInfo = appControl.getExecutionInfo();

		symbolControl = appControl.getSymbolControl();
        schemaControl = appControl.getSchemaControl();
		fieldSetTupleSpecialized_Constructor_Index = schemaControl.get_FieldSetTupleSpecialized_Constructor_Index_byTypeSymbol();
		matrixControl = appControl.getMatrixControl();

        returnValuesMap_for_Methods_Index = new HashMap<String, Map<String, Object>>();

    }



	/**
     * Symbol initializer
     */
	void initialize_Symbols() throws Exception_HierarchyCompiler {
		try {
			symbolControl.intialize_All_MPSymbols();

		} catch(Exception e) {
             throw new Exception_HierarchyCompiler("Tried to initialize the MP Symbols, but received an exception (see inner exception).", e);
		}

	}  //  end of symbol init





    
    /**
     * Create a new ret values Map for a method
     * @param methodName
     * @return
     */
    public Map<String, Object> returnValues_CreateNewMap_for(String methodName) {
        Map<String, Object> returnValues = new HashMap<String, Object>();
        returnValuesMap_for_Methods_Index.put(methodName, returnValues);
        
        return returnValues;

    }

    /**
     * get the existing parameter map for a method. If it doesn't already exist, create a new one for it.
     * This is useful for methods that are called multiple times in a row. You only want to create a return value's set once,
     * and for each successful method call, keep adding the return values to the same set.
     *
     * @param methodName
     * @return
     */
    public Map<String, Object> returnValues_getMap_for(String methodName) {

        Map<String, Object> returnValues = returnValuesMap_for_Methods_Index.get(methodName);
        return returnValues;
    }

    /**
     * get the existing parameter map for a method. If it doesn't already exist, create a new one for it.
     * This is useful for methods that are called multiple times in a row. You only want to create a return value's set once,
     * and for each successful method call, keep adding the return values to the same set.
     *
     * @param methodName
     * @return
     */
    public Map<String, Object> returnValues_getExistingOrCreateNewMap_for(String methodName) {

        Map<String, Object> returnValues = returnValuesMap_for_Methods_Index.get(methodName);

        if (returnValues != null)
            return returnValues;
        else {
            returnValues = new HashMap<String, Object>();
            returnValuesMap_for_Methods_Index.put(methodName, returnValues);

            return returnValues;
        }
    }


    /**
     * clear the existing parameter map for a method.
     *
     * @param methodName
     * @return
     */
    public void returnValues_clearMap_for(String methodName) {

        returnValuesMap_for_Methods_Index.get(methodName).clear();
    }
}
