/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

package net.unconventionalthinking.matrix.metacompiler.codegen;



import net.unconventionalthinking.lang.ExecutionInfo;
import net.unconventionalthinking.matrix.TestUtilities_FieldSetGenerator;
import net.unconventionalthinking.matrix.symbols.SymbolControl;
import net.unconventionalthinking.hierarchy.AppControl_Info;
import net.unconventionalthinking.hierarchy.Class_FileInfo;
import net.unconventionalthinking.hierarchy.HierarchyMetaCompilerUtilities_MetaCompiler;
import net.unconventionalthinking.hierarchy.HierarchySettings;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author peterjoh
 *
 *
 * *** The files generated by this test are used in the Hierarchy_GenerationTestProject's unit tests!!! ***
 *
 */
public class FieldSetTupleSpecialized_CodeGeneratorTest {

    private static ExecutionInfo executeInfo;
    private static SymbolControl symbolControl;
    private static HierarchySettings hierarchySettings;

    private static HierarchyMetaCompilerUtilities_MetaCompiler metaCompilerUtilities;

    private static TestUtilities_FieldSetGenerator fieldSet_TestCodeGenerator;

    private final static String matrixPackage = "net.unconventionalthinking.matrix";



    public FieldSetTupleSpecialized_CodeGeneratorTest() {
    }
/*
 *
 *  UNUSED TEST - keep around just in case you need it later
 *
*/
    @BeforeClass
    public static void setUpClass() throws Exception {

        executeInfo = new ExecutionInfo();

        symbolControl = new SymbolControl();
        symbolControl.intialize_All_MPSymbols();

        hierarchySettings = new HierarchySettings();

        metaCompilerUtilities = new HierarchyMetaCompilerUtilities_MetaCompiler(hierarchySettings);


        fieldSet_TestCodeGenerator = new TestUtilities_FieldSetGenerator(symbolControl, executeInfo,
                matrixPackage, HierarchySettings.generationTestProj_matrixPackage_Dir);

        metaCompilerUtilities.generateAll_SymbolFiles(matrixPackage,
                HierarchySettings.generationTestProj_generationtestproj_Dir, symbolControl);



    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }
//*/

    @Test
    public void testGenerate_Specialized_FieldSetTupleClass() throws Exception {
//        System.out.println("generate_Specialized_FieldSetTupleClass");



        List<Class_FileInfo> fieldSet_ClassFileInfo = fieldSet_TestCodeGenerator.generateTest_FieldSetCode(true);
        Set<AppControl_Info> externalAppControl_List = new HashSet<AppControl_Info>();


        //  Moved the appControl file gen to the Descriptor_CodeGen_MatrixTest in the Hierarchy_GenerationTestProject
        //  Why? because the app Control needs to know what matrices are being build, and the test matrices are generated
        //  in the Descriptor_CodeGen_MatrixTest.

        metaCompilerUtilities.generate_AppControl(matrixPackage, hierarchySettings.generationTestProj_generationtestproj_Dir,
                hierarchySettings.appControl_ClassName + ".java", externalAppControl_List, null, null, fieldSet_ClassFileInfo);
    }


}