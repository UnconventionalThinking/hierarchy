/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

package maintests.samples;

import java.util.*;

import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;


public class MainTests_EmbeddedCodeTest_StaticMethods {


    static String requiredImagePath_Expected ;
    static Symbol isRequired_Expected;
    static Symbol NotRequired_Expected;

    static Symbol testSym1_Expected;
    static int testField2_Expected;


    private DESCRIPTOR<Test.Matrix->FORM.SELECTOR->ITEM> testDescField_Item;


    @BeforeClass
    public static void setUpClass() throws Exception {

        requiredImagePath_Expected = TestConstants.RequiredImagePath;
        isRequired_Expected = +:IsRequired;
        NotRequired_Expected = +:NotRequired;

        testField2_Expected = 6;

    }

    @AfterClass
    public static void tearDownClass() throws Exception {}
    @Before
    public void setUp() {}
    @After
    public void tearDown() {}




    @Test
    public void testStaticMethodContainingMatrixAccess() throws Exception {

        //  To start off with, do an access in a non-static method
        String resultString = Test.Matrix->`First Name`->FORM.REQUIRED:>RequiredImagePath;
        assertEquals(requiredImagePath_Expected, resultString);


        staticMethodWithAccess();

        ANNOTATIONS {
            DEFAULT {
                return "stuff";
            }
        }
    }

    static void staticMethodWithAccess() throws Exception {

        //  Static Method with Matrix Access Tests ________________________________________________________________________________________

        String resultString1 = Test.Matrix-<*1>`First Name`->FORM.REQUIRED:>RequiredImagePath;
        assertEquals(requiredImagePath_Expected, resultString1);

        //  Test nested access (make sure the symbol table can find the method scope's static status)__________________________________________
        if (true) {
            String resultString2 = Test.Matrix->`First Name`->FORM.REQUIRED:>RequiredImagePath;
            assertEquals(requiredImagePath_Expected, resultString2);
        }

        //  Static Multi Access test field IsRequired.
        MatrixSet<Object> IsRequired_Set = Test.Matrix->ITEM{*}->FORM.REQUIRED{*}:>IsRequired{*};
        assertEquals(2, IsRequired_Set.size());

        assertEquals(isRequired_Expected, IsRequired_Set.get(0));
        assertEquals(NotRequired_Expected, IsRequired_Set.get(1));


        ANNOTATIONS {
            *1 {
                *1.0 {
                    ACCESSOR.RETURN (Test.Matrix->[`First Name`]);
                }
                *1.1 {
                    return null;
                }

            }
            DEFAULT {
                return "stuff";
            }
        }

    }




}