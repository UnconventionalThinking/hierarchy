/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.analysis;

import net.unconventionalthinking.hierarchy.grammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseACompilationUnit(ACompilationUnit node);
    void caseAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node);
    void caseAPackageDeclaration(APackageDeclaration node);
    void caseAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node);
    void caseAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node);
    void caseAMpMatrixMatrixSections(AMpMatrixMatrixSections node);
    void caseAMpSchemaMatrixSections(AMpSchemaMatrixSections node);
    void caseAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node);
    void caseAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node);
    void caseAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node);
    void caseAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node);
    void caseAMpMatrixKey(AMpMatrixKey node);
    void caseAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node);
    void caseAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node);
    void caseAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node);
    void caseAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node);
    void caseAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node);
    void caseAMpStdMatrixName(AMpStdMatrixName node);
    void caseAMpWithParensMatrixName(AMpWithParensMatrixName node);
    void caseAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node);
    void caseAMpMatrixNew(AMpMatrixNew node);
    void caseAMpSchemaNew(AMpSchemaNew node);
    void caseAMpDotNew(AMpDotNew node);
    void caseAMpBodyDescriptorBody(AMpBodyDescriptorBody node);
    void caseAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node);
    void caseAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node);
    void caseAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node);
    void caseAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node);
    void caseAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node);
    void caseAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node);
    void caseAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node);
    void caseAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node);
    void caseAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node);
    void caseAMpDescriptorHeadSet(AMpDescriptorHeadSet node);
    void caseAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node);
    void caseAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node);
    void caseAMpStdDescriptorHead(AMpStdDescriptorHead node);
    void caseAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node);
    void caseAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node);
    void caseAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node);
    void caseAMpItemMatrixElementName(AMpItemMatrixElementName node);
    void caseAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node);
    void caseAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node);
    void caseAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node);
    void caseAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node);
    void caseAMpNameScope(AMpNameScope node);
    void caseAMpNameScopeName(AMpNameScopeName node);
    void caseAMpStdDescriptorLabel(AMpStdDescriptorLabel node);
    void caseAMpParensDescriptorLabel(AMpParensDescriptorLabel node);
    void caseAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node);
    void caseAMpStdUsesSchemas(AMpStdUsesSchemas node);
    void caseAMpSetSchemaOptions(AMpSetSchemaOptions node);
    void caseAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node);
    void caseAMpListSchemaSet(AMpListSchemaSet node);
    void caseAMpSchemaNameList(AMpSchemaNameList node);
    void caseAMpSchemaNameListChildren(AMpSchemaNameListChildren node);
    void caseAMpSchemaName(AMpSchemaName node);
    void caseAMpSchemaSetConstant(AMpSchemaSetConstant node);
    void caseAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node);
    void caseAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node);
    void caseADescriptorDynamicCreation(ADescriptorDynamicCreation node);
    void caseAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node);
    void caseACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node);
    void caseAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node);
    void caseAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node);
    void caseAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node);
    void caseAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node);
    void caseAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node);
    void caseAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node);
    void caseAMpFieldsetParametermap(AMpFieldsetParametermap node);
    void caseAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node);
    void caseAMpParameterMappingToValue(AMpParameterMappingToValue node);
    void caseAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node);
    void caseAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node);
    void caseAMpFieldsetTuple(AMpFieldsetTuple node);
    void caseAMpFieldsetParameter(AMpFieldsetParameter node);
    void caseAMpFieldname(AMpFieldname node);
    void caseALabelname(ALabelname node);
    void caseAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node);
    void caseAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node);
    void caseAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node);
    void caseAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node);
    void caseAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node);
    void caseAMpInNamePackage(AMpInNamePackage node);
    void caseAMpNamePackageName(AMpNamePackageName node);
    void caseAMpNamePackageNameChildren(AMpNamePackageNameChildren node);
    void caseAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node);
    void caseAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node);
    void caseAMpSetInstanceCreation(AMpSetInstanceCreation node);
    void caseAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node);
    void caseAMpSimpleSetCreate(AMpSimpleSetCreate node);
    void caseAMpTypedSetCreate(AMpTypedSetCreate node);
    void caseAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node);
    void caseAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node);
    void caseAMpSetCreateSimple(AMpSetCreateSimple node);
    void caseAMpSetCreateTyped(AMpSetCreateTyped node);
    void caseAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node);
    void caseAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node);
    void caseAMpTypeCloseSetBody(AMpTypeCloseSetBody node);
    void caseAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node);
    void caseAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node);
    void caseAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node);
    void caseAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node);
    void caseAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node);
    void caseAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node);
    void caseAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node);
    void caseAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node);
    void caseAMpNewNameSetCreate(AMpNewNameSetCreate node);
    void caseAMpSetItems(AMpSetItems node);
    void caseAMpSetItemsChildren(AMpSetItemsChildren node);
    void caseAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node);
    void caseAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node);
    void caseAMpSubsetCreate(AMpSubsetCreate node);
    void caseAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node);
    void caseAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node);
    void caseAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node);
    void caseAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node);
    void caseAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node);
    void caseAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node);
    void caseAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node);
    void caseAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node);
    void caseAMpStandardSymbolAccess(AMpStandardSymbolAccess node);
    void caseAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node);
    void caseAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node);
    void caseAMpEndSymbolChildren(AMpEndSymbolChildren node);
    void caseAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node);
    void caseAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node);
    void caseAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node);
    void caseAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node);
    void caseAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node);
    void caseAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node);
    void caseAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node);
    void caseAMpStandardSymbolOptions(AMpStandardSymbolOptions node);
    void caseAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node);
    void caseAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node);
    void caseAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node);
    void caseAMpSymbolCreation(AMpSymbolCreation node);
    void caseAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node);
    void caseAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node);
    void caseAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node);
    void caseAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node);
    void caseAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node);
    void caseAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node);
    void caseAMpMatrixElemAccess(AMpMatrixElemAccess node);
    void caseAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node);
    void caseAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node);
    void caseAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node);
    void caseAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node);
    void caseAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node);
    void caseAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node);
    void caseAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node);
    void caseAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node);
    void caseAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node);
    void caseAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node);
    void caseAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node);
    void caseAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node);
    void caseAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node);
    void caseAMpSecondDynAccessor(AMpSecondDynAccessor node);
    void caseAMpSecondAccessor(AMpSecondAccessor node);
    void caseAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node);
    void caseAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node);
    void caseAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node);
    void caseAMpSymbolExpression(AMpSymbolExpression node);
    void caseAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node);
    void caseAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node);
    void caseAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node);
    void caseAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node);
    void caseAMpAnnotationUseage(AMpAnnotationUseage node);
    void caseAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node);
    void caseAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node);
    void caseAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node);
    void caseAMpAnnotationStatement(AMpAnnotationStatement node);
    void caseAMpAnnotationCall(AMpAnnotationCall node);
    void caseAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node);
    void caseAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node);
    void caseAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node);
    void caseAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node);
    void caseAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node);
    void caseAMpCatchBlockStatement(AMpCatchBlockStatement node);
    void caseAMpCatchTypeList(AMpCatchTypeList node);
    void caseAMpCatchTypeParameter(AMpCatchTypeParameter node);
    void caseAMpErrorsCatchType(AMpErrorsCatchType node);
    void caseAMpEmptyCatchType(AMpEmptyCatchType node);
    void caseAMpFiltersCatchType(AMpFiltersCatchType node);
    void caseAMpAllCatchType(AMpAllCatchType node);
    void caseAMpExceptionsCatchType(AMpExceptionsCatchType node);
    void caseAMpIdCatchType(AMpIdCatchType node);
    void caseAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node);
    void caseAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node);
    void caseAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node);
    void caseAMpAnnotationParameters(AMpAnnotationParameters node);
    void caseAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node);
    void caseAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node);
    void caseAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node);
    void caseAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node);
    void caseAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node);
    void caseAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node);
    void caseAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node);
    void caseAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node);
    void caseAMpAccessorReturnStatement(AMpAccessorReturnStatement node);
    void caseAMpFilterStatement(AMpFilterStatement node);
    void caseAMpFilterWhere(AMpFilterWhere node);
    void caseAMpFilterFields(AMpFilterFields node);
    void caseAMpWhereExpression(AMpWhereExpression node);
    void caseAMpFilterFieldlist(AMpFilterFieldlist node);
    void caseAMpFilterFieldChildren(AMpFilterFieldChildren node);
    void caseAMpFilterField(AMpFilterField node);
    void caseAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node);
    void caseAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node);
    void caseAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node);
    void caseAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node);
    void caseAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node);
    void caseAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node);
    void caseAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node);
    void caseAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node);
    void caseAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node);
    void caseAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node);
    void caseAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node);
    void caseAMpSimpleMpSetType(AMpSimpleMpSetType node);
    void caseAMpTypedMpSetType(AMpTypedMpSetType node);
    void caseAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node);
    void caseAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node);
    void caseAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node);
    void caseAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node);
    void caseAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node);
    void caseAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node);
    void caseAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node);
    void caseAMpDescriptorNew(AMpDescriptorNew node);
    void caseAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node);
    void caseAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node);
    void caseAMpDescriptorNewBody(AMpDescriptorNewBody node);
    void caseAMpItemNew(AMpItemNew node);
    void caseAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node);
    void caseAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node);
    void caseAMpItemNewBody(AMpItemNewBody node);
    void caseAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node);
    void caseAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node);
    void caseAMpFieldNew(AMpFieldNew node);
    void caseAMpStdFieldBody(AMpStdFieldBody node);
    void caseAMpEmptyFieldBody(AMpEmptyFieldBody node);
    void caseAMpNewUsesSchema(AMpNewUsesSchema node);
    void caseAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node);
    void caseAMpNewSchemaSet(AMpNewSchemaSet node);
    void caseAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node);
    void caseAMpCodeClosure(AMpCodeClosure node);
    void caseAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node);
    void caseAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node);
    void caseAMpMatrixFieldExpression(AMpMatrixFieldExpression node);
    void caseAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node);
    void caseAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node);
    void caseAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node);
    void caseAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node);
    void caseAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node);
    void caseAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node);
    void caseAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node);
    void caseAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node);
    void caseAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node);
    void caseAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node);
    void caseAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node);
    void caseAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node);
    void caseAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node);
    void caseAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node);
    void caseAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node);
    void caseAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node);
    void caseAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node);
    void caseAContinuationOperator(AContinuationOperator node);
    void caseAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node);
    void caseAMpStatementMatrixStatement(AMpStatementMatrixStatement node);
    void caseAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node);
    void caseAMpIdMatrixExpression(AMpIdMatrixExpression node);
    void caseAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node);
    void caseAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node);
    void caseAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node);
    void caseAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node);
    void caseAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node);
    void caseAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node);
    void caseAMpReferenceMpTypes(AMpReferenceMpTypes node);
    void caseAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node);
    void caseAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node);
    void caseAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node);
    void caseAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node);
    void caseAMpItVariable(AMpItVariable node);
    void caseAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node);
    void caseAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node);
    void caseAMpExistMethod(AMpExistMethod node);
    void caseAMpValidMethod(AMpValidMethod node);
    void caseAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node);
    void caseAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node);
    void caseAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node);
    void caseAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node);
    void caseAMpDescriptorVariableType(AMpDescriptorVariableType node);
    void caseAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node);
    void caseASingleImportDeclaration(ASingleImportDeclaration node);
    void caseASingleDemandImportDeclaration(ASingleDemandImportDeclaration node);
    void caseAStaticImportDeclaration(AStaticImportDeclaration node);
    void caseAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node);
    void caseAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node);
    void caseAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node);
    void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node);
    void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node);
    void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node);
    void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node);
    void caseAOneVariableDeclarators(AOneVariableDeclarators node);
    void caseAManyVariableDeclarators(AManyVariableDeclarators node);
    void caseASimpleVariableDeclarator(ASimpleVariableDeclarator node);
    void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node);
    void caseAExpressionVariableInitializer(AExpressionVariableInitializer node);
    void caseAIdentifierVariableInitializer(AIdentifierVariableInitializer node);
    void caseAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node);
    void caseAAdditionalIdentifier(AAdditionalIdentifier node);
    void caseADim(ADim node);
    void caseATypeComponent(ATypeComponent node);
    void caseAGtTypeArguments(AGtTypeArguments node);
    void caseAShrTypeArguments(AShrTypeArguments node);
    void caseAUshrTypeArguments(AUshrTypeArguments node);
    void caseATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node);
    void caseATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node);
    void caseATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node);
    void caseAOneActualTypeArgumentList(AOneActualTypeArgumentList node);
    void caseAManyActualTypeArgumentList(AManyActualTypeArgumentList node);
    void caseAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node);
    void caseAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node);
    void caseAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node);
    void caseAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node);
    void caseAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node);
    void caseAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node);
    void caseAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node);
    void caseAReferenceActualTypeArgument(AReferenceActualTypeArgument node);
    void caseAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node);
    void caseAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node);
    void caseAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node);
    void caseAOneFormalParameterList(AOneFormalParameterList node);
    void caseAManyFormalParameterList(AManyFormalParameterList node);
    void caseAOneFormalParameters(AOneFormalParameters node);
    void caseAManyFormalParameters(AManyFormalParameters node);
    void caseAPrimitiveFormalParameter(APrimitiveFormalParameter node);
    void caseAReferenceFormalParameter(AReferenceFormalParameter node);
    void caseAMpDescVarFormalParameter(AMpDescVarFormalParameter node);
    void caseAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node);
    void caseAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node);
    void caseASimpleLastFormalParameter(ASimpleLastFormalParameter node);
    void caseAModifier(AModifier node);
    void caseANumericPrimitiveType(ANumericPrimitiveType node);
    void caseABooleanPrimitiveType(ABooleanPrimitiveType node);
    void caseAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node);
    void caseAIntegralNumericType(AIntegralNumericType node);
    void caseAFloatingNumericType(AFloatingNumericType node);
    void caseAByteIntegralType(AByteIntegralType node);
    void caseAShortIntegralType(AShortIntegralType node);
    void caseAIntIntegralType(AIntIntegralType node);
    void caseALongIntegralType(ALongIntegralType node);
    void caseACharIntegralType(ACharIntegralType node);
    void caseAFloatFloatingPointType(AFloatFloatingPointType node);
    void caseADoubleFloatingPointType(ADoubleFloatingPointType node);
    void caseAEmptyReturnStatement(AEmptyReturnStatement node);
    void caseAExpressionReturnStatement(AExpressionReturnStatement node);
    void caseAIdentifierReturnStatement(AIdentifierReturnStatement node);
    void caseAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node);
    void caseAExpressionSwitchStatement(AExpressionSwitchStatement node);
    void caseAIdentifierSwitchStatement(AIdentifierSwitchStatement node);
    void caseASwitchBlock(ASwitchBlock node);
    void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node);
    void caseAExpressionSwitchLabel(AExpressionSwitchLabel node);
    void caseAIdentifierSwitchLabel(AIdentifierSwitchLabel node);
    void caseADefaultSwitchLabel(ADefaultSwitchLabel node);
    void caseAMjElementSwitchLabel(AMjElementSwitchLabel node);
    void caseAConstantExpression(AConstantExpression node);
    void caseABreakStatement(ABreakStatement node);
    void caseABlock(ABlock node);
    void caseAVarDeclarationBlockStatement(AVarDeclarationBlockStatement node);
    void caseAStatementDeclarationBlockStatement(AStatementDeclarationBlockStatement node);
    void caseAEmptyStmtStatement(AEmptyStmtStatement node);
    void caseAIfThenStmtStatement(AIfThenStmtStatement node);
    void caseAIfThenElseStmtStatement(AIfThenElseStmtStatement node);
    void caseASwitchStatementStatement(ASwitchStatementStatement node);
    void caseABreakStatementStatement(ABreakStatementStatement node);
    void caseAForStatementStatement(AForStatementStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseAExpressionStmtStatement(AExpressionStmtStatement node);
    void caseAReturnStatementStatement(AReturnStatementStatement node);
    void caseAMjAnnotationStatementStatement(AMjAnnotationStatementStatement node);
    void caseAMjAnnotationsStatement(AMjAnnotationsStatement node);
    void caseAEmptyStatement(AEmptyStatement node);
    void caseAExpressionStatement(AExpressionStatement node);
    void caseAAssignmentStatementExpression(AAssignmentStatementExpression node);
    void caseAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node);
    void caseAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node);
    void caseAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node);
    void caseAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node);
    void caseAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node);
    void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node);
    void caseAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node);
    void caseAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node);
    void caseAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node);
    void caseAAssgnExpressionAssignment(AAssgnExpressionAssignment node);
    void caseAIdentifierAssignment(AIdentifierAssignment node);
    void caseAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node);
    void caseAExpression(AExpression node);
    void caseAConditionalExprAssignmentExpression(AConditionalExprAssignmentExpression node);
    void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node);
    void caseAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node);
    void caseAIdentifierLeftHandSide(AIdentifierLeftHandSide node);
    void caseAFieldLeftHandSide(AFieldLeftHandSide node);
    void caseAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node);
    void caseASimpleMethodInvocation(ASimpleMethodInvocation node);
    void caseAExpandingMethodInvocation(AExpandingMethodInvocation node);
    void caseAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node);
    void caseAOneExprArgumentList(AOneExprArgumentList node);
    void caseAOneIdArgumentList(AOneIdArgumentList node);
    void caseAManyExprArgumentList(AManyExprArgumentList node);
    void caseAManyIdArgumentList(AManyIdArgumentList node);
    void caseAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node);
    void caseAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node);
    void caseAIfThenStatement(AIfThenStatement node);
    void caseAIfThenElseStatement(AIfThenElseStatement node);
    void caseAIfThenElseNoShortIfStatementNoShortIf(AIfThenElseNoShortIfStatementNoShortIf node);
    void caseABlockStatementNoShortIf(ABlockStatementNoShortIf node);
    void caseAExpressionStmtStatementNoShortIf(AExpressionStmtStatementNoShortIf node);
    void caseAIfThenElseNoShortIfStatement(AIfThenElseNoShortIfStatement node);
    void caseAForStatement(AForStatement node);
    void caseAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node);
    void caseAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node);
    void caseAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node);
    void caseAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node);
    void caseAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node);
    void caseAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node);
    void caseAConditionalExpression(AConditionalExpression node);
    void caseAPassThroughConditionalOrExpression(APassThroughConditionalOrExpression node);
    void caseACondOrOrAndConditionalOrExpression(ACondOrOrAndConditionalOrExpression node);
    void caseACondOrOrIdConditionalOrExpression(ACondOrOrIdConditionalOrExpression node);
    void caseACondOrIdAndConditionalOrExpression(ACondOrIdAndConditionalOrExpression node);
    void caseACondOrIdIdConditionalOrExpression(ACondOrIdIdConditionalOrExpression node);
    void caseAPassThroughConditionalAndExpression(APassThroughConditionalAndExpression node);
    void caseACondAndAndEqConditionalAndExpression(ACondAndAndEqConditionalAndExpression node);
    void caseACondAndAndIdConditionalAndExpression(ACondAndAndIdConditionalAndExpression node);
    void caseACondAndIdEqConditionalAndExpression(ACondAndIdEqConditionalAndExpression node);
    void caseACondAndIdIdConditionalAndExpression(ACondAndIdIdConditionalAndExpression node);
    void caseASimpleEqualityExpression(ASimpleEqualityExpression node);
    void caseAEqEqReEqualityExpression(AEqEqReEqualityExpression node);
    void caseAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node);
    void caseAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node);
    void caseAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node);
    void caseANeqEqReEqualityExpression(ANeqEqReEqualityExpression node);
    void caseAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node);
    void caseAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node);
    void caseAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node);
    void caseARelationalExpression(ARelationalExpression node);
    void caseAPassThroughAdditiveExpression(APassThroughAdditiveExpression node);
    void caseAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node);
    void caseAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node);
    void caseAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node);
    void caseAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node);
    void caseAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node);
    void caseAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node);
    void caseAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node);
    void caseAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node);
    void caseAPassThroughMultiplicativeExpression(APassThroughMultiplicativeExpression node);
    void caseAMultiplyMuPrMultiplicativeExpression(AMultiplyMuPrMultiplicativeExpression node);
    void caseAMultiplyMuIdMultiplicativeExpression(AMultiplyMuIdMultiplicativeExpression node);
    void caseAMultiplyIdPrMultiplicativeExpression(AMultiplyIdPrMultiplicativeExpression node);
    void caseAMultiplyIdIdMultiplicativeExpression(AMultiplyIdIdMultiplicativeExpression node);
    void caseADivideMuPrMultiplicativeExpression(ADivideMuPrMultiplicativeExpression node);
    void caseADivideMuIdMultiplicativeExpression(ADivideMuIdMultiplicativeExpression node);
    void caseADivideIdPrMultiplicativeExpression(ADivideIdPrMultiplicativeExpression node);
    void caseADivideIdIdMultiplicativeExpression(ADivideIdIdMultiplicativeExpression node);
    void caseAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node);
    void caseAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node);
    void caseAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node);
    void caseAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node);
    void caseAPassThroughUnaryExpression(APassThroughUnaryExpression node);
    void caseAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node);
    void caseAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node);
    void caseAPrimaryMpPrePrimary(APrimaryMpPrePrimary node);
    void caseANoNewArrayPrimary(ANoNewArrayPrimary node);
    void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node);
    void caseAParenthesisExpressionPrimaryNoNewArray(AParenthesisExpressionPrimaryNoNewArray node);
    void caseAParenthesisIdPrimaryNoNewArray(AParenthesisIdPrimaryNoNewArray node);
    void caseAFieldAccessPrimaryNoNewArray(AFieldAccessPrimaryNoNewArray node);
    void caseAMethodInvocationPrimaryNoNewArray(AMethodInvocationPrimaryNoNewArray node);
    void caseAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node);
    void caseAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node);
    void caseAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node);
    void caseAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node);
    void caseAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node);
    void caseAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node);
    void caseAExpandingFieldAccess(AExpandingFieldAccess node);
    void caseAIntegerLiteral(AIntegerLiteral node);
    void caseAFloatingPointLiteral(AFloatingPointLiteral node);
    void caseAStringLiteral(AStringLiteral node);

    void caseTMpThickMpArrowOperator(TMpThickMpArrowOperator node);
    void caseTMpArrowOperator(TMpArrowOperator node);
    void caseTMpDashLtOperator(TMpDashLtOperator node);
    void caseTMpFieldAccessOperator(TMpFieldAccessOperator node);
    void caseTMpColonLtOperator(TMpColonLtOperator node);
    void caseTMpColonPercentOperator(TMpColonPercentOperator node);
    void caseTMpColonColonOperator(TMpColonColonOperator node);
    void caseTMpSetCreationOperator(TMpSetCreationOperator node);
    void caseTMpSymbolMpSetCreationOperator(TMpSymbolMpSetCreationOperator node);
    void caseTMpTypedMpSetCreationOperator(TMpTypedMpSetCreationOperator node);
    void caseTMpTypedMpSymbolMpSetCreationOperator(TMpTypedMpSymbolMpSetCreationOperator node);
    void caseTMpSetCreationOperatorWName(TMpSetCreationOperatorWName node);
    void caseTMpSymbolSetCreationOperatorWName(TMpSymbolSetCreationOperatorWName node);
    void caseTMpTypedSetCreationOperatorWName(TMpTypedSetCreationOperatorWName node);
    void caseTMpTypedSymbolSetCreationOperatorWName(TMpTypedSymbolSetCreationOperatorWName node);
    void caseTMpGtWBraceOperator(TMpGtWBraceOperator node);
    void caseTMpSymbolSetCreationOperator(TMpSymbolSetCreationOperator node);
    void caseTMpCodeClosureOperator(TMpCodeClosureOperator node);
    void caseTMpPairSinglequotes(TMpPairSinglequotes node);
    void caseTMpDittoPrevLevelOperator(TMpDittoPrevLevelOperator node);
    void caseTMpDeclarationsKeyword(TMpDeclarationsKeyword node);
    void caseTMpMatrixKeyword(TMpMatrixKeyword node);
    void caseTMpSchemaKeyword(TMpSchemaKeyword node);
    void caseTMpKeyKeyword(TMpKeyKeyword node);
    void caseTMpMemberKeyword(TMpMemberKeyword node);
    void caseTMpInKeyword(TMpInKeyword node);
    void caseTMpUsesKeyword(TMpUsesKeyword node);
    void caseTMpCallKeyword(TMpCallKeyword node);
    void caseTMpSetKeyword(TMpSetKeyword node);
    void caseTMpVarKeyword(TMpVarKeyword node);
    void caseTMpSymbolKeyword(TMpSymbolKeyword node);
    void caseTMpElementKeyword(TMpElementKeyword node);
    void caseTMpDescriptorKeyword(TMpDescriptorKeyword node);
    void caseTMpItemKeyword(TMpItemKeyword node);
    void caseTMpFieldKeyword(TMpFieldKeyword node);
    void caseTMpNewKeyword(TMpNewKeyword node);
    void caseTMpClosureKeyword(TMpClosureKeyword node);
    void caseTMpNKeyword(TMpNKeyword node);
    void caseTMpNanKeyword(TMpNanKeyword node);
    void caseTMpSelectKeyword(TMpSelectKeyword node);
    void caseTMpFromKeyword(TMpFromKeyword node);
    void caseTMpWhereKeyword(TMpWhereKeyword node);
    void caseTMpFieldsKeyword(TMpFieldsKeyword node);
    void caseTMpAnnotationsKeyword(TMpAnnotationsKeyword node);
    void caseTMpErrorsKeyword(TMpErrorsKeyword node);
    void caseTMpExceptionsKeyword(TMpExceptionsKeyword node);
    void caseTMpEmptyKeyword(TMpEmptyKeyword node);
    void caseTMpFiltersKeyword(TMpFiltersKeyword node);
    void caseTMpAllKeyword(TMpAllKeyword node);
    void caseTMpAnnoteDefaultKeyword(TMpAnnoteDefaultKeyword node);
    void caseTMpAccessorKeyword(TMpAccessorKeyword node);
    void caseTMpReturnKeyword(TMpReturnKeyword node);
    void caseTMpItKeyword(TMpItKeyword node);
    void caseTMpExistKeyword(TMpExistKeyword node);
    void caseTMpValidKeyword(TMpValidKeyword node);
    void caseTMpDefaultKeyword(TMpDefaultKeyword node);
    void caseTMpUnusedKeyword(TMpUnusedKeyword node);
    void caseTMpDittoKeyword(TMpDittoKeyword node);
    void caseTAt(TAt node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTDotDotDot(TDotDotDot node);
    void caseTLBkt(TLBkt node);
    void caseTLBrc(TLBrc node);
    void caseTLPar(TLPar node);
    void caseTRBkt(TRBkt node);
    void caseTRBrc(TRBrc node);
    void caseTRPar(TRPar node);
    void caseTSemi(TSemi node);
    void caseTAmp(TAmp node);
    void caseTAmpAmp(TAmpAmp node);
    void caseTAmpAssign(TAmpAssign node);
    void caseTAssign(TAssign node);
    void caseTBar(TBar node);
    void caseTBarAssign(TBarAssign node);
    void caseTBarBar(TBarBar node);
    void caseTCaret(TCaret node);
    void caseTCaretAssign(TCaretAssign node);
    void caseTColon(TColon node);
    void caseTEmark(TEmark node);
    void caseTEq(TEq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTMinus(TMinus node);
    void caseTMinusAssign(TMinusAssign node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTNeq(TNeq node);
    void caseTPercent(TPercent node);
    void caseTPercentAssign(TPercentAssign node);
    void caseTPlus(TPlus node);
    void caseTPlusAssign(TPlusAssign node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTQmark(TQmark node);
    void caseTShl(TShl node);
    void caseTShlAssign(TShlAssign node);
    void caseTShr(TShr node);
    void caseTShrAssign(TShrAssign node);
    void caseTSlash(TSlash node);
    void caseTSlashAssign(TSlashAssign node);
    void caseTStar(TStar node);
    void caseTStarAssign(TStarAssign node);
    void caseTTilde(TTilde node);
    void caseTUshr(TUshr node);
    void caseTUshrAssign(TUshrAssign node);
    void caseTAbstract(TAbstract node);
    void caseTAssert(TAssert node);
    void caseTBoolean(TBoolean node);
    void caseTBreak(TBreak node);
    void caseTByte(TByte node);
    void caseTCase(TCase node);
    void caseTCatch(TCatch node);
    void caseTChar(TChar node);
    void caseTClassToken(TClassToken node);
    void caseTConst(TConst node);
    void caseTContinue(TContinue node);
    void caseTDefault(TDefault node);
    void caseTDo(TDo node);
    void caseTDouble(TDouble node);
    void caseTElse(TElse node);
    void caseTEnum(TEnum node);
    void caseTExtends(TExtends node);
    void caseTFalse(TFalse node);
    void caseTFinal(TFinal node);
    void caseTFinallyToken(TFinallyToken node);
    void caseTFloat(TFloat node);
    void caseTFor(TFor node);
    void caseTGoto(TGoto node);
    void caseTIf(TIf node);
    void caseTImplements(TImplements node);
    void caseTImport(TImport node);
    void caseTInstanceof(TInstanceof node);
    void caseTInt(TInt node);
    void caseTInterface(TInterface node);
    void caseTLong(TLong node);
    void caseTNative(TNative node);
    void caseTNew(TNew node);
    void caseTPackage(TPackage node);
    void caseTPrivate(TPrivate node);
    void caseTProtected(TProtected node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTShort(TShort node);
    void caseTStatic(TStatic node);
    void caseTStrictfp(TStrictfp node);
    void caseTSuperToken(TSuperToken node);
    void caseTSwitch(TSwitch node);
    void caseTSynchronized(TSynchronized node);
    void caseTThis(TThis node);
    void caseTThrow(TThrow node);
    void caseTThrowsToken(TThrowsToken node);
    void caseTTransient(TTransient node);
    void caseTTrue(TTrue node);
    void caseTTry(TTry node);
    void caseTVoid(TVoid node);
    void caseTVolatile(TVolatile node);
    void caseTWhile(TWhile node);
    void caseTCharacterLiteral(TCharacterLiteral node);
    void caseTFloatingPointLiteral(TFloatingPointLiteral node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTNullLiteral(TNullLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTMpTokenNumberRange(TMpTokenNumberRange node);
    void caseTMpSymbolLiteralQuotes(TMpSymbolLiteralQuotes node);
    void caseTMpSymbolLiteralBacktiks(TMpSymbolLiteralBacktiks node);
    void caseTMpJunk1(TMpJunk1 node);
    void caseTIdentifier(TIdentifier node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTTraditionalComment(TTraditionalComment node);
    void caseTDocumentationComment(TDocumentationComment node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseEOF(EOF node);
}
