/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.analysis;

import java.util.*;
import net.unconventionalthinking.hierarchy.grammar.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPCompilationUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inACompilationUnit(ACompilationUnit node)
    {
        defaultIn(node);
    }

    public void outACompilationUnit(ACompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        inACompilationUnit(node);
        if(node.getPackageDeclaration() != null)
        {
            node.getPackageDeclaration().apply(this);
        }
        {
            List<PImportDeclaration> copy = new ArrayList<PImportDeclaration>(node.getImportDeclarations());
            for(PImportDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMatrixSectionAndJavaTypeOptions> copy = new ArrayList<PMatrixSectionAndJavaTypeOptions>(node.getMatrixSectionAndJavaTypeOptions());
            for(PMatrixSectionAndJavaTypeOptions e : copy)
            {
                e.apply(this);
            }
        }
        outACompilationUnit(node);
    }

    public void inAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(AMpMatrixSectionsMatrixSectionAndJavaTypeOptions node)
    {
        inAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(node);
        if(node.getMatrixSections() != null)
        {
            node.getMatrixSections().apply(this);
        }
        outAMpMatrixSectionsMatrixSectionAndJavaTypeOptions(node);
    }

    public void inAPackageDeclaration(APackageDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPackageDeclaration(APackageDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackageDeclaration(APackageDeclaration node)
    {
        inAPackageDeclaration(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAPackageDeclaration(node);
    }

    public void inAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDeclarationMatrixSections(AMpDeclarationMatrixSections node)
    {
        inAMpDeclarationMatrixSections(node);
        if(node.getMpDeclarationSection() != null)
        {
            node.getMpDeclarationSection().apply(this);
        }
        outAMpDeclarationMatrixSections(node);
    }

    public void inAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixKeyMatrixSections(AMpMatrixKeyMatrixSections node)
    {
        inAMpMatrixKeyMatrixSections(node);
        if(node.getMatrixKeySection() != null)
        {
            node.getMatrixKeySection().apply(this);
        }
        outAMpMatrixKeyMatrixSections(node);
    }

    public void inAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMatrixSections(AMpMatrixMatrixSections node)
    {
        inAMpMatrixMatrixSections(node);
        if(node.getMatrixNewDeclaration() != null)
        {
            node.getMatrixNewDeclaration().apply(this);
        }
        outAMpMatrixMatrixSections(node);
    }

    public void inAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaMatrixSections(AMpSchemaMatrixSections node)
    {
        inAMpSchemaMatrixSections(node);
        if(node.getSchemaNewDeclaration() != null)
        {
            node.getSchemaNewDeclaration().apply(this);
        }
        outAMpSchemaMatrixSections(node);
    }

    public void inAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        defaultIn(node);
    }

    public void outAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSectionMpDeclarationSection(AMpSectionMpDeclarationSection node)
    {
        inAMpSectionMpDeclarationSection(node);
        if(node.getMpDeclarationsKeyword() != null)
        {
            node.getMpDeclarationsKeyword().apply(this);
        }
        if(node.getMpDeclarationSectionBody() != null)
        {
            node.getMpDeclarationSectionBody().apply(this);
        }
        outAMpSectionMpDeclarationSection(node);
    }

    public void inAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyMpDeclarationSectionBody(AMpBodyMpDeclarationSectionBody node)
    {
        inAMpBodyMpDeclarationSectionBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PMatrixStatement> copy = new ArrayList<PMatrixStatement>(node.getMatrixStatement());
            for(PMatrixStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpBodyMpDeclarationSectionBody(node);
    }

    public void inAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        defaultIn(node);
    }

    public void outAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSectionMatrixKeySection(AMpSectionMatrixKeySection node)
    {
        inAMpSectionMatrixKeySection(node);
        if(node.getMatrixKey() != null)
        {
            node.getMatrixKey().apply(this);
        }
        if(node.getMatrixKeySectionBody() != null)
        {
            node.getMatrixKeySectionBody().apply(this);
        }
        outAMpSectionMatrixKeySection(node);
    }

    public void inAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyMatrixKeySectionBody(AMpBodyMatrixKeySectionBody node)
    {
        inAMpBodyMatrixKeySectionBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpBodyMatrixKeySectionBody(node);
    }

    public void inAMpMatrixKey(AMpMatrixKey node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixKey(AMpMatrixKey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixKey(AMpMatrixKey node)
    {
        inAMpMatrixKey(node);
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpKeyKeyword() != null)
        {
            node.getMpKeyKeyword().apply(this);
        }
        outAMpMatrixKey(node);
    }

    public void inAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixNewDeclaration(AMpMatrixNewDeclaration node)
    {
        inAMpMatrixNewDeclaration(node);
        if(node.getMatrixNew() != null)
        {
            node.getMatrixNew().apply(this);
        }
        if(node.getMatrixName() != null)
        {
            node.getMatrixName().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getMatrixFieldAndBodyOptions() != null)
        {
            node.getMatrixFieldAndBodyOptions().apply(this);
        }
        outAMpMatrixNewDeclaration(node);
    }

    public void inAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNewDeclaration(AMpSchemaNewDeclaration node)
    {
        inAMpSchemaNewDeclaration(node);
        if(node.getSchemaNew() != null)
        {
            node.getSchemaNew().apply(this);
        }
        if(node.getMatrixName() != null)
        {
            node.getMatrixName().apply(this);
        }
        if(node.getMatrixFieldAndBodyOptions() != null)
        {
            node.getMatrixFieldAndBodyOptions().apply(this);
        }
        outAMpSchemaNewDeclaration(node);
    }

    public void inAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyMatrixFieldAndBodyOptions(AMpEmptyMatrixFieldAndBodyOptions node)
    {
        inAMpEmptyMatrixFieldAndBodyOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpEmptyMatrixFieldAndBodyOptions(node);
    }

    public void inAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetMatrixFieldAndBodyOptions(AMpFieldsetMatrixFieldAndBodyOptions node)
    {
        inAMpFieldsetMatrixFieldAndBodyOptions(node);
        if(node.getFieldsetParametermapWColon() != null)
        {
            node.getFieldsetParametermapWColon().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpFieldsetMatrixFieldAndBodyOptions(node);
    }

    public void inAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetAndBodyMatrixFieldAndBodyOptions(AMpFieldsetAndBodyMatrixFieldAndBodyOptions node)
    {
        inAMpFieldsetAndBodyMatrixFieldAndBodyOptions(node);
        if(node.getFieldsetParametermapWColon() != null)
        {
            node.getFieldsetParametermapWColon().apply(this);
        }
        if(node.getDescriptorBody() != null)
        {
            node.getDescriptorBody().apply(this);
        }
        outAMpFieldsetAndBodyMatrixFieldAndBodyOptions(node);
    }

    public void inAMpStdMatrixName(AMpStdMatrixName node)
    {
        defaultIn(node);
    }

    public void outAMpStdMatrixName(AMpStdMatrixName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdMatrixName(AMpStdMatrixName node)
    {
        inAMpStdMatrixName(node);
        if(node.getMatrixNameBody() != null)
        {
            node.getMatrixNameBody().apply(this);
        }
        outAMpStdMatrixName(node);
    }

    public void inAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        defaultIn(node);
    }

    public void outAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpWithParensMatrixName(AMpWithParensMatrixName node)
    {
        inAMpWithParensMatrixName(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMatrixNameBody() != null)
        {
            node.getMatrixNameBody().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpWithParensMatrixName(node);
    }

    public void inAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyMatrixNameBody(AMpBodyMatrixNameBody node)
    {
        inAMpBodyMatrixNameBody(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpBodyMatrixNameBody(node);
    }

    public void inAMpMatrixNew(AMpMatrixNew node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixNew(AMpMatrixNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixNew(AMpMatrixNew node)
    {
        inAMpMatrixNew(node);
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        if(node.getDotNew() != null)
        {
            node.getDotNew().apply(this);
        }
        outAMpMatrixNew(node);
    }

    public void inAMpSchemaNew(AMpSchemaNew node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNew(AMpSchemaNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNew(AMpSchemaNew node)
    {
        inAMpSchemaNew(node);
        if(node.getMpSchemaKeyword() != null)
        {
            node.getMpSchemaKeyword().apply(this);
        }
        if(node.getDotNew() != null)
        {
            node.getDotNew().apply(this);
        }
        outAMpSchemaNew(node);
    }

    public void inAMpDotNew(AMpDotNew node)
    {
        defaultIn(node);
    }

    public void outAMpDotNew(AMpDotNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDotNew(AMpDotNew node)
    {
        inAMpDotNew(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        outAMpDotNew(node);
    }

    public void inAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        defaultIn(node);
    }

    public void outAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBodyDescriptorBody(AMpBodyDescriptorBody node)
    {
        inAMpBodyDescriptorBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PDescriptorBodyStatement> copy = new ArrayList<PDescriptorBodyStatement>(node.getDescriptorBodyStatement());
            for(PDescriptorBodyStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpBodyDescriptorBody(node);
    }

    public void inAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorDescriptorBodyStatement(AMpDescriptorDescriptorBodyStatement node)
    {
        inAMpDescriptorDescriptorBodyStatement(node);
        if(node.getDescriptorDeclaration() != null)
        {
            node.getDescriptorDeclaration().apply(this);
        }
        outAMpDescriptorDescriptorBodyStatement(node);
    }

    public void inAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMemberDescriptorBodyStatement(AMpMatrixMemberDescriptorBodyStatement node)
    {
        inAMpMatrixMemberDescriptorBodyStatement(node);
        if(node.getMatrixMemberDeclaration() != null)
        {
            node.getMatrixMemberDeclaration().apply(this);
        }
        outAMpMatrixMemberDescriptorBodyStatement(node);
    }

    public void inAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorDynCreateDescriptorBodyStatement(AMpDescriptorDynCreateDescriptorBodyStatement node)
    {
        inAMpDescriptorDynCreateDescriptorBodyStatement(node);
        if(node.getDescriptorDynamicCreation() != null)
        {
            node.getDescriptorDynamicCreation().apply(this);
        }
        outAMpDescriptorDynCreateDescriptorBodyStatement(node);
    }

    public void inAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDeclarationDescriptorDeclaration(AMpDeclarationDescriptorDeclaration node)
    {
        inAMpDeclarationDescriptorDeclaration(node);
        if(node.getDescriptorHeadOptions() != null)
        {
            node.getDescriptorHeadOptions().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getDescriptorFieldAndBodyOptions() != null)
        {
            node.getDescriptorFieldAndBodyOptions().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpDeclarationDescriptorDeclaration(node);
    }

    public void inAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyDescriptorFieldAndBodyOptions(AMpEmptyDescriptorFieldAndBodyOptions node)
    {
        inAMpEmptyDescriptorFieldAndBodyOptions(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpEmptyDescriptorFieldAndBodyOptions(node);
    }

    public void inAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOnlyFieldsetDescriptorFieldAndBodyOptions(AMpOnlyFieldsetDescriptorFieldAndBodyOptions node)
    {
        inAMpOnlyFieldsetDescriptorFieldAndBodyOptions(node);
        if(node.getFieldsetOptionsWColon() != null)
        {
            node.getFieldsetOptionsWColon().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpOnlyFieldsetDescriptorFieldAndBodyOptions(node);
    }

    public void inAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(AMpFieldsetAndBodyDescriptorFieldAndBodyOptions node)
    {
        inAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(node);
        if(node.getFieldsetOptionsWColon() != null)
        {
            node.getFieldsetOptionsWColon().apply(this);
        }
        if(node.getDescriptorBody() != null)
        {
            node.getDescriptorBody().apply(this);
        }
        outAMpFieldsetAndBodyDescriptorFieldAndBodyOptions(node);
    }

    public void inAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSingleNameDescriptorHeadOptions(AMpSingleNameDescriptorHeadOptions node)
    {
        inAMpSingleNameDescriptorHeadOptions(node);
        if(node.getDescriptorHead() != null)
        {
            node.getDescriptorHead().apply(this);
        }
        outAMpSingleNameDescriptorHeadOptions(node);
    }

    public void inAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        defaultIn(node);
    }

    public void outAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMultNamesDescriptorHeadOptions(AMpMultNamesDescriptorHeadOptions node)
    {
        inAMpMultNamesDescriptorHeadOptions(node);
        if(node.getDescriptorHeadSet() != null)
        {
            node.getDescriptorHeadSet().apply(this);
        }
        outAMpMultNamesDescriptorHeadOptions(node);
    }

    public void inAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorHeadSet(AMpDescriptorHeadSet node)
    {
        inAMpDescriptorHeadSet(node);
        if(node.getMpSetCreationOperator() != null)
        {
            node.getMpSetCreationOperator().apply(this);
        }
        if(node.getDescriptorHeadSetItem() != null)
        {
            node.getDescriptorHeadSetItem().apply(this);
        }
        {
            List<PDescriptorHeadChildren> copy = new ArrayList<PDescriptorHeadChildren>(node.getDescriptorHeadChildren());
            for(PDescriptorHeadChildren e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpDescriptorHeadSet(node);
    }

    public void inAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorHeadChildren(AMpDescriptorHeadChildren node)
    {
        inAMpDescriptorHeadChildren(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDescriptorHeadSetItem() != null)
        {
            node.getDescriptorHeadSetItem().apply(this);
        }
        outAMpDescriptorHeadChildren(node);
    }

    public void inAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorHeadSetItem(AMpDescriptorHeadSetItem node)
    {
        inAMpDescriptorHeadSetItem(node);
        if(node.getDescriptorHead() != null)
        {
            node.getDescriptorHead().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getFieldsetOptionsWColon() != null)
        {
            node.getFieldsetOptionsWColon().apply(this);
        }
        outAMpDescriptorHeadSetItem(node);
    }

    public void inAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        defaultIn(node);
    }

    public void outAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdDescriptorHead(AMpStdDescriptorHead node)
    {
        inAMpStdDescriptorHead(node);
        if(node.getDescriptorHeadStd() != null)
        {
            node.getDescriptorHeadStd().apply(this);
        }
        outAMpStdDescriptorHead(node);
    }

    public void inAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        defaultIn(node);
    }

    public void outAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpHiddenTagnameDescriptorHead(AMpHiddenTagnameDescriptorHead node)
    {
        inAMpHiddenTagnameDescriptorHead(node);
        if(node.getDescriptorHeadHiddenTagname() != null)
        {
            node.getDescriptorHeadHiddenTagname().apply(this);
        }
        outAMpHiddenTagnameDescriptorHead(node);
    }

    public void inAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        defaultIn(node);
    }

    public void outAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdDescriptorHeadStd(AMpStdDescriptorHeadStd node)
    {
        inAMpStdDescriptorHeadStd(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getDescriptorLabel() != null)
        {
            node.getDescriptorLabel().apply(this);
        }
        outAMpStdDescriptorHeadStd(node);
    }

    public void inAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        defaultIn(node);
    }

    public void outAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpHiddenDescriptorHeadHiddenTagname(AMpHiddenDescriptorHeadHiddenTagname node)
    {
        inAMpHiddenDescriptorHeadHiddenTagname(node);
        if(node.getLabelname() != null)
        {
            node.getLabelname().apply(this);
        }
        outAMpHiddenDescriptorHeadHiddenTagname(node);
    }

    public void inAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemMatrixElementName(AMpItemMatrixElementName node)
    {
        inAMpItemMatrixElementName(node);
        if(node.getMpItemKeyword() != null)
        {
            node.getMpItemKeyword().apply(this);
        }
        outAMpItemMatrixElementName(node);
    }

    public void inAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorMatrixElementName(AMpDescriptorMatrixElementName node)
    {
        inAMpDescriptorMatrixElementName(node);
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        outAMpDescriptorMatrixElementName(node);
    }

    public void inAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldWChildrenMatrixElementName(AMpFieldWChildrenMatrixElementName node)
    {
        inAMpFieldWChildrenMatrixElementName(node);
        if(node.getMpFieldKeyword() != null)
        {
            node.getMpFieldKeyword().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpFieldWChildrenMatrixElementName(node);
    }

    public void inAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        defaultIn(node);
    }

    public void outAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdentifierMatrixElementName(AMpIdentifierMatrixElementName node)
    {
        inAMpIdentifierMatrixElementName(node);
        {
            List<PNameScope> copy = new ArrayList<PNameScope>(node.getNameScope());
            for(PNameScope e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpIdentifierMatrixElementName(node);
    }

    public void inAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(AMpMatrixElementNameIdentifierWOneOrMoreNamescopes node)
    {
        inAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(node);
        {
            List<PNameScope> copy = new ArrayList<PNameScope>(node.getNameScope());
            for(PNameScope e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpMatrixElementNameIdentifierWOneOrMoreNamescopes(node);
    }

    public void inAMpNameScope(AMpNameScope node)
    {
        defaultIn(node);
    }

    public void outAMpNameScope(AMpNameScope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNameScope(AMpNameScope node)
    {
        inAMpNameScope(node);
        if(node.getNameScopeName() != null)
        {
            node.getNameScopeName().apply(this);
        }
        if(node.getMpColonColonOperator() != null)
        {
            node.getMpColonColonOperator().apply(this);
        }
        outAMpNameScope(node);
    }

    public void inAMpNameScopeName(AMpNameScopeName node)
    {
        defaultIn(node);
    }

    public void outAMpNameScopeName(AMpNameScopeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNameScopeName(AMpNameScopeName node)
    {
        inAMpNameScopeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpNameScopeName(node);
    }

    public void inAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdDescriptorLabel(AMpStdDescriptorLabel node)
    {
        inAMpStdDescriptorLabel(node);
        if(node.getLabelname() != null)
        {
            node.getLabelname().apply(this);
        }
        outAMpStdDescriptorLabel(node);
    }

    public void inAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpParensDescriptorLabel(AMpParensDescriptorLabel node)
    {
        inAMpParensDescriptorLabel(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLabelname() != null)
        {
            node.getLabelname().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpParensDescriptorLabel(node);
    }

    public void inAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDesctagnameDescriptorLabel(AMpDesctagnameDescriptorLabel node)
    {
        inAMpDesctagnameDescriptorLabel(node);
        if(node.getDescriptorTagnameForlabel() != null)
        {
            node.getDescriptorTagnameForlabel().apply(this);
        }
        outAMpDesctagnameDescriptorLabel(node);
    }

    public void inAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        defaultIn(node);
    }

    public void outAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdUsesSchemas(AMpStdUsesSchemas node)
    {
        inAMpStdUsesSchemas(node);
        if(node.getMpUsesKeyword() != null)
        {
            node.getMpUsesKeyword().apply(this);
        }
        if(node.getSchemaOptions() != null)
        {
            node.getSchemaOptions().apply(this);
        }
        outAMpStdUsesSchemas(node);
    }

    public void inAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetSchemaOptions(AMpSetSchemaOptions node)
    {
        inAMpSetSchemaOptions(node);
        if(node.getSchemaSet() != null)
        {
            node.getSchemaSet().apply(this);
        }
        outAMpSetSchemaOptions(node);
    }

    public void inAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetConstantSchemaOptions(AMpSetConstantSchemaOptions node)
    {
        inAMpSetConstantSchemaOptions(node);
        if(node.getSchemaSetConstant() != null)
        {
            node.getSchemaSetConstant().apply(this);
        }
        outAMpSetConstantSchemaOptions(node);
    }

    public void inAMpListSchemaSet(AMpListSchemaSet node)
    {
        defaultIn(node);
    }

    public void outAMpListSchemaSet(AMpListSchemaSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpListSchemaSet(AMpListSchemaSet node)
    {
        inAMpListSchemaSet(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSchemaNameList() != null)
        {
            node.getSchemaNameList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpListSchemaSet(node);
    }

    public void inAMpSchemaNameList(AMpSchemaNameList node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNameList(AMpSchemaNameList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNameList(AMpSchemaNameList node)
    {
        inAMpSchemaNameList(node);
        if(node.getSchemaName() != null)
        {
            node.getSchemaName().apply(this);
        }
        {
            List<PSchemaNameListChildren> copy = new ArrayList<PSchemaNameListChildren>(node.getSchemaNameListChildren());
            for(PSchemaNameListChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpSchemaNameList(node);
    }

    public void inAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaNameListChildren(AMpSchemaNameListChildren node)
    {
        inAMpSchemaNameListChildren(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSchemaName() != null)
        {
            node.getSchemaName().apply(this);
        }
        outAMpSchemaNameListChildren(node);
    }

    public void inAMpSchemaName(AMpSchemaName node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaName(AMpSchemaName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaName(AMpSchemaName node)
    {
        inAMpSchemaName(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpSchemaName(node);
    }

    public void inAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaSetConstant(AMpSchemaSetConstant node)
    {
        inAMpSchemaSetConstant(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpSchemaSetConstant(node);
    }

    public void inAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrimitiveTypeMatrixMemberDeclaration(AMpPrimitiveTypeMatrixMemberDeclaration node)
    {
        inAMpPrimitiveTypeMatrixMemberDeclaration(node);
        if(node.getMpMemberKeyword() != null)
        {
            node.getMpMemberKeyword().apply(this);
        }
        {
            List<PMatrixAccessModifier> copy = new ArrayList<PMatrixAccessModifier>(node.getMatrixAccessModifier());
            for(PMatrixAccessModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpPrimitiveTypeMatrixMemberDeclaration(node);
    }

    public void inAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpComplexTypeMatrixMemberDeclaration(AMpComplexTypeMatrixMemberDeclaration node)
    {
        inAMpComplexTypeMatrixMemberDeclaration(node);
        if(node.getMpMemberKeyword() != null)
        {
            node.getMpMemberKeyword().apply(this);
        }
        {
            List<PMatrixAccessModifier> copy = new ArrayList<PMatrixAccessModifier>(node.getMatrixAccessModifier());
            for(PMatrixAccessModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponent());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDim());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpComplexTypeMatrixMemberDeclaration(node);
    }

    public void inADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        defaultIn(node);
    }

    public void outADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADescriptorDynamicCreation(ADescriptorDynamicCreation node)
    {
        inADescriptorDynamicCreation(node);
        if(node.getMpCallKeyword() != null)
        {
            node.getMpCallKeyword().apply(this);
        }
        if(node.getDescriptorDynamicCreationOptions() != null)
        {
            node.getDescriptorDynamicCreationOptions().apply(this);
        }
        outADescriptorDynamicCreation(node);
    }

    public void inAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        defaultIn(node);
    }

    public void outAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInvocationDescriptorDynamicCreationOptions(AMethodInvocationDescriptorDynamicCreationOptions node)
    {
        inAMethodInvocationDescriptorDynamicCreationOptions(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMethodInvocationDescriptorDynamicCreationOptions(node);
    }

    public void inACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        defaultIn(node);
    }

    public void outACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACodeClosureDescriptorDynamicCreationOptions(ACodeClosureDescriptorDynamicCreationOptions node)
    {
        inACodeClosureDescriptorDynamicCreationOptions(node);
        if(node.getCodeClosure() != null)
        {
            node.getCodeClosure().apply(this);
        }
        outACodeClosureDescriptorDynamicCreationOptions(node);
    }

    public void inAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetOptionsWColon(AMpFieldsetOptionsWColon node)
    {
        inAMpFieldsetOptionsWColon(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFieldsetOptions() != null)
        {
            node.getFieldsetOptions().apply(this);
        }
        outAMpFieldsetOptionsWColon(node);
    }

    public void inAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParametermapWColon(AMpFieldsetParametermapWColon node)
    {
        inAMpFieldsetParametermapWColon(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFieldsetParametermapOptions() != null)
        {
            node.getFieldsetParametermapOptions().apply(this);
        }
        outAMpFieldsetParametermapWColon(node);
    }

    public void inAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        defaultIn(node);
    }

    public void outAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpParameterMapFieldsetOptions(AMpParameterMapFieldsetOptions node)
    {
        inAMpParameterMapFieldsetOptions(node);
        if(node.getFieldsetParametermapOptions() != null)
        {
            node.getFieldsetParametermapOptions().apply(this);
        }
        outAMpParameterMapFieldsetOptions(node);
    }

    public void inAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        defaultIn(node);
    }

    public void outAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTupleFieldsetOptions(AMpTupleFieldsetOptions node)
    {
        inAMpTupleFieldsetOptions(node);
        if(node.getFieldsetTupleOptions() != null)
        {
            node.getFieldsetTupleOptions().apply(this);
        }
        outAMpTupleFieldsetOptions(node);
    }

    public void inAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldsetParametermapOptions(AMpStdFieldsetParametermapOptions node)
    {
        inAMpStdFieldsetParametermapOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getFieldsetParametermap() != null)
        {
            node.getFieldsetParametermap().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpStdFieldsetParametermapOptions(node);
    }

    public void inAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyBracesFieldsetParametermapOptions(AMpEmptyBracesFieldsetParametermapOptions node)
    {
        inAMpEmptyBracesFieldsetParametermapOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpEmptyBracesFieldsetParametermapOptions(node);
    }

    public void inAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParametermap(AMpFieldsetParametermap node)
    {
        inAMpFieldsetParametermap(node);
        if(node.getFieldname() != null)
        {
            node.getFieldname().apply(this);
        }
        if(node.getParameterMappingToValue() != null)
        {
            node.getParameterMappingToValue().apply(this);
        }
        {
            List<PFieldsetParameterChildren> copy = new ArrayList<PFieldsetParameterChildren>(node.getFieldsetParameterChildren());
            for(PFieldsetParameterChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpFieldsetParametermap(node);
    }

    public void inAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParameterChildren(AMpFieldsetParameterChildren node)
    {
        inAMpFieldsetParameterChildren(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFieldname() != null)
        {
            node.getFieldname().apply(this);
        }
        if(node.getParameterMappingToValue() != null)
        {
            node.getParameterMappingToValue().apply(this);
        }
        outAMpFieldsetParameterChildren(node);
    }

    public void inAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        defaultIn(node);
    }

    public void outAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpParameterMappingToValue(AMpParameterMappingToValue node)
    {
        inAMpParameterMappingToValue(node);
        if(node.getMpThickMpArrowOperator() != null)
        {
            node.getMpThickMpArrowOperator().apply(this);
        }
        if(node.getMatrixFieldExpression() != null)
        {
            node.getMatrixFieldExpression().apply(this);
        }
        outAMpParameterMappingToValue(node);
    }

    public void inAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldsetTupleOptions(AMpStdFieldsetTupleOptions node)
    {
        inAMpStdFieldsetTupleOptions(node);
        if(node.getFieldsetTupleWBraces() != null)
        {
            node.getFieldsetTupleWBraces().apply(this);
        }
        outAMpStdFieldsetTupleOptions(node);
    }

    public void inAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetTupleWBraces(AMpFieldsetTupleWBraces node)
    {
        inAMpFieldsetTupleWBraces(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getFieldsetTuple() != null)
        {
            node.getFieldsetTuple().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpFieldsetTupleWBraces(node);
    }

    public void inAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetTuple(AMpFieldsetTuple node)
    {
        inAMpFieldsetTuple(node);
        if(node.getMatrixFieldExpression() != null)
        {
            node.getMatrixFieldExpression().apply(this);
        }
        {
            List<PFieldsetParameter> copy = new ArrayList<PFieldsetParameter>(node.getFieldsetParameter());
            for(PFieldsetParameter e : copy)
            {
                e.apply(this);
            }
        }
        outAMpFieldsetTuple(node);
    }

    public void inAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        defaultIn(node);
    }

    public void outAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldsetParameter(AMpFieldsetParameter node)
    {
        inAMpFieldsetParameter(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMatrixFieldExpression() != null)
        {
            node.getMatrixFieldExpression().apply(this);
        }
        outAMpFieldsetParameter(node);
    }

    public void inAMpFieldname(AMpFieldname node)
    {
        defaultIn(node);
    }

    public void outAMpFieldname(AMpFieldname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldname(AMpFieldname node)
    {
        inAMpFieldname(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpFieldname(node);
    }

    public void inALabelname(ALabelname node)
    {
        defaultIn(node);
    }

    public void outALabelname(ALabelname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelname(ALabelname node)
    {
        inALabelname(node);
        if(node.getLabelnameBacktik() != null)
        {
            node.getLabelnameBacktik().apply(this);
        }
        outALabelname(node);
    }

    public void inAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleLabelnameBacktik(AMpSimpleLabelnameBacktik node)
    {
        inAMpSimpleLabelnameBacktik(node);
        if(node.getLabelnameBacktikSimple() != null)
        {
            node.getLabelnameBacktikSimple().apply(this);
        }
        outAMpSimpleLabelnameBacktik(node);
    }

    public void inAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        defaultIn(node);
    }

    public void outAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTwoPartLabelnameBacktik(AMpTwoPartLabelnameBacktik node)
    {
        inAMpTwoPartLabelnameBacktik(node);
        if(node.getLabelnameBacktikTwopart() != null)
        {
            node.getLabelnameBacktikTwopart().apply(this);
        }
        outAMpTwoPartLabelnameBacktik(node);
    }

    public void inAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        defaultIn(node);
    }

    public void outAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelnameBacktikSimple(AMpLabelnameBacktikSimple node)
    {
        inAMpLabelnameBacktikSimple(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        {
            List<PLabelnameBacktiksChildren> copy = new ArrayList<PLabelnameBacktiksChildren>(node.getLabelnameBacktiksChildren());
            for(PLabelnameBacktiksChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpLabelnameBacktikSimple(node);
    }

    public void inAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        defaultIn(node);
    }

    public void outAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelnameBacktiksChildren(AMpLabelnameBacktiksChildren node)
    {
        inAMpLabelnameBacktiksChildren(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        outAMpLabelnameBacktiksChildren(node);
    }

    public void inAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        defaultIn(node);
    }

    public void outAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelnameBacktikTwopart(AMpLabelnameBacktikTwopart node)
    {
        inAMpLabelnameBacktikTwopart(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        if(node.getInNamePackage() != null)
        {
            node.getInNamePackage().apply(this);
        }
        outAMpLabelnameBacktikTwopart(node);
    }

    public void inAMpInNamePackage(AMpInNamePackage node)
    {
        defaultIn(node);
    }

    public void outAMpInNamePackage(AMpInNamePackage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpInNamePackage(AMpInNamePackage node)
    {
        inAMpInNamePackage(node);
        if(node.getMpInKeyword() != null)
        {
            node.getMpInKeyword().apply(this);
        }
        if(node.getNamePackageName() != null)
        {
            node.getNamePackageName().apply(this);
        }
        outAMpInNamePackage(node);
    }

    public void inAMpNamePackageName(AMpNamePackageName node)
    {
        defaultIn(node);
    }

    public void outAMpNamePackageName(AMpNamePackageName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNamePackageName(AMpNamePackageName node)
    {
        inAMpNamePackageName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PNamePackageNameChildren> copy = new ArrayList<PNamePackageNameChildren>(node.getNamePackageNameChildren());
            for(PNamePackageNameChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpNamePackageName(node);
    }

    public void inAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        defaultIn(node);
    }

    public void outAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNamePackageNameChildren(AMpNamePackageNameChildren node)
    {
        inAMpNamePackageNameChildren(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpNamePackageNameChildren(node);
    }

    public void inAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorTagnameForlabel(AMpDescriptorTagnameForlabel node)
    {
        inAMpDescriptorTagnameForlabel(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMpColonPercentOperator() != null)
        {
            node.getMpColonPercentOperator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDescriptorTagnameForlabelChildren> copy = new ArrayList<PDescriptorTagnameForlabelChildren>(node.getDescriptorTagnameForlabelChildren());
            for(PDescriptorTagnameForlabelChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpDescriptorTagnameForlabel(node);
    }

    public void inAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorTagnameForlabelChildren(AMpDescriptorTagnameForlabelChildren node)
    {
        inAMpDescriptorTagnameForlabelChildren(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpDescriptorTagnameForlabelChildren(node);
    }

    public void inAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetInstanceCreation(AMpSetInstanceCreation node)
    {
        inAMpSetInstanceCreation(node);
        if(node.getSetCreate() != null)
        {
            node.getSetCreate().apply(this);
        }
        outAMpSetInstanceCreation(node);
    }

    public void inAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        defaultIn(node);
    }

    public void outAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewNameSetInstanceCreation(AMpNewNameSetInstanceCreation node)
    {
        inAMpNewNameSetInstanceCreation(node);
        if(node.getNewNameSetCreate() != null)
        {
            node.getNewNameSetCreate().apply(this);
        }
        outAMpNewNameSetInstanceCreation(node);
    }

    public void inAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleSetCreate(AMpSimpleSetCreate node)
    {
        inAMpSimpleSetCreate(node);
        if(node.getSetCreateSimple() != null)
        {
            node.getSetCreateSimple().apply(this);
        }
        outAMpSimpleSetCreate(node);
    }

    public void inAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedSetCreate(AMpTypedSetCreate node)
    {
        inAMpTypedSetCreate(node);
        if(node.getSetCreateTyped() != null)
        {
            node.getSetCreateTyped().apply(this);
        }
        outAMpTypedSetCreate(node);
    }

    public void inAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCardinalitySetCreate(AMpSubsetCardinalitySetCreate node)
    {
        inAMpSubsetCardinalitySetCreate(node);
        if(node.getSetCreateSubsetCardinality() != null)
        {
            node.getSetCreateSubsetCardinality().apply(this);
        }
        outAMpSubsetCardinalitySetCreate(node);
    }

    public void inAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedAndSubsetCardinalitySetCreate(AMpTypedAndSubsetCardinalitySetCreate node)
    {
        inAMpTypedAndSubsetCardinalitySetCreate(node);
        if(node.getSetCreateTypedAndSubsetCardinality() != null)
        {
            node.getSetCreateTypedAndSubsetCardinality().apply(this);
        }
        outAMpTypedAndSubsetCardinalitySetCreate(node);
    }

    public void inAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateSimple(AMpSetCreateSimple node)
    {
        inAMpSetCreateSimple(node);
        if(node.getSetCreationOperOptions() != null)
        {
            node.getSetCreationOperOptions().apply(this);
        }
        if(node.getSetItems() != null)
        {
            node.getSetItems().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpSetCreateSimple(node);
    }

    public void inAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateTyped(AMpSetCreateTyped node)
    {
        inAMpSetCreateTyped(node);
        if(node.getTypedSetCreationOperOptions() != null)
        {
            node.getTypedSetCreationOperOptions().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getTypeCloseSetBody() != null)
        {
            node.getTypeCloseSetBody().apply(this);
        }
        outAMpSetCreateTyped(node);
    }

    public void inAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateSubsetCardinality(AMpSetCreateSubsetCardinality node)
    {
        inAMpSetCreateSubsetCardinality(node);
        if(node.getTypedSetCreationOperOptions() != null)
        {
            node.getTypedSetCreationOperOptions().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getTypeCloseSetBody() != null)
        {
            node.getTypeCloseSetBody().apply(this);
        }
        outAMpSetCreateSubsetCardinality(node);
    }

    public void inAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        defaultIn(node);
    }

    public void outAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetCreateTypedAndSubsetCardinality(AMpSetCreateTypedAndSubsetCardinality node)
    {
        inAMpSetCreateTypedAndSubsetCardinality(node);
        if(node.getTypedSetCreationOperOptions() != null)
        {
            node.getTypedSetCreationOperOptions().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getTypeCloseSetBody() != null)
        {
            node.getTypeCloseSetBody().apply(this);
        }
        outAMpSetCreateTypedAndSubsetCardinality(node);
    }

    public void inAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        defaultIn(node);
    }

    public void outAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypeCloseSetBody(AMpTypeCloseSetBody node)
    {
        inAMpTypeCloseSetBody(node);
        if(node.getMpGtWBraceOperator() != null)
        {
            node.getMpGtWBraceOperator().apply(this);
        }
        if(node.getSetItems() != null)
        {
            node.getSetItems().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpTypeCloseSetBody(node);
    }

    public void inAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdSetCreationOperOptions(AMpStdSetCreationOperOptions node)
    {
        inAMpStdSetCreationOperOptions(node);
        if(node.getMpSetCreationOperator() != null)
        {
            node.getMpSetCreationOperator().apply(this);
        }
        outAMpStdSetCreationOperOptions(node);
    }

    public void inAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolSetCreationOperOptions(AMpSymbolSetCreationOperOptions node)
    {
        inAMpSymbolSetCreationOperOptions(node);
        if(node.getMpSymbolMpSetCreationOperator() != null)
        {
            node.getMpSymbolMpSetCreationOperator().apply(this);
        }
        outAMpSymbolSetCreationOperOptions(node);
    }

    public void inAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdNameSetCreationOperOptions(AMpStdNameSetCreationOperOptions node)
    {
        inAMpStdNameSetCreationOperOptions(node);
        if(node.getMpSetCreationOperatorWName() != null)
        {
            node.getMpSetCreationOperatorWName().apply(this);
        }
        outAMpStdNameSetCreationOperOptions(node);
    }

    public void inAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolNameSetCreationOperOptions(AMpSymbolNameSetCreationOperOptions node)
    {
        inAMpSymbolNameSetCreationOperOptions(node);
        if(node.getMpSymbolSetCreationOperatorWName() != null)
        {
            node.getMpSymbolSetCreationOperatorWName().apply(this);
        }
        outAMpSymbolNameSetCreationOperOptions(node);
    }

    public void inAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdTypedSetCreationOperOptions(AMpStdTypedSetCreationOperOptions node)
    {
        inAMpStdTypedSetCreationOperOptions(node);
        if(node.getMpTypedMpSetCreationOperator() != null)
        {
            node.getMpTypedMpSetCreationOperator().apply(this);
        }
        outAMpStdTypedSetCreationOperOptions(node);
    }

    public void inAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolTypedSetCreationOperOptions(AMpSymbolTypedSetCreationOperOptions node)
    {
        inAMpSymbolTypedSetCreationOperOptions(node);
        if(node.getMpTypedMpSymbolMpSetCreationOperator() != null)
        {
            node.getMpTypedMpSymbolMpSetCreationOperator().apply(this);
        }
        outAMpSymbolTypedSetCreationOperOptions(node);
    }

    public void inAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdNameTypedSetCreationOperOptions(AMpStdNameTypedSetCreationOperOptions node)
    {
        inAMpStdNameTypedSetCreationOperOptions(node);
        if(node.getMpTypedSetCreationOperatorWName() != null)
        {
            node.getMpTypedSetCreationOperatorWName().apply(this);
        }
        outAMpStdNameTypedSetCreationOperOptions(node);
    }

    public void inAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolNameTypedSetCreationOperOptions(AMpSymbolNameTypedSetCreationOperOptions node)
    {
        inAMpSymbolNameTypedSetCreationOperOptions(node);
        if(node.getMpTypedSymbolSetCreationOperatorWName() != null)
        {
            node.getMpTypedSymbolSetCreationOperatorWName().apply(this);
        }
        outAMpSymbolNameTypedSetCreationOperOptions(node);
    }

    public void inAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewNameSetCreate(AMpNewNameSetCreate node)
    {
        inAMpNewNameSetCreate(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSetCreate() != null)
        {
            node.getSetCreate().apply(this);
        }
        outAMpNewNameSetCreate(node);
    }

    public void inAMpSetItems(AMpSetItems node)
    {
        defaultIn(node);
    }

    public void outAMpSetItems(AMpSetItems node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetItems(AMpSetItems node)
    {
        inAMpSetItems(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        {
            List<PSetItemsChildren> copy = new ArrayList<PSetItemsChildren>(node.getSetItemsChildren());
            for(PSetItemsChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpSetItems(node);
    }

    public void inAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        defaultIn(node);
    }

    public void outAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetItemsChildren(AMpSetItemsChildren node)
    {
        inAMpSetItemsChildren(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpSetItemsChildren(node);
    }

    public void inAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleSubsetCreation(AMpSimpleSubsetCreation node)
    {
        inAMpSimpleSubsetCreation(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        outAMpSimpleSubsetCreation(node);
    }

    public void inAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        defaultIn(node);
    }

    public void outAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExpandingSubsetCreation(AMpExpandingSubsetCreation node)
    {
        inAMpExpandingSubsetCreation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        outAMpExpandingSubsetCreation(node);
    }

    public void inAMpSubsetCreate(AMpSubsetCreate node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCreate(AMpSubsetCreate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCreate(AMpSubsetCreate node)
    {
        inAMpSubsetCreate(node);
        if(node.getMpSymbolSetCreationOperator() != null)
        {
            node.getMpSymbolSetCreationOperator().apply(this);
        }
        if(node.getSubsetBodyOptions() != null)
        {
            node.getSubsetBodyOptions().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpSubsetCreate(node);
    }

    public void inAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemsSubsetBodyOptions(AMpItemsSubsetBodyOptions node)
    {
        inAMpItemsSubsetBodyOptions(node);
        if(node.getSetItems() != null)
        {
            node.getSetItems().apply(this);
        }
        outAMpItemsSubsetBodyOptions(node);
    }

    public void inAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationSubsetBodyOptions(AMpAnnotationSubsetBodyOptions node)
    {
        inAMpAnnotationSubsetBodyOptions(node);
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        outAMpAnnotationSubsetBodyOptions(node);
    }

    public void inAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterSubsetBodyOptions(AMpFilterSubsetBodyOptions node)
    {
        inAMpFilterSubsetBodyOptions(node);
        if(node.getFilterStatement() != null)
        {
            node.getFilterStatement().apply(this);
        }
        outAMpFilterSubsetBodyOptions(node);
    }

    public void inAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAllSubsetBodyOptions(AMpAllSubsetBodyOptions node)
    {
        inAMpAllSubsetBodyOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpAllSubsetBodyOptions(node);
    }

    public void inAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptySubsetBodyOptions(AMpEmptySubsetBodyOptions node)
    {
        inAMpEmptySubsetBodyOptions(node);
        outAMpEmptySubsetBodyOptions(node);
    }

    public void inAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCreateAbbr(AMpSubsetCreateAbbr node)
    {
        inAMpSubsetCreateAbbr(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getSubsetBodyOptions() != null)
        {
            node.getSubsetBodyOptions().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpSubsetCreateAbbr(node);
    }

    public void inAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        defaultIn(node);
    }

    public void outAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessMpSymbolUseage(AMpAccessMpSymbolUseage node)
    {
        inAMpAccessMpSymbolUseage(node);
        if(node.getSymbolAccess() != null)
        {
            node.getSymbolAccess().apply(this);
        }
        outAMpAccessMpSymbolUseage(node);
    }

    public void inAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        defaultIn(node);
    }

    public void outAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCreationMpSymbolUseage(AMpCreationMpSymbolUseage node)
    {
        inAMpCreationMpSymbolUseage(node);
        if(node.getSymbolCreation() != null)
        {
            node.getSymbolCreation().apply(this);
        }
        outAMpCreationMpSymbolUseage(node);
    }

    public void inAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        defaultIn(node);
    }

    public void outAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStandardSymbolAccess(AMpStandardSymbolAccess node)
    {
        inAMpStandardSymbolAccess(node);
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        outAMpStandardSymbolAccess(node);
    }

    public void inAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        defaultIn(node);
    }

    public void outAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpHasChildernSymbolAccess(AMpHasChildernSymbolAccess node)
    {
        inAMpHasChildernSymbolAccess(node);
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        if(node.getSymbolChildren() != null)
        {
            node.getSymbolChildren().apply(this);
        }
        outAMpHasChildernSymbolAccess(node);
    }

    public void inAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        defaultIn(node);
    }

    public void outAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpChildrenSymbolChildren(AMpChildrenSymbolChildren node)
    {
        inAMpChildrenSymbolChildren(node);
        if(node.getSymbolchildOptions() != null)
        {
            node.getSymbolchildOptions().apply(this);
        }
        if(node.getSymbolChildren() != null)
        {
            node.getSymbolChildren().apply(this);
        }
        outAMpChildrenSymbolChildren(node);
    }

    public void inAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        defaultIn(node);
    }

    public void outAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEndSymbolChildren(AMpEndSymbolChildren node)
    {
        inAMpEndSymbolChildren(node);
        if(node.getSymbolchildEnd() != null)
        {
            node.getSymbolchildEnd().apply(this);
        }
        outAMpEndSymbolChildren(node);
    }

    public void inAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolcreationSymbolChildren(AMpSymbolcreationSymbolChildren node)
    {
        inAMpSymbolcreationSymbolChildren(node);
        if(node.getLatestartSymbolCreation() != null)
        {
            node.getLatestartSymbolCreation().apply(this);
        }
        outAMpSymbolcreationSymbolChildren(node);
    }

    public void inAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        defaultIn(node);
    }

    public void outAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLatestartSymbolCreation(AMpLatestartSymbolCreation node)
    {
        inAMpLatestartSymbolCreation(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSymbolCreation() != null)
        {
            node.getSymbolCreation().apply(this);
        }
        outAMpLatestartSymbolCreation(node);
    }

    public void inAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        defaultIn(node);
    }

    public void outAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdSymbolchildOptions(AMpIdSymbolchildOptions node)
    {
        inAMpIdSymbolchildOptions(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpIdSymbolchildOptions(node);
    }

    public void inAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        defaultIn(node);
    }

    public void outAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpQuotesSymbolchildOptions(AMpQuotesSymbolchildOptions node)
    {
        inAMpQuotesSymbolchildOptions(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAMpQuotesSymbolchildOptions(node);
    }

    public void inAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBacktiksSymbolchildOptions(AMpBacktiksSymbolchildOptions node)
    {
        inAMpBacktiksSymbolchildOptions(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        outAMpBacktiksSymbolchildOptions(node);
    }

    public void inAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        defaultIn(node);
    }

    public void outAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStandardSymbolchildEnd(AMpStandardSymbolchildEnd node)
    {
        inAMpStandardSymbolchildEnd(node);
        if(node.getSymbolchildOptions() != null)
        {
            node.getSymbolchildOptions().apply(this);
        }
        outAMpStandardSymbolchildEnd(node);
    }

    public void inAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetSymbolchildEnd(AMpSubsetSymbolchildEnd node)
    {
        inAMpSubsetSymbolchildEnd(node);
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        outAMpSubsetSymbolchildEnd(node);
    }

    public void inAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStandardSymbolOptions(AMpStandardSymbolOptions node)
    {
        inAMpStandardSymbolOptions(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpStandardSymbolOptions(node);
    }

    public void inAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDesctagnameSymbolOptions(AMpDesctagnameSymbolOptions node)
    {
        inAMpDesctagnameSymbolOptions(node);
        if(node.getMpColonPercentOperator() != null)
        {
            node.getMpColonPercentOperator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpDesctagnameSymbolOptions(node);
    }

    public void inAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpQuotesSymbolOptions(AMpQuotesSymbolOptions node)
    {
        inAMpQuotesSymbolOptions(node);
        if(node.getMpSymbolLiteralQuotes() != null)
        {
            node.getMpSymbolLiteralQuotes().apply(this);
        }
        outAMpQuotesSymbolOptions(node);
    }

    public void inAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBacktiksSymbolOptions(AMpBacktiksSymbolOptions node)
    {
        inAMpBacktiksSymbolOptions(node);
        if(node.getMpSymbolLiteralBacktiks() != null)
        {
            node.getMpSymbolLiteralBacktiks().apply(this);
        }
        outAMpBacktiksSymbolOptions(node);
    }

    public void inAMpSymbolCreation(AMpSymbolCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolCreation(AMpSymbolCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolCreation(AMpSymbolCreation node)
    {
        inAMpSymbolCreation(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        if(node.getSymbolCreationChildrenOptions() != null)
        {
            node.getSymbolCreationChildrenOptions().apply(this);
        }
        outAMpSymbolCreation(node);
    }

    public void inAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        defaultIn(node);
    }

    public void outAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPlusesSymbolCreationChildrenOptions(AMpPlusesSymbolCreationChildrenOptions node)
    {
        inAMpPlusesSymbolCreationChildrenOptions(node);
        {
            List<PSymbolCreationWChildPluses> copy = new ArrayList<PSymbolCreationWChildPluses>(node.getSymbolCreationWChildPluses());
            for(PSymbolCreationWChildPluses e : copy)
            {
                e.apply(this);
            }
        }
        outAMpPlusesSymbolCreationChildrenOptions(node);
    }

    public void inAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        defaultIn(node);
    }

    public void outAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNoPlusesSymbolCreationChildrenOptions(AMpNoPlusesSymbolCreationChildrenOptions node)
    {
        inAMpNoPlusesSymbolCreationChildrenOptions(node);
        {
            List<PSymbolCreationNoChildPluses> copy = new ArrayList<PSymbolCreationNoChildPluses>(node.getSymbolCreationNoChildPluses());
            for(PSymbolCreationNoChildPluses e : copy)
            {
                e.apply(this);
            }
        }
        outAMpNoPlusesSymbolCreationChildrenOptions(node);
    }

    public void inAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolCreationWChildPluses(AMpSymbolCreationWChildPluses node)
    {
        inAMpSymbolCreationWChildPluses(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSymbolOptions() != null)
        {
            node.getSymbolOptions().apply(this);
        }
        outAMpSymbolCreationWChildPluses(node);
    }

    public void inAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolCreationNoChildPluses(AMpSymbolCreationNoChildPluses node)
    {
        inAMpSymbolCreationNoChildPluses(node);
        if(node.getSymbolchildOptions() != null)
        {
            node.getSymbolchildOptions().apply(this);
        }
        outAMpSymbolCreationNoChildPluses(node);
    }

    public void inAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        defaultIn(node);
    }

    public void outAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStartsWithPrimaryMatrixAccess(AMpStartsWithPrimaryMatrixAccess node)
    {
        inAMpStartsWithPrimaryMatrixAccess(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        {
            List<PMatrixElemAccess> copy = new ArrayList<PMatrixElemAccess>(node.getMatrixElemAccess());
            for(PMatrixElemAccess e : copy)
            {
                e.apply(this);
            }
        }
        outAMpStartsWithPrimaryMatrixAccess(node);
    }

    public void inAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        defaultIn(node);
    }

    public void outAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStartsWithMatrixelementMatrixAccess(AMpStartsWithMatrixelementMatrixAccess node)
    {
        inAMpStartsWithMatrixelementMatrixAccess(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        {
            List<PMatrixElemAccess> copy = new ArrayList<PMatrixElemAccess>(node.getMatrixElemAccess());
            for(PMatrixElemAccess e : copy)
            {
                e.apply(this);
            }
        }
        outAMpStartsWithMatrixelementMatrixAccess(node);
    }

    public void inAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElemAccess(AMpMatrixElemAccess node)
    {
        inAMpMatrixElemAccess(node);
        if(node.getMatrixElemAccessOperatorOptions() != null)
        {
            node.getMatrixElemAccessOperatorOptions().apply(this);
        }
        if(node.getElementNameSpecifierOptions() != null)
        {
            node.getElementNameSpecifierOptions().apply(this);
        }
        if(node.getMatrixElemMultipleAccessOptions() != null)
        {
            node.getMatrixElemMultipleAccessOptions().apply(this);
        }
        outAMpMatrixElemAccess(node);
    }

    public void inAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdArrowMatrixElemAccessOperatorOptions(AMpStdArrowMatrixElemAccessOperatorOptions node)
    {
        inAMpStdArrowMatrixElemAccessOperatorOptions(node);
        if(node.getMpArrowOperator() != null)
        {
            node.getMpArrowOperator().apply(this);
        }
        outAMpStdArrowMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotatedArrowMatrixElemAccessOperatorOptions(AMpAnnotatedArrowMatrixElemAccessOperatorOptions node)
    {
        inAMpAnnotatedArrowMatrixElemAccessOperatorOptions(node);
        if(node.getMpDashLtOperator() != null)
        {
            node.getMpDashLtOperator().apply(this);
        }
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpAnnotatedArrowMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldaccessMatrixElemAccessOperatorOptions(AMpStdFieldaccessMatrixElemAccessOperatorOptions node)
    {
        inAMpStdFieldaccessMatrixElemAccessOperatorOptions(node);
        if(node.getMpFieldAccessOperator() != null)
        {
            node.getMpFieldAccessOperator().apply(this);
        }
        outAMpStdFieldaccessMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(AMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions node)
    {
        inAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(node);
        if(node.getMpColonLtOperator() != null)
        {
            node.getMpColonLtOperator().apply(this);
        }
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpAnnotatedFieldaccessMatrixElemAccessOperatorOptions(node);
    }

    public void inAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBracketElementNameSpecifierOptions(AMpBracketElementNameSpecifierOptions node)
    {
        inAMpBracketElementNameSpecifierOptions(node);
        if(node.getElementNameSpecifyByBracket() != null)
        {
            node.getElementNameSpecifyByBracket().apply(this);
        }
        outAMpBracketElementNameSpecifierOptions(node);
    }

    public void inAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        defaultIn(node);
    }

    public void outAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElemNameOrLabelElementNameSpecifierOptions(AMpElemNameOrLabelElementNameSpecifierOptions node)
    {
        inAMpElemNameOrLabelElementNameSpecifierOptions(node);
        if(node.getElementNameOrDescriptorLabel() != null)
        {
            node.getElementNameOrDescriptorLabel().apply(this);
        }
        outAMpElemNameOrLabelElementNameSpecifierOptions(node);
    }

    public void inAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        defaultIn(node);
    }

    public void outAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElemNameAndSecondAccessorElementNameSpecifierOptions(AMpElemNameAndSecondAccessorElementNameSpecifierOptions node)
    {
        inAMpElemNameAndSecondAccessorElementNameSpecifierOptions(node);
        if(node.getElemNameAndSecondAccessor() != null)
        {
            node.getElemNameAndSecondAccessor().apply(this);
        }
        outAMpElemNameAndSecondAccessorElementNameSpecifierOptions(node);
    }

    public void inAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        defaultIn(node);
    }

    public void outAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElementNameSpecifyByBracket(AMpElementNameSpecifyByBracket node)
    {
        inAMpElementNameSpecifyByBracket(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getFirstDynAccessor() != null)
        {
            node.getFirstDynAccessor().apply(this);
        }
        if(node.getSecondDynAccessor() != null)
        {
            node.getSecondDynAccessor().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAMpElementNameSpecifyByBracket(node);
    }

    public void inAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTagNameElementNameOrDescriptorLabel(AMpTagNameElementNameOrDescriptorLabel node)
    {
        inAMpTagNameElementNameOrDescriptorLabel(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpTagNameElementNameOrDescriptorLabel(node);
    }

    public void inAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        defaultIn(node);
    }

    public void outAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpLabelNameElementNameOrDescriptorLabel(AMpLabelNameElementNameOrDescriptorLabel node)
    {
        inAMpLabelNameElementNameOrDescriptorLabel(node);
        if(node.getLabelnameBacktik() != null)
        {
            node.getLabelnameBacktik().apply(this);
        }
        outAMpLabelNameElementNameOrDescriptorLabel(node);
    }

    public void inAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElemNameAndSecondAccessor(AMpElemNameAndSecondAccessor node)
    {
        inAMpElemNameAndSecondAccessor(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getSecondAccessor() != null)
        {
            node.getSecondAccessor().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAMpElemNameAndSecondAccessor(node);
    }

    public void inAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(AMpMatrixelementOneOrMoreNamescopesFirstDynAccessor node)
    {
        inAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(node);
        if(node.getMatrixElementNameIdentifierWOneOrMoreNamescopes() != null)
        {
            node.getMatrixElementNameIdentifierWOneOrMoreNamescopes().apply(this);
        }
        outAMpMatrixelementOneOrMoreNamescopesFirstDynAccessor(node);
    }

    public void inAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolExprFirstDynAccessor(AMpSymbolExprFirstDynAccessor node)
    {
        inAMpSymbolExprFirstDynAccessor(node);
        if(node.getSymbolExpression() != null)
        {
            node.getSymbolExpression().apply(this);
        }
        outAMpSymbolExprFirstDynAccessor(node);
    }

    public void inAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSecondDynAccessor(AMpSecondDynAccessor node)
    {
        inAMpSecondDynAccessor(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSecondAccessor() != null)
        {
            node.getSecondAccessor().apply(this);
        }
        outAMpSecondDynAccessor(node);
    }

    public void inAMpSecondAccessor(AMpSecondAccessor node)
    {
        defaultIn(node);
    }

    public void outAMpSecondAccessor(AMpSecondAccessor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSecondAccessor(AMpSecondAccessor node)
    {
        inAMpSecondAccessor(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpSecondAccessor(node);
    }

    public void inAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationSpaceshipUseage(AMpAnnotationSpaceshipUseage node)
    {
        inAMpAnnotationSpaceshipUseage(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getAnnotationUseage() != null)
        {
            node.getAnnotationUseage().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpAnnotationSpaceshipUseage(node);
    }

    public void inAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdMatrixElemMultipleAccessOptions(AMpStdMatrixElemMultipleAccessOptions node)
    {
        inAMpStdMatrixElemMultipleAccessOptions(node);
        if(node.getSubsetCreate() != null)
        {
            node.getSubsetCreate().apply(this);
        }
        outAMpStdMatrixElemMultipleAccessOptions(node);
    }

    public void inAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAbbrMatrixElemMultipleAccessOptions(AMpAbbrMatrixElemMultipleAccessOptions node)
    {
        inAMpAbbrMatrixElemMultipleAccessOptions(node);
        if(node.getSubsetCreateAbbr() != null)
        {
            node.getSubsetCreateAbbr().apply(this);
        }
        outAMpAbbrMatrixElemMultipleAccessOptions(node);
    }

    public void inAMpSymbolExpression(AMpSymbolExpression node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolExpression(AMpSymbolExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolExpression(AMpSymbolExpression node)
    {
        inAMpSymbolExpression(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpSymbolExpression(node);
    }

    public void inAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElemAccessNoLabels(AMpMatrixElemAccessNoLabels node)
    {
        inAMpMatrixElemAccessNoLabels(node);
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        {
            List<PMatrixElemAccessNoLabelsChildren> copy = new ArrayList<PMatrixElemAccessNoLabelsChildren>(node.getMatrixElemAccessNoLabelsChildren());
            for(PMatrixElemAccessNoLabelsChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpMatrixElemAccessNoLabels(node);
    }

    public void inAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixElemAccessNoLabelsChildren(AMpMatrixElemAccessNoLabelsChildren node)
    {
        inAMpMatrixElemAccessNoLabelsChildren(node);
        if(node.getArrowOrFieldAccess() != null)
        {
            node.getArrowOrFieldAccess().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        outAMpMatrixElemAccessNoLabelsChildren(node);
    }

    public void inAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpArrowArrowOrFieldAccess(AMpArrowArrowOrFieldAccess node)
    {
        inAMpArrowArrowOrFieldAccess(node);
        if(node.getMpArrowOperator() != null)
        {
            node.getMpArrowOperator().apply(this);
        }
        outAMpArrowArrowOrFieldAccess(node);
    }

    public void inAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldArrowOrFieldAccess(AMpFieldArrowOrFieldAccess node)
    {
        inAMpFieldArrowOrFieldAccess(node);
        if(node.getMpFieldAccessOperator() != null)
        {
            node.getMpFieldAccessOperator().apply(this);
        }
        outAMpFieldArrowOrFieldAccess(node);
    }

    public void inAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationUseage(AMpAnnotationUseage node)
    {
        inAMpAnnotationUseage(node);
        if(node.getAnnotationNameOptions() != null)
        {
            node.getAnnotationNameOptions().apply(this);
        }
        outAMpAnnotationUseage(node);
    }

    public void inAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdAnnotationNameOptions(AMpIdAnnotationNameOptions node)
    {
        inAMpIdAnnotationNameOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpIdAnnotationNameOptions(node);
    }

    public void inAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIntAnnotationNameOptions(AMpIntAnnotationNameOptions node)
    {
        inAMpIntAnnotationNameOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAMpIntAnnotationNameOptions(node);
    }

    public void inAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFloatAnnotationNameOptions(AMpFloatAnnotationNameOptions node)
    {
        inAMpFloatAnnotationNameOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        outAMpFloatAnnotationNameOptions(node);
    }

    public void inAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationStatement(AMpAnnotationStatement node)
    {
        inAMpAnnotationStatement(node);
        if(node.getAnnotationCall() != null)
        {
            node.getAnnotationCall().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpAnnotationStatement(node);
    }

    public void inAMpAnnotationCall(AMpAnnotationCall node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationCall(AMpAnnotationCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationCall(AMpAnnotationCall node)
    {
        inAMpAnnotationCall(node);
        if(node.getAnnotationNameOptions() != null)
        {
            node.getAnnotationNameOptions().apply(this);
        }
        {
            List<PAnnotationCallParameterOptions> copy = new ArrayList<PAnnotationCallParameterOptions>(node.getAnnotationCallParameterOptions());
            for(PAnnotationCallParameterOptions e : copy)
            {
                e.apply(this);
            }
        }
        outAMpAnnotationCall(node);
    }

    public void inAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        defaultIn(node);
    }

    public void outAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCodeClosureAnnotationCallParameterOptions(AMpCodeClosureAnnotationCallParameterOptions node)
    {
        inAMpCodeClosureAnnotationCallParameterOptions(node);
        if(node.getCodeClosure() != null)
        {
            node.getCodeClosure().apply(this);
        }
        outAMpCodeClosureAnnotationCallParameterOptions(node);
    }

    public void inAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMpAnnotationsDeclaration(AMpMpAnnotationsDeclaration node)
    {
        inAMpMpAnnotationsDeclaration(node);
        if(node.getMpAnnotationsKeyword() != null)
        {
            node.getMpAnnotationsKeyword().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PMpAnnotationsBodyOptions> copy = new ArrayList<PMpAnnotationsBodyOptions>(node.getMpAnnotationsBodyOptions());
            for(PMpAnnotationsBodyOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpMpAnnotationsDeclaration(node);
    }

    public void inAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockMpAnnotationsBodyOptions(AMpCatchBlockMpAnnotationsBodyOptions node)
    {
        inAMpCatchBlockMpAnnotationsBodyOptions(node);
        if(node.getCatchBlockDeclaration() != null)
        {
            node.getCatchBlockDeclaration().apply(this);
        }
        outAMpCatchBlockMpAnnotationsBodyOptions(node);
    }

    public void inAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationHandlerMpAnnotationsBodyOptions(AMpAnnotationHandlerMpAnnotationsBodyOptions node)
    {
        inAMpAnnotationHandlerMpAnnotationsBodyOptions(node);
        if(node.getAnnotationHandlerDeclaration() != null)
        {
            node.getAnnotationHandlerDeclaration().apply(this);
        }
        outAMpAnnotationHandlerMpAnnotationsBodyOptions(node);
    }

    public void inAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockDeclaration(AMpCatchBlockDeclaration node)
    {
        inAMpCatchBlockDeclaration(node);
        if(node.getCatchTypeList() != null)
        {
            node.getCatchTypeList().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PCatchBlockStatement> copy = new ArrayList<PCatchBlockStatement>(node.getCatchBlockStatement());
            for(PCatchBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpCatchBlockDeclaration(node);
    }

    public void inAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockStatement(AMpCatchBlockStatement node)
    {
        inAMpCatchBlockStatement(node);
        if(node.getAnnotationBlockStatement() != null)
        {
            node.getAnnotationBlockStatement().apply(this);
        }
        outAMpCatchBlockStatement(node);
    }

    public void inAMpCatchTypeList(AMpCatchTypeList node)
    {
        defaultIn(node);
    }

    public void outAMpCatchTypeList(AMpCatchTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchTypeList(AMpCatchTypeList node)
    {
        inAMpCatchTypeList(node);
        if(node.getCatchType() != null)
        {
            node.getCatchType().apply(this);
        }
        {
            List<PCatchTypeParameter> copy = new ArrayList<PCatchTypeParameter>(node.getCatchTypeParameter());
            for(PCatchTypeParameter e : copy)
            {
                e.apply(this);
            }
        }
        outAMpCatchTypeList(node);
    }

    public void inAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        defaultIn(node);
    }

    public void outAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchTypeParameter(AMpCatchTypeParameter node)
    {
        inAMpCatchTypeParameter(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getCatchType() != null)
        {
            node.getCatchType().apply(this);
        }
        outAMpCatchTypeParameter(node);
    }

    public void inAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpErrorsCatchType(AMpErrorsCatchType node)
    {
        inAMpErrorsCatchType(node);
        if(node.getMpErrorsKeyword() != null)
        {
            node.getMpErrorsKeyword().apply(this);
        }
        outAMpErrorsCatchType(node);
    }

    public void inAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyCatchType(AMpEmptyCatchType node)
    {
        inAMpEmptyCatchType(node);
        if(node.getMpEmptyKeyword() != null)
        {
            node.getMpEmptyKeyword().apply(this);
        }
        outAMpEmptyCatchType(node);
    }

    public void inAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFiltersCatchType(AMpFiltersCatchType node)
    {
        inAMpFiltersCatchType(node);
        if(node.getMpFiltersKeyword() != null)
        {
            node.getMpFiltersKeyword().apply(this);
        }
        outAMpFiltersCatchType(node);
    }

    public void inAMpAllCatchType(AMpAllCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpAllCatchType(AMpAllCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAllCatchType(AMpAllCatchType node)
    {
        inAMpAllCatchType(node);
        if(node.getMpAllKeyword() != null)
        {
            node.getMpAllKeyword().apply(this);
        }
        outAMpAllCatchType(node);
    }

    public void inAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExceptionsCatchType(AMpExceptionsCatchType node)
    {
        inAMpExceptionsCatchType(node);
        if(node.getMpExceptionsKeyword() != null)
        {
            node.getMpExceptionsKeyword().apply(this);
        }
        outAMpExceptionsCatchType(node);
    }

    public void inAMpIdCatchType(AMpIdCatchType node)
    {
        defaultIn(node);
    }

    public void outAMpIdCatchType(AMpIdCatchType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdCatchType(AMpIdCatchType node)
    {
        inAMpIdCatchType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpIdCatchType(node);
    }

    public void inAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationHandlerDeclaration(AMpAnnotationHandlerDeclaration node)
    {
        inAMpAnnotationHandlerDeclaration(node);
        if(node.getAnnotationHandlerNameOptions() != null)
        {
            node.getAnnotationHandlerNameOptions().apply(this);
        }
        if(node.getAnnotationParameters() != null)
        {
            node.getAnnotationParameters().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PAnnotationBlockStatement> copy = new ArrayList<PAnnotationBlockStatement>(node.getAnnotationBlockStatement());
            for(PAnnotationBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpAnnotationHandlerDeclaration(node);
    }

    public void inAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationNamesAnnotationHandlerNameOptions(AMpAnnotationNamesAnnotationHandlerNameOptions node)
    {
        inAMpAnnotationNamesAnnotationHandlerNameOptions(node);
        if(node.getAnnotationNameOptions() != null)
        {
            node.getAnnotationNameOptions().apply(this);
        }
        outAMpAnnotationNamesAnnotationHandlerNameOptions(node);
    }

    public void inAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDefaultAnnotationHandlerNameOptions(AMpDefaultAnnotationHandlerNameOptions node)
    {
        inAMpDefaultAnnotationHandlerNameOptions(node);
        if(node.getMpAnnoteDefaultKeyword() != null)
        {
            node.getMpAnnoteDefaultKeyword().apply(this);
        }
        outAMpDefaultAnnotationHandlerNameOptions(node);
    }

    public void inAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationParameters(AMpAnnotationParameters node)
    {
        inAMpAnnotationParameters(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFormalParameterList() != null)
        {
            node.getFormalParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpAnnotationParameters(node);
    }

    public void inAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessorReturnAnnotationBlockStatement(AMpAccessorReturnAnnotationBlockStatement node)
    {
        inAMpAccessorReturnAnnotationBlockStatement(node);
        if(node.getAccessorReturnStatement() != null)
        {
            node.getAccessorReturnStatement().apply(this);
        }
        outAMpAccessorReturnAnnotationBlockStatement(node);
    }

    public void inAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixStmtAnnotationBlockStatement(AMpMatrixStmtAnnotationBlockStatement node)
    {
        inAMpMatrixStmtAnnotationBlockStatement(node);
        if(node.getMatrixStatement() != null)
        {
            node.getMatrixStatement().apply(this);
        }
        outAMpMatrixStmtAnnotationBlockStatement(node);
    }

    public void inAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterAnnotationBlockStatement(AMpFilterAnnotationBlockStatement node)
    {
        inAMpFilterAnnotationBlockStatement(node);
        if(node.getFilterStatement() != null)
        {
            node.getFilterStatement().apply(this);
        }
        outAMpFilterAnnotationBlockStatement(node);
    }

    public void inAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationHandlerAnnotationBlockStatement(AMpAnnotationHandlerAnnotationBlockStatement node)
    {
        inAMpAnnotationHandlerAnnotationBlockStatement(node);
        if(node.getAnnotationHandlerDeclaration() != null)
        {
            node.getAnnotationHandlerDeclaration().apply(this);
        }
        outAMpAnnotationHandlerAnnotationBlockStatement(node);
    }

    public void inAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCatchBlockAnnotationBlockStatement(AMpCatchBlockAnnotationBlockStatement node)
    {
        inAMpCatchBlockAnnotationBlockStatement(node);
        if(node.getAnnotationBlockErrorHandler() != null)
        {
            node.getAnnotationBlockErrorHandler().apply(this);
        }
        outAMpCatchBlockAnnotationBlockStatement(node);
    }

    public void inAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        defaultIn(node);
    }

    public void outAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAnnotationBlockErrorHandler(AMpAnnotationBlockErrorHandler node)
    {
        inAMpAnnotationBlockErrorHandler(node);
        if(node.getMpErrorsKeyword() != null)
        {
            node.getMpErrorsKeyword().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PAnnotationBlockErrorStatement> copy = new ArrayList<PAnnotationBlockErrorStatement>(node.getAnnotationBlockErrorStatement());
            for(PAnnotationBlockErrorStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpAnnotationBlockErrorHandler(node);
    }

    public void inAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessorReturnAnnotationBlockErrorStatement(AMpAccessorReturnAnnotationBlockErrorStatement node)
    {
        inAMpAccessorReturnAnnotationBlockErrorStatement(node);
        if(node.getAccessorReturnStatement() != null)
        {
            node.getAccessorReturnStatement().apply(this);
        }
        outAMpAccessorReturnAnnotationBlockErrorStatement(node);
    }

    public void inAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixStmtAnnotationBlockErrorStatement(AMpMatrixStmtAnnotationBlockErrorStatement node)
    {
        inAMpMatrixStmtAnnotationBlockErrorStatement(node);
        if(node.getMatrixStatement() != null)
        {
            node.getMatrixStatement().apply(this);
        }
        outAMpMatrixStmtAnnotationBlockErrorStatement(node);
    }

    public void inAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpAccessorReturnStatement(AMpAccessorReturnStatement node)
    {
        inAMpAccessorReturnStatement(node);
        if(node.getMpAccessorKeyword() != null)
        {
            node.getMpAccessorKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpReturnKeyword() != null)
        {
            node.getMpReturnKeyword().apply(this);
        }
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpAccessorReturnStatement(node);
    }

    public void inAMpFilterStatement(AMpFilterStatement node)
    {
        defaultIn(node);
    }

    public void outAMpFilterStatement(AMpFilterStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterStatement(AMpFilterStatement node)
    {
        inAMpFilterStatement(node);
        if(node.getMpSelectKeyword() != null)
        {
            node.getMpSelectKeyword().apply(this);
        }
        if(node.getMpFromKeyword() != null)
        {
            node.getMpFromKeyword().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFilterWhere() != null)
        {
            node.getFilterWhere().apply(this);
        }
        if(node.getFilterFields() != null)
        {
            node.getFilterFields().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpFilterStatement(node);
    }

    public void inAMpFilterWhere(AMpFilterWhere node)
    {
        defaultIn(node);
    }

    public void outAMpFilterWhere(AMpFilterWhere node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterWhere(AMpFilterWhere node)
    {
        inAMpFilterWhere(node);
        if(node.getMpWhereKeyword() != null)
        {
            node.getMpWhereKeyword().apply(this);
        }
        if(node.getWhereExpression() != null)
        {
            node.getWhereExpression().apply(this);
        }
        outAMpFilterWhere(node);
    }

    public void inAMpFilterFields(AMpFilterFields node)
    {
        defaultIn(node);
    }

    public void outAMpFilterFields(AMpFilterFields node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterFields(AMpFilterFields node)
    {
        inAMpFilterFields(node);
        if(node.getMpFieldsKeyword() != null)
        {
            node.getMpFieldsKeyword().apply(this);
        }
        if(node.getFilterFieldlist() != null)
        {
            node.getFilterFieldlist().apply(this);
        }
        outAMpFilterFields(node);
    }

    public void inAMpWhereExpression(AMpWhereExpression node)
    {
        defaultIn(node);
    }

    public void outAMpWhereExpression(AMpWhereExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpWhereExpression(AMpWhereExpression node)
    {
        inAMpWhereExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpWhereExpression(node);
    }

    public void inAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        defaultIn(node);
    }

    public void outAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterFieldlist(AMpFilterFieldlist node)
    {
        inAMpFilterFieldlist(node);
        if(node.getFilterField() != null)
        {
            node.getFilterField().apply(this);
        }
        {
            List<PFilterFieldChildren> copy = new ArrayList<PFilterFieldChildren>(node.getFilterFieldChildren());
            for(PFilterFieldChildren e : copy)
            {
                e.apply(this);
            }
        }
        outAMpFilterFieldlist(node);
    }

    public void inAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        defaultIn(node);
    }

    public void outAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterFieldChildren(AMpFilterFieldChildren node)
    {
        inAMpFilterFieldChildren(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFilterField() != null)
        {
            node.getFilterField().apply(this);
        }
        outAMpFilterFieldChildren(node);
    }

    public void inAMpFilterField(AMpFilterField node)
    {
        defaultIn(node);
    }

    public void outAMpFilterField(AMpFilterField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFilterField(AMpFilterField node)
    {
        inAMpFilterField(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpFilterField(node);
    }

    public void inAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarMpMatrixTypes(AMpVarMpMatrixTypes node)
    {
        inAMpVarMpMatrixTypes(node);
        if(node.getMpVarKeyword() != null)
        {
            node.getMpVarKeyword().apply(this);
        }
        outAMpVarMpMatrixTypes(node);
    }

    public void inAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolMpMatrixTypes(AMpSymbolMpMatrixTypes node)
    {
        inAMpSymbolMpMatrixTypes(node);
        if(node.getMpSymbolKeyword() != null)
        {
            node.getMpSymbolKeyword().apply(this);
        }
        outAMpSymbolMpMatrixTypes(node);
    }

    public void inAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpClosureMpMatrixTypes(AMpClosureMpMatrixTypes node)
    {
        inAMpClosureMpMatrixTypes(node);
        if(node.getMpClosureKeyword() != null)
        {
            node.getMpClosureKeyword().apply(this);
        }
        outAMpClosureMpMatrixTypes(node);
    }

    public void inAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMpMatrixTypes(AMpMatrixMpMatrixTypes node)
    {
        inAMpMatrixMpMatrixTypes(node);
        if(node.getMpMatrixElementTypes() != null)
        {
            node.getMpMatrixElementTypes().apply(this);
        }
        outAMpMatrixMpMatrixTypes(node);
    }

    public void inAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        defaultIn(node);
    }

    public void outAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetMpMatrixTypes(AMpSetMpMatrixTypes node)
    {
        inAMpSetMpMatrixTypes(node);
        if(node.getMpSetType() != null)
        {
            node.getMpSetType().apply(this);
        }
        outAMpSetMpMatrixTypes(node);
    }

    public void inAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMpMatrixElementTypes(AMpMatrixMpMatrixElementTypes node)
    {
        inAMpMatrixMpMatrixElementTypes(node);
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        outAMpMatrixMpMatrixElementTypes(node);
    }

    public void inAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaMpMatrixElementTypes(AMpSchemaMpMatrixElementTypes node)
    {
        inAMpSchemaMpMatrixElementTypes(node);
        if(node.getMpSchemaKeyword() != null)
        {
            node.getMpSchemaKeyword().apply(this);
        }
        outAMpSchemaMpMatrixElementTypes(node);
    }

    public void inAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorMpMatrixElementTypes(AMpDescriptorMpMatrixElementTypes node)
    {
        inAMpDescriptorMpMatrixElementTypes(node);
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        outAMpDescriptorMpMatrixElementTypes(node);
    }

    public void inAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemMpMatrixElementTypes(AMpItemMpMatrixElementTypes node)
    {
        inAMpItemMpMatrixElementTypes(node);
        if(node.getMpItemKeyword() != null)
        {
            node.getMpItemKeyword().apply(this);
        }
        outAMpItemMpMatrixElementTypes(node);
    }

    public void inAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldMpMatrixElementTypes(AMpFieldMpMatrixElementTypes node)
    {
        inAMpFieldMpMatrixElementTypes(node);
        if(node.getMpFieldKeyword() != null)
        {
            node.getMpFieldKeyword().apply(this);
        }
        outAMpFieldMpMatrixElementTypes(node);
    }

    public void inAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        defaultIn(node);
    }

    public void outAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElementMpMatrixElementTypes(AMpElementMpMatrixElementTypes node)
    {
        inAMpElementMpMatrixElementTypes(node);
        if(node.getMpElementKeyword() != null)
        {
            node.getMpElementKeyword().apply(this);
        }
        outAMpElementMpMatrixElementTypes(node);
    }

    public void inAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSimpleMpSetType(AMpSimpleMpSetType node)
    {
        inAMpSimpleMpSetType(node);
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        outAMpSimpleMpSetType(node);
    }

    public void inAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedMpSetType(AMpTypedMpSetType node)
    {
        inAMpTypedMpSetType(node);
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpTypedMpSetType(node);
    }

    public void inAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSubsetCardinalityMpSetType(AMpSubsetCardinalityMpSetType node)
    {
        inAMpSubsetCardinalityMpSetType(node);
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpSubsetCardinalityMpSetType(node);
    }

    public void inAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        defaultIn(node);
    }

    public void outAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpTypedAndSubsetCardinalityMpSetType(AMpTypedAndSubsetCardinalityMpSetType node)
    {
        inAMpTypedAndSubsetCardinalityMpSetType(node);
        if(node.getMpSetKeyword() != null)
        {
            node.getMpSetKeyword().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMpTypes() != null)
        {
            node.getMpTypes().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMpIntegerLiteral() != null)
        {
            node.getMpIntegerLiteral().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpTypedAndSubsetCardinalityMpSetType(node);
    }

    public void inAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixMatrixElementCreation(AMpMatrixMatrixElementCreation node)
    {
        inAMpMatrixMatrixElementCreation(node);
        if(node.getMatrixNewDeclaration() != null)
        {
            node.getMatrixNewDeclaration().apply(this);
        }
        outAMpMatrixMatrixElementCreation(node);
    }

    public void inAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaMatrixElementCreation(AMpSchemaMatrixElementCreation node)
    {
        inAMpSchemaMatrixElementCreation(node);
        if(node.getSchemaNewDeclaration() != null)
        {
            node.getSchemaNewDeclaration().apply(this);
        }
        outAMpSchemaMatrixElementCreation(node);
    }

    public void inAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorMatrixElementCreation(AMpDescriptorMatrixElementCreation node)
    {
        inAMpDescriptorMatrixElementCreation(node);
        if(node.getDescriptorNew() != null)
        {
            node.getDescriptorNew().apply(this);
        }
        outAMpDescriptorMatrixElementCreation(node);
    }

    public void inAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemMatrixElementCreation(AMpItemMatrixElementCreation node)
    {
        inAMpItemMatrixElementCreation(node);
        if(node.getItemNew() != null)
        {
            node.getItemNew().apply(this);
        }
        outAMpItemMatrixElementCreation(node);
    }

    public void inAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        defaultIn(node);
    }

    public void outAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldMatrixElementCreation(AMpFieldMatrixElementCreation node)
    {
        inAMpFieldMatrixElementCreation(node);
        if(node.getFieldNew() != null)
        {
            node.getFieldNew().apply(this);
        }
        outAMpFieldMatrixElementCreation(node);
    }

    public void inAMpDescriptorNew(AMpDescriptorNew node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorNew(AMpDescriptorNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorNew(AMpDescriptorNew node)
    {
        inAMpDescriptorNew(node);
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getNewUsesSchema() != null)
        {
            node.getNewUsesSchema().apply(this);
        }
        if(node.getDescriptorNewBodyOptions() != null)
        {
            node.getDescriptorNewBodyOptions().apply(this);
        }
        outAMpDescriptorNew(node);
    }

    public void inAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBracesDescriptorNewBodyOptions(AMpBracesDescriptorNewBodyOptions node)
    {
        inAMpBracesDescriptorNewBodyOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getDescriptorNewBody() != null)
        {
            node.getDescriptorNewBody().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpBracesDescriptorNewBodyOptions(node);
    }

    public void inAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyDescriptorNewBodyOptions(AMpEmptyDescriptorNewBodyOptions node)
    {
        inAMpEmptyDescriptorNewBodyOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpEmptyDescriptorNewBodyOptions(node);
    }

    public void inAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorNewBody(AMpDescriptorNewBody node)
    {
        inAMpDescriptorNewBody(node);
        if(node.getDescriptorHeadStd() != null)
        {
            node.getDescriptorHeadStd().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getDescriptorFieldAndBodyOptions() != null)
        {
            node.getDescriptorFieldAndBodyOptions().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpDescriptorNewBody(node);
    }

    public void inAMpItemNew(AMpItemNew node)
    {
        defaultIn(node);
    }

    public void outAMpItemNew(AMpItemNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemNew(AMpItemNew node)
    {
        inAMpItemNew(node);
        if(node.getMpItemKeyword() != null)
        {
            node.getMpItemKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getNewUsesSchema() != null)
        {
            node.getNewUsesSchema().apply(this);
        }
        if(node.getItemNewBodyOptions() != null)
        {
            node.getItemNewBodyOptions().apply(this);
        }
        outAMpItemNew(node);
    }

    public void inAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpBracesItemNewBodyOptions(AMpBracesItemNewBodyOptions node)
    {
        inAMpBracesItemNewBodyOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getItemNewBody() != null)
        {
            node.getItemNewBody().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpBracesItemNewBodyOptions(node);
    }

    public void inAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyItemNewBodyOptions(AMpEmptyItemNewBodyOptions node)
    {
        inAMpEmptyItemNewBodyOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpEmptyItemNewBodyOptions(node);
    }

    public void inAMpItemNewBody(AMpItemNewBody node)
    {
        defaultIn(node);
    }

    public void outAMpItemNewBody(AMpItemNewBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItemNewBody(AMpItemNewBody node)
    {
        inAMpItemNewBody(node);
        if(node.getItemNewNameOptions() != null)
        {
            node.getItemNewNameOptions().apply(this);
        }
        if(node.getUsesSchemas() != null)
        {
            node.getUsesSchemas().apply(this);
        }
        if(node.getDescriptorFieldAndBodyOptions() != null)
        {
            node.getDescriptorFieldAndBodyOptions().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpItemNewBody(node);
    }

    public void inAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdItemNewNameOptions(AMpStdItemNewNameOptions node)
    {
        inAMpStdItemNewNameOptions(node);
        if(node.getDescriptorHeadHiddenTagname() != null)
        {
            node.getDescriptorHeadHiddenTagname().apply(this);
        }
        outAMpStdItemNewNameOptions(node);
    }

    public void inAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        defaultIn(node);
    }

    public void outAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPassInNameItemNewNameOptions(AMpPassInNameItemNewNameOptions node)
    {
        inAMpPassInNameItemNewNameOptions(node);
        if(node.getElementNameSpecifyByBracket() != null)
        {
            node.getElementNameSpecifyByBracket().apply(this);
        }
        outAMpPassInNameItemNewNameOptions(node);
    }

    public void inAMpFieldNew(AMpFieldNew node)
    {
        defaultIn(node);
    }

    public void outAMpFieldNew(AMpFieldNew node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldNew(AMpFieldNew node)
    {
        inAMpFieldNew(node);
        if(node.getMpFieldKeyword() != null)
        {
            node.getMpFieldKeyword().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpNewKeyword() != null)
        {
            node.getMpNewKeyword().apply(this);
        }
        if(node.getNewUsesSchema() != null)
        {
            node.getNewUsesSchema().apply(this);
        }
        if(node.getFieldBody() != null)
        {
            node.getFieldBody().apply(this);
        }
        outAMpFieldNew(node);
    }

    public void inAMpStdFieldBody(AMpStdFieldBody node)
    {
        defaultIn(node);
    }

    public void outAMpStdFieldBody(AMpStdFieldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStdFieldBody(AMpStdFieldBody node)
    {
        inAMpStdFieldBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getMatrixElemAccessOptionsFromFieldBody() != null)
        {
            node.getMatrixElemAccessOptionsFromFieldBody().apply(this);
        }
        if(node.getParameterMappingToValue() != null)
        {
            node.getParameterMappingToValue().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpStdFieldBody(node);
    }

    public void inAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        defaultIn(node);
    }

    public void outAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpEmptyFieldBody(AMpEmptyFieldBody node)
    {
        inAMpEmptyFieldBody(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpEmptyFieldBody(node);
    }

    public void inAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        defaultIn(node);
    }

    public void outAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewUsesSchema(AMpNewUsesSchema node)
    {
        inAMpNewUsesSchema(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMpUsesKeyword() != null)
        {
            node.getMpUsesKeyword().apply(this);
        }
        if(node.getNewSchemaOptions() != null)
        {
            node.getNewSchemaOptions().apply(this);
        }
        outAMpNewUsesSchema(node);
    }

    public void inAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        defaultIn(node);
    }

    public void outAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSetNewSchemaOptions(AMpSetNewSchemaOptions node)
    {
        inAMpSetNewSchemaOptions(node);
        if(node.getNewSchemaSet() != null)
        {
            node.getNewSchemaSet().apply(this);
        }
        outAMpSetNewSchemaOptions(node);
    }

    public void inAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        defaultIn(node);
    }

    public void outAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNewSchemaSet(AMpNewSchemaSet node)
    {
        inAMpNewSchemaSet(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getSchemaNameList() != null)
        {
            node.getSchemaNameList().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpNewSchemaSet(node);
    }

    public void inAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(AMpMatrixAccessMatrixElemAccessOptionsFromFieldBody node)
    {
        inAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(node);
        if(node.getMatrixElemAccessNoLabels() != null)
        {
            node.getMatrixElemAccessNoLabels().apply(this);
        }
        outAMpMatrixAccessMatrixElemAccessOptionsFromFieldBody(node);
    }

    public void inAMpCodeClosure(AMpCodeClosure node)
    {
        defaultIn(node);
    }

    public void outAMpCodeClosure(AMpCodeClosure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpCodeClosure(AMpCodeClosure node)
    {
        inAMpCodeClosure(node);
        if(node.getMpCodeClosureOperator() != null)
        {
            node.getMpCodeClosureOperator().apply(this);
        }
        {
            List<PCodeClosureStatementOptions> copy = new ArrayList<PCodeClosureStatementOptions>(node.getCodeClosureStatementOptions());
            for(PCodeClosureStatementOptions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpCodeClosure(node);
    }

    public void inAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        defaultIn(node);
    }

    public void outAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExpressionCodeClosureStatementOptions(AMpExpressionCodeClosureStatementOptions node)
    {
        inAMpExpressionCodeClosureStatementOptions(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpExpressionCodeClosureStatementOptions(node);
    }

    public void inAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        defaultIn(node);
    }

    public void outAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStatementCodeClosureStatementOptions(AMpStatementCodeClosureStatementOptions node)
    {
        inAMpStatementCodeClosureStatementOptions(node);
        if(node.getMatrixStatement() != null)
        {
            node.getMatrixStatement().apply(this);
        }
        outAMpStatementCodeClosureStatementOptions(node);
    }

    public void inAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixFieldExpression(AMpMatrixFieldExpression node)
    {
        inAMpMatrixFieldExpression(node);
        if(node.getMatrixFieldExpressionContinuation() != null)
        {
            node.getMatrixFieldExpressionContinuation().apply(this);
        }
        outAMpMatrixFieldExpression(node);
    }

    public void inAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixFieldExpressionContinuation(AMpMatrixFieldExpressionContinuation node)
    {
        inAMpMatrixFieldExpressionContinuation(node);
        if(node.getMatrixFieldExpressionOptions() != null)
        {
            node.getMatrixFieldExpressionOptions().apply(this);
        }
        if(node.getContinuationOperator() != null)
        {
            node.getContinuationOperator().apply(this);
        }
        outAMpMatrixFieldExpressionContinuation(node);
    }

    public void inAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixExpressionMatrixFieldExpressionOptions(AMpMatrixExpressionMatrixFieldExpressionOptions node)
    {
        inAMpMatrixExpressionMatrixFieldExpressionOptions(node);
        if(node.getMatrixExpression() != null)
        {
            node.getMatrixExpression().apply(this);
        }
        outAMpMatrixExpressionMatrixFieldExpressionOptions(node);
    }

    public void inAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(AMpFieldValueOperatorOptionsMatrixFieldExpressionOptions node)
    {
        inAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(node);
        if(node.getFieldValueOperatorOptions() != null)
        {
            node.getFieldValueOperatorOptions().apply(this);
        }
        outAMpFieldValueOperatorOptionsMatrixFieldExpressionOptions(node);
    }

    public void inAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrimitiveMatrixFieldExpressionOptions(AMpPrimitiveMatrixFieldExpressionOptions node)
    {
        inAMpPrimitiveMatrixFieldExpressionOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpPrimitiveMatrixFieldExpressionOptions(node);
    }

    public void inAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        defaultIn(node);
    }

    public void outAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpReferenceMatrixFieldExpressionOptions(AMpReferenceMatrixFieldExpressionOptions node)
    {
        inAMpReferenceMatrixFieldExpressionOptions(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outAMpReferenceMatrixFieldExpressionOptions(node);
    }

    public void inAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDefaultFieldValueOperatorOptions(AMpDefaultFieldValueOperatorOptions node)
    {
        inAMpDefaultFieldValueOperatorOptions(node);
        if(node.getDefaultFieldvalueOptions() != null)
        {
            node.getDefaultFieldvalueOptions().apply(this);
        }
        outAMpDefaultFieldValueOperatorOptions(node);
    }

    public void inAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpUnusedFieldValueOperatorOptions(AMpUnusedFieldValueOperatorOptions node)
    {
        inAMpUnusedFieldValueOperatorOptions(node);
        if(node.getUnusedFieldvalueOptions() != null)
        {
            node.getUnusedFieldvalueOptions().apply(this);
        }
        outAMpUnusedFieldValueOperatorOptions(node);
    }

    public void inAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDittoPrevFieldValueOperatorOptions(AMpDittoPrevFieldValueOperatorOptions node)
    {
        inAMpDittoPrevFieldValueOperatorOptions(node);
        if(node.getDittoPrevFieldvalueOptions() != null)
        {
            node.getDittoPrevFieldvalueOptions().apply(this);
        }
        outAMpDittoPrevFieldValueOperatorOptions(node);
    }

    public void inAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        defaultIn(node);
    }

    public void outAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDittoPrevLevelFieldValueOperatorOptions(AMpDittoPrevLevelFieldValueOperatorOptions node)
    {
        inAMpDittoPrevLevelFieldValueOperatorOptions(node);
        if(node.getDittoPrevLevelFieldvalueOptions() != null)
        {
            node.getDittoPrevLevelFieldvalueOptions().apply(this);
        }
        outAMpDittoPrevLevelFieldValueOperatorOptions(node);
    }

    public void inAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpDefaultFieldvalueOptions(AMpOpDefaultFieldvalueOptions node)
    {
        inAMpOpDefaultFieldvalueOptions(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMpOpDefaultFieldvalueOptions(node);
    }

    public void inAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDefaultFieldvalueOptions(AMpVarDefaultFieldvalueOptions node)
    {
        inAMpVarDefaultFieldvalueOptions(node);
        if(node.getMpDefaultKeyword() != null)
        {
            node.getMpDefaultKeyword().apply(this);
        }
        outAMpVarDefaultFieldvalueOptions(node);
    }

    public void inAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpUnusedFieldvalueOptions(AMpOpUnusedFieldvalueOptions node)
    {
        inAMpOpUnusedFieldvalueOptions(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMpOpUnusedFieldvalueOptions(node);
    }

    public void inAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarUnusedFieldvalueOptions(AMpVarUnusedFieldvalueOptions node)
    {
        inAMpVarUnusedFieldvalueOptions(node);
        if(node.getMpUnusedKeyword() != null)
        {
            node.getMpUnusedKeyword().apply(this);
        }
        outAMpVarUnusedFieldvalueOptions(node);
    }

    public void inAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpDittoPrevFieldvalueOptions(AMpOpDittoPrevFieldvalueOptions node)
    {
        inAMpOpDittoPrevFieldvalueOptions(node);
        if(node.getMpPairSinglequotes() != null)
        {
            node.getMpPairSinglequotes().apply(this);
        }
        outAMpOpDittoPrevFieldvalueOptions(node);
    }

    public void inAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDittoPrevFieldvalueOptions(AMpVarDittoPrevFieldvalueOptions node)
    {
        inAMpVarDittoPrevFieldvalueOptions(node);
        if(node.getMpDittoKeyword() != null)
        {
            node.getMpDittoKeyword().apply(this);
        }
        outAMpVarDittoPrevFieldvalueOptions(node);
    }

    public void inAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOpDittoPrevLevelFieldvalueOptions(AMpOpDittoPrevLevelFieldvalueOptions node)
    {
        inAMpOpDittoPrevLevelFieldvalueOptions(node);
        if(node.getMpDittoPrevLevelOperator() != null)
        {
            node.getMpDittoPrevLevelOperator().apply(this);
        }
        outAMpOpDittoPrevLevelFieldvalueOptions(node);
    }

    public void inAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        defaultIn(node);
    }

    public void outAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDittoPrevLevelFieldvalueOptions(AMpVarDittoPrevLevelFieldvalueOptions node)
    {
        inAMpVarDittoPrevLevelFieldvalueOptions(node);
        if(node.getMpDittoKeyword() != null)
        {
            node.getMpDittoKeyword().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        outAMpVarDittoPrevLevelFieldvalueOptions(node);
    }

    public void inAContinuationOperator(AContinuationOperator node)
    {
        defaultIn(node);
    }

    public void outAContinuationOperator(AContinuationOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinuationOperator(AContinuationOperator node)
    {
        inAContinuationOperator(node);
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        outAContinuationOperator(node);
    }

    public void inAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        defaultIn(node);
    }

    public void outAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpVarDeclarationMatrixStatement(AMpVarDeclarationMatrixStatement node)
    {
        inAMpVarDeclarationMatrixStatement(node);
        if(node.getLocalVariableDeclarationStatement() != null)
        {
            node.getLocalVariableDeclarationStatement().apply(this);
        }
        outAMpVarDeclarationMatrixStatement(node);
    }

    public void inAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        defaultIn(node);
    }

    public void outAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpStatementMatrixStatement(AMpStatementMatrixStatement node)
    {
        inAMpStatementMatrixStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAMpStatementMatrixStatement(node);
    }

    public void inAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        defaultIn(node);
    }

    public void outAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExpressionMatrixExpression(AMpExpressionMatrixExpression node)
    {
        inAMpExpressionMatrixExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMpExpressionMatrixExpression(node);
    }

    public void inAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        defaultIn(node);
    }

    public void outAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdMatrixExpression(AMpIdMatrixExpression node)
    {
        inAMpIdMatrixExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpIdMatrixExpression(node);
    }

    public void inAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        defaultIn(node);
    }

    public void outAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpOutsideIncludedProdMatrixExpression(AMpOutsideIncludedProdMatrixExpression node)
    {
        inAMpOutsideIncludedProdMatrixExpression(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMpOutsideIncludedProdMatrixExpression(node);
    }

    public void inAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultIn(node);
    }

    public void outAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSymbolMpOutsideIncludedExpressionRelatedProd(AMpSymbolMpOutsideIncludedExpressionRelatedProd node)
    {
        inAMpSymbolMpOutsideIncludedExpressionRelatedProd(node);
        if(node.getMpSymbolUseage() != null)
        {
            node.getMpSymbolUseage().apply(this);
        }
        outAMpSymbolMpOutsideIncludedExpressionRelatedProd(node);
    }

    public void inAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultIn(node);
    }

    public void outAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(AMatrixElementCreationMpOutsideIncludedExpressionRelatedProd node)
    {
        inAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(node);
        if(node.getMatrixElementCreation() != null)
        {
            node.getMatrixElementCreation().apply(this);
        }
        outAMatrixElementCreationMpOutsideIncludedExpressionRelatedProd(node);
    }

    public void inAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultIn(node);
    }

    public void outAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpElementMpOutsideIncludedExprRelatedProdPlusId(AMpElementMpOutsideIncludedExprRelatedProdPlusId node)
    {
        inAMpElementMpOutsideIncludedExprRelatedProdPlusId(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMpElementMpOutsideIncludedExprRelatedProdPlusId(node);
    }

    public void inAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultIn(node);
    }

    public void outAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIdMpOutsideIncludedExprRelatedProdPlusId(AMpIdMpOutsideIncludedExprRelatedProdPlusId node)
    {
        inAMpIdMpOutsideIncludedExprRelatedProdPlusId(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMpIdMpOutsideIncludedExprRelatedProdPlusId(node);
    }

    public void inAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        defaultIn(node);
    }

    public void outAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrimitiveMpTypes(AMpPrimitiveMpTypes node)
    {
        inAMpPrimitiveMpTypes(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAMpPrimitiveMpTypes(node);
    }

    public void inAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        defaultIn(node);
    }

    public void outAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpReferenceMpTypes(AMpReferenceMpTypes node)
    {
        inAMpReferenceMpTypes(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAMpReferenceMpTypes(node);
    }

    public void inAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIntMpIntegerLiteral(AMpIntMpIntegerLiteral node)
    {
        inAMpIntMpIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAMpIntMpIntegerLiteral(node);
    }

    public void inAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpUnlimitedConstantMpIntegerLiteral(AMpUnlimitedConstantMpIntegerLiteral node)
    {
        inAMpUnlimitedConstantMpIntegerLiteral(node);
        if(node.getMpNKeyword() != null)
        {
            node.getMpNKeyword().apply(this);
        }
        outAMpUnlimitedConstantMpIntegerLiteral(node);
    }

    public void inAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpIntegerRangeMpIntegerLiteral(AMpIntegerRangeMpIntegerLiteral node)
    {
        inAMpIntegerRangeMpIntegerLiteral(node);
        if(node.getMpTokenNumberRange() != null)
        {
            node.getMpTokenNumberRange().apply(this);
        }
        outAMpIntegerRangeMpIntegerLiteral(node);
    }

    public void inAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpNotANumberMpIntegerLiteral(AMpNotANumberMpIntegerLiteral node)
    {
        inAMpNotANumberMpIntegerLiteral(node);
        if(node.getMpNanKeyword() != null)
        {
            node.getMpNanKeyword().apply(this);
        }
        outAMpNotANumberMpIntegerLiteral(node);
    }

    public void inAMpItVariable(AMpItVariable node)
    {
        defaultIn(node);
    }

    public void outAMpItVariable(AMpItVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpItVariable(AMpItVariable node)
    {
        inAMpItVariable(node);
        if(node.getMpItKeyword() != null)
        {
            node.getMpItKeyword().apply(this);
        }
        outAMpItVariable(node);
    }

    public void inAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        defaultIn(node);
    }

    public void outAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExistMatrixPredefinedMethods(AMpExistMatrixPredefinedMethods node)
    {
        inAMpExistMatrixPredefinedMethods(node);
        if(node.getExistMethod() != null)
        {
            node.getExistMethod().apply(this);
        }
        outAMpExistMatrixPredefinedMethods(node);
    }

    public void inAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        defaultIn(node);
    }

    public void outAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpValidMatrixPredefinedMethods(AMpValidMatrixPredefinedMethods node)
    {
        inAMpValidMatrixPredefinedMethods(node);
        if(node.getValidMethod() != null)
        {
            node.getValidMethod().apply(this);
        }
        outAMpValidMatrixPredefinedMethods(node);
    }

    public void inAMpExistMethod(AMpExistMethod node)
    {
        defaultIn(node);
    }

    public void outAMpExistMethod(AMpExistMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpExistMethod(AMpExistMethod node)
    {
        inAMpExistMethod(node);
        if(node.getMpExistKeyword() != null)
        {
            node.getMpExistKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpExistMethod(node);
    }

    public void inAMpValidMethod(AMpValidMethod node)
    {
        defaultIn(node);
    }

    public void outAMpValidMethod(AMpValidMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpValidMethod(AMpValidMethod node)
    {
        inAMpValidMethod(node);
        if(node.getMpValidKeyword() != null)
        {
            node.getMpValidKeyword().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMpValidMethod(node);
    }

    public void inAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixImportDeclaration(AMpMatrixImportDeclaration node)
    {
        inAMpMatrixImportDeclaration(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getMpMatrixKeyword() != null)
        {
            node.getMpMatrixKeyword().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpMatrixImportDeclaration(node);
    }

    public void inAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpSchemaImportDeclaration(AMpSchemaImportDeclaration node)
    {
        inAMpSchemaImportDeclaration(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getMpSchemaKeyword() != null)
        {
            node.getMpSchemaKeyword().apply(this);
        }
        if(node.getMatrixElementName() != null)
        {
            node.getMatrixElementName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMpSchemaImportDeclaration(node);
    }

    public void inAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        defaultIn(node);
    }

    public void outAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPublicMatrixAccessModifier(AMpPublicMatrixAccessModifier node)
    {
        inAMpPublicMatrixAccessModifier(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAMpPublicMatrixAccessModifier(node);
    }

    public void inAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        defaultIn(node);
    }

    public void outAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpPrivateMatrixAccessModifier(AMpPrivateMatrixAccessModifier node)
    {
        inAMpPrivateMatrixAccessModifier(node);
        if(node.getPrivate() != null)
        {
            node.getPrivate().apply(this);
        }
        outAMpPrivateMatrixAccessModifier(node);
    }

    public void inAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        defaultIn(node);
    }

    public void outAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescriptorVariableType(AMpDescriptorVariableType node)
    {
        inAMpDescriptorVariableType(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMpDescriptorKeyword() != null)
        {
            node.getMpDescriptorKeyword().apply(this);
        }
        if(node.getMatrixAccessType() != null)
        {
            node.getMatrixAccessType().apply(this);
        }
        outAMpDescriptorVariableType(node);
    }

    public void inAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        defaultIn(node);
    }

    public void outAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpMatrixAccessMatrixAccessType(AMpMatrixAccessMatrixAccessType node)
    {
        inAMpMatrixAccessMatrixAccessType(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAMpMatrixAccessMatrixAccessType(node);
    }

    public void inASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        inASingleImportDeclaration(node);
        if(node.getSingleTypeImportDeclaration() != null)
        {
            node.getSingleTypeImportDeclaration().apply(this);
        }
        outASingleImportDeclaration(node);
    }

    public void inASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDemandImportDeclaration(ASingleDemandImportDeclaration node)
    {
        inASingleDemandImportDeclaration(node);
        if(node.getTypeImportOnDemandDeclaration() != null)
        {
            node.getTypeImportOnDemandDeclaration().apply(this);
        }
        outASingleDemandImportDeclaration(node);
    }

    public void inAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportDeclaration(AStaticImportDeclaration node)
    {
        inAStaticImportDeclaration(node);
        if(node.getSingleStaticImportDeclaration() != null)
        {
            node.getSingleStaticImportDeclaration().apply(this);
        }
        outAStaticImportDeclaration(node);
    }

    public void inAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticDemandImportDeclaration(AStaticDemandImportDeclaration node)
    {
        inAStaticDemandImportDeclaration(node);
        if(node.getStaticImportOnDemandDeclaration() != null)
        {
            node.getStaticImportOnDemandDeclaration().apply(this);
        }
        outAStaticDemandImportDeclaration(node);
    }

    public void inAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixImportImportDeclaration(AMjMatrixImportImportDeclaration node)
    {
        inAMjMatrixImportImportDeclaration(node);
        if(node.getMatrixImportDeclaration() != null)
        {
            node.getMatrixImportDeclaration().apply(this);
        }
        outAMjMatrixImportImportDeclaration(node);
    }

    public void inAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSchemaImportImportDeclaration(AMjSchemaImportImportDeclaration node)
    {
        inAMjSchemaImportImportDeclaration(node);
        if(node.getSchemaImportDeclaration() != null)
        {
            node.getSchemaImportDeclaration().apply(this);
        }
        outAMjSchemaImportImportDeclaration(node);
    }

    public void inASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        inASingleTypeImportDeclaration(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASingleTypeImportDeclaration(node);
    }

    public void inATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportOnDemandDeclaration(ATypeImportOnDemandDeclaration node)
    {
        inATypeImportOnDemandDeclaration(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outATypeImportOnDemandDeclaration(node);
    }

    public void inASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleStaticImportDeclaration(ASingleStaticImportDeclaration node)
    {
        inASingleStaticImportDeclaration(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASingleStaticImportDeclaration(node);
    }

    public void inAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticImportOnDemandDeclaration(AStaticImportOnDemandDeclaration node)
    {
        inAStaticImportOnDemandDeclaration(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStaticImportOnDemandDeclaration(node);
    }

    public void inAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        defaultIn(node);
    }

    public void outAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        inAOneVariableDeclarators(node);
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        outAOneVariableDeclarators(node);
    }

    public void inAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        defaultIn(node);
    }

    public void outAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        inAManyVariableDeclarators(node);
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableDeclarator() != null)
        {
            node.getVariableDeclarator().apply(this);
        }
        outAManyVariableDeclarators(node);
    }

    public void inASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        inASimpleVariableDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outASimpleVariableDeclarator(node);
    }

    public void inAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultIn(node);
    }

    public void outAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        inAInitializerVariableDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getVariableInitializer() != null)
        {
            node.getVariableInitializer().apply(this);
        }
        outAInitializerVariableDeclarator(node);
    }

    public void inAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        inAExpressionVariableInitializer(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionVariableInitializer(node);
    }

    public void inAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        inAIdentifierVariableInitializer(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAIdentifierVariableInitializer(node);
    }

    public void inAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedVariableInitializer(AMjOutsideIncludedVariableInitializer node)
    {
        inAMjOutsideIncludedVariableInitializer(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOutsideIncludedVariableInitializer(node);
    }

    public void inAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        defaultIn(node);
    }

    public void outAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        inAAdditionalIdentifier(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAdditionalIdentifier(node);
    }

    public void inADim(ADim node)
    {
        defaultIn(node);
    }

    public void outADim(ADim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADim(ADim node)
    {
        inADim(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outADim(node);
    }

    public void inATypeComponent(ATypeComponent node)
    {
        defaultIn(node);
    }

    public void outATypeComponent(ATypeComponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeComponent(ATypeComponent node)
    {
        inATypeComponent(node);
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outATypeComponent(node);
    }

    public void inAGtTypeArguments(AGtTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAGtTypeArguments(AGtTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        inAGtTypeArguments(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtTypeArguments(node);
    }

    public void inAShrTypeArguments(AShrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAShrTypeArguments(AShrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        inAShrTypeArguments(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getActualTypeArgumentListShr() != null)
        {
            node.getActualTypeArgumentListShr().apply(this);
        }
        if(node.getShr() != null)
        {
            node.getShr().apply(this);
        }
        outAShrTypeArguments(node);
    }

    public void inAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultIn(node);
    }

    public void outAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        inAUshrTypeArguments(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getActualTypeArgumentListUshr() != null)
        {
            node.getActualTypeArgumentListUshr().apply(this);
        }
        if(node.getUshr() != null)
        {
            node.getUshr().apply(this);
        }
        outAUshrTypeArguments(node);
    }

    public void inATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        inATypeArgumentsShrNoGt(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        outATypeArgumentsShrNoGt(node);
    }

    public void inATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        inATypeArgumentsUshrNoGtGt(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getActualTypeArgumentListUshrNoGt() != null)
        {
            node.getActualTypeArgumentListUshrNoGt().apply(this);
        }
        outATypeArgumentsUshrNoGtGt(node);
    }

    public void inATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        inATypeArgumentsUshrNoGt(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        outATypeArgumentsUshrNoGt(node);
    }

    public void inAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        inAOneActualTypeArgumentList(node);
        if(node.getActualTypeArgument() != null)
        {
            node.getActualTypeArgument().apply(this);
        }
        outAOneActualTypeArgumentList(node);
    }

    public void inAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        inAManyActualTypeArgumentList(node);
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgument() != null)
        {
            node.getActualTypeArgument().apply(this);
        }
        outAManyActualTypeArgumentList(node);
    }

    public void inAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        inAOneActualTypeArgumentListShr(node);
        if(node.getActualTypeArgumentShr() != null)
        {
            node.getActualTypeArgumentShr().apply(this);
        }
        outAOneActualTypeArgumentListShr(node);
    }

    public void inAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        inAManyActualTypeArgumentListShr(node);
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentShr() != null)
        {
            node.getActualTypeArgumentShr().apply(this);
        }
        outAManyActualTypeArgumentListShr(node);
    }

    public void inAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        inAOneActualTypeArgumentListUshr(node);
        if(node.getActualTypeArgumentUshr() != null)
        {
            node.getActualTypeArgumentUshr().apply(this);
        }
        outAOneActualTypeArgumentListUshr(node);
    }

    public void inAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        inAManyActualTypeArgumentListUshr(node);
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentUshr() != null)
        {
            node.getActualTypeArgumentUshr().apply(this);
        }
        outAManyActualTypeArgumentListUshr(node);
    }

    public void inAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        inAOneActualTypeArgumentListUshrNoGt(node);
        if(node.getActualTypeArgumentUshrNoGt() != null)
        {
            node.getActualTypeArgumentUshrNoGt().apply(this);
        }
        outAOneActualTypeArgumentListUshrNoGt(node);
    }

    public void inAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        inAManyActualTypeArgumentListUshrNoGt(node);
        if(node.getActualTypeArgumentList() != null)
        {
            node.getActualTypeArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getActualTypeArgumentUshrNoGt() != null)
        {
            node.getActualTypeArgumentUshrNoGt().apply(this);
        }
        outAManyActualTypeArgumentListUshrNoGt(node);
    }

    public void inAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        inAPrimitiveActualTypeArgument(node);
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveActualTypeArgument(node);
    }

    public void inAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        inAReferenceActualTypeArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceActualTypeArgument(node);
    }

    public void inAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        inAReferenceActualTypeArgumentShr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArgumentsShrNoGt() != null)
        {
            node.getTypeArgumentsShrNoGt().apply(this);
        }
        outAReferenceActualTypeArgumentShr(node);
    }

    public void inAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        inAReferenceActualTypeArgumentUshr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArgumentsUshrNoGtGt() != null)
        {
            node.getTypeArgumentsUshrNoGtGt().apply(this);
        }
        outAReferenceActualTypeArgumentUshr(node);
    }

    public void inAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        defaultIn(node);
    }

    public void outAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        inAReferenceActualTypeArgumentUshrNoGt(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArgumentsUshrNoGt() != null)
        {
            node.getTypeArgumentsUshrNoGt().apply(this);
        }
        outAReferenceActualTypeArgumentUshrNoGt(node);
    }

    public void inAOneFormalParameterList(AOneFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAOneFormalParameterList(AOneFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneFormalParameterList(AOneFormalParameterList node)
    {
        inAOneFormalParameterList(node);
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAOneFormalParameterList(node);
    }

    public void inAManyFormalParameterList(AManyFormalParameterList node)
    {
        defaultIn(node);
    }

    public void outAManyFormalParameterList(AManyFormalParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyFormalParameterList(AManyFormalParameterList node)
    {
        inAManyFormalParameterList(node);
        if(node.getFormalParameters() != null)
        {
            node.getFormalParameters().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLastFormalParameter() != null)
        {
            node.getLastFormalParameter().apply(this);
        }
        outAManyFormalParameterList(node);
    }

    public void inAOneFormalParameters(AOneFormalParameters node)
    {
        defaultIn(node);
    }

    public void outAOneFormalParameters(AOneFormalParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneFormalParameters(AOneFormalParameters node)
    {
        inAOneFormalParameters(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAOneFormalParameters(node);
    }

    public void inAManyFormalParameters(AManyFormalParameters node)
    {
        defaultIn(node);
    }

    public void outAManyFormalParameters(AManyFormalParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyFormalParameters(AManyFormalParameters node)
    {
        inAManyFormalParameters(node);
        if(node.getFormalParameters() != null)
        {
            node.getFormalParameters().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outAManyFormalParameters(node);
    }

    public void inAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        inAPrimitiveFormalParameter(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveFormalParameter(node);
    }

    public void inAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        inAReferenceFormalParameter(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceFormalParameter(node);
    }

    public void inAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMpDescVarFormalParameter(AMpDescVarFormalParameter node)
    {
        inAMpDescVarFormalParameter(node);
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMpDescVarFormalParameter(node);
    }

    public void inAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        inAPrimitiveVarArgLastFormalParameter(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAPrimitiveVarArgLastFormalParameter(node);
    }

    public void inAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        inAReferenceVarArgLastFormalParameter(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims1());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDotDotDot() != null)
        {
            node.getDotDotDot().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims2());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        outAReferenceVarArgLastFormalParameter(node);
    }

    public void inASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        defaultIn(node);
    }

    public void outASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        inASimpleLastFormalParameter(node);
        if(node.getFormalParameter() != null)
        {
            node.getFormalParameter().apply(this);
        }
        outASimpleLastFormalParameter(node);
    }

    public void inAModifier(AModifier node)
    {
        defaultIn(node);
    }

    public void outAModifier(AModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModifier(AModifier node)
    {
        inAModifier(node);
        if(node.getMpJunk1() != null)
        {
            node.getMpJunk1().apply(this);
        }
        outAModifier(node);
    }

    public void inANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        inANumericPrimitiveType(node);
        if(node.getNumericType() != null)
        {
            node.getNumericType().apply(this);
        }
        outANumericPrimitiveType(node);
    }

    public void inABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        inABooleanPrimitiveType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanPrimitiveType(node);
    }

    public void inAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixTypesPrimitiveType(AMjMatrixTypesPrimitiveType node)
    {
        inAMjMatrixTypesPrimitiveType(node);
        if(node.getMpMatrixTypes() != null)
        {
            node.getMpMatrixTypes().apply(this);
        }
        outAMjMatrixTypesPrimitiveType(node);
    }

    public void inAIntegralNumericType(AIntegralNumericType node)
    {
        defaultIn(node);
    }

    public void outAIntegralNumericType(AIntegralNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        inAIntegralNumericType(node);
        if(node.getIntegralType() != null)
        {
            node.getIntegralType().apply(this);
        }
        outAIntegralNumericType(node);
    }

    public void inAFloatingNumericType(AFloatingNumericType node)
    {
        defaultIn(node);
    }

    public void outAFloatingNumericType(AFloatingNumericType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        inAFloatingNumericType(node);
        if(node.getFloatingPointType() != null)
        {
            node.getFloatingPointType().apply(this);
        }
        outAFloatingNumericType(node);
    }

    public void inAByteIntegralType(AByteIntegralType node)
    {
        defaultIn(node);
    }

    public void outAByteIntegralType(AByteIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteIntegralType(AByteIntegralType node)
    {
        inAByteIntegralType(node);
        if(node.getByte() != null)
        {
            node.getByte().apply(this);
        }
        outAByteIntegralType(node);
    }

    public void inAShortIntegralType(AShortIntegralType node)
    {
        defaultIn(node);
    }

    public void outAShortIntegralType(AShortIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIntegralType(AShortIntegralType node)
    {
        inAShortIntegralType(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortIntegralType(node);
    }

    public void inAIntIntegralType(AIntIntegralType node)
    {
        defaultIn(node);
    }

    public void outAIntIntegralType(AIntIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntIntegralType(AIntIntegralType node)
    {
        inAIntIntegralType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntIntegralType(node);
    }

    public void inALongIntegralType(ALongIntegralType node)
    {
        defaultIn(node);
    }

    public void outALongIntegralType(ALongIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongIntegralType(ALongIntegralType node)
    {
        inALongIntegralType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongIntegralType(node);
    }

    public void inACharIntegralType(ACharIntegralType node)
    {
        defaultIn(node);
    }

    public void outACharIntegralType(ACharIntegralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharIntegralType(ACharIntegralType node)
    {
        inACharIntegralType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharIntegralType(node);
    }

    public void inAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        inAFloatFloatingPointType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatFloatingPointType(node);
    }

    public void inADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultIn(node);
    }

    public void outADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        inADoubleFloatingPointType(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleFloatingPointType(node);
    }

    public void inAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        inAEmptyReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyReturnStatement(node);
    }

    public void inAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        inAExpressionReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionReturnStatement(node);
    }

    public void inAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        inAIdentifierReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAIdentifierReturnStatement(node);
    }

    public void inAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedReturnStatement(AMjOutsideIncludedReturnStatement node)
    {
        inAMjOutsideIncludedReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAMjOutsideIncludedReturnStatement(node);
    }

    public void inAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        inAExpressionSwitchStatement(node);
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        outAExpressionSwitchStatement(node);
    }

    public void inAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        inAIdentifierSwitchStatement(node);
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSwitchBlock() != null)
        {
            node.getSwitchBlock().apply(this);
        }
        outAIdentifierSwitchStatement(node);
    }

    public void inASwitchBlock(ASwitchBlock node)
    {
        defaultIn(node);
    }

    public void outASwitchBlock(ASwitchBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlock(ASwitchBlock node)
    {
        inASwitchBlock(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PSwitchBlockStatementGroup> copy = new ArrayList<PSwitchBlockStatementGroup>(node.getSwitchBlockStatementGroups());
            for(PSwitchBlockStatementGroup e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSwitchLabel> copy = new ArrayList<PSwitchLabel>(node.getSwitchLabels());
            for(PSwitchLabel e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outASwitchBlock(node);
    }

    public void inASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultIn(node);
    }

    public void outASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        inASwitchBlockStatementGroup(node);
        {
            List<PSwitchLabel> copy = new ArrayList<PSwitchLabel>(node.getSwitchLabels());
            for(PSwitchLabel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatements());
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        outASwitchBlockStatementGroup(node);
    }

    public void inAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        inAExpressionSwitchLabel(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getConstantExpression() != null)
        {
            node.getConstantExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAExpressionSwitchLabel(node);
    }

    public void inAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        inAIdentifierSwitchLabel(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAIdentifierSwitchLabel(node);
    }

    public void inADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        inADefaultSwitchLabel(node);
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outADefaultSwitchLabel(node);
    }

    public void inAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        defaultIn(node);
    }

    public void outAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjElementSwitchLabel(AMjElementSwitchLabel node)
    {
        inAMjElementSwitchLabel(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAMjElementSwitchLabel(node);
    }

    public void inAConstantExpression(AConstantExpression node)
    {
        defaultIn(node);
    }

    public void outAConstantExpression(AConstantExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantExpression(AConstantExpression node)
    {
        inAConstantExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAConstantExpression(node);
    }

    public void inABreakStatement(ABreakStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatement(ABreakStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        inABreakStatement(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outABreakStatement(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PBlockStatement> copy = new ArrayList<PBlockStatement>(node.getBlockStatement());
            for(PBlockStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outABlock(node);
    }

    public void inAVarDeclarationBlockStatement(AVarDeclarationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAVarDeclarationBlockStatement(AVarDeclarationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclarationBlockStatement(AVarDeclarationBlockStatement node)
    {
        inAVarDeclarationBlockStatement(node);
        if(node.getLocalVariableDeclarationStatement() != null)
        {
            node.getLocalVariableDeclarationStatement().apply(this);
        }
        outAVarDeclarationBlockStatement(node);
    }

    public void inAStatementDeclarationBlockStatement(AStatementDeclarationBlockStatement node)
    {
        defaultIn(node);
    }

    public void outAStatementDeclarationBlockStatement(AStatementDeclarationBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementDeclarationBlockStatement(AStatementDeclarationBlockStatement node)
    {
        inAStatementDeclarationBlockStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementDeclarationBlockStatement(node);
    }

    public void inAEmptyStmtStatement(AEmptyStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStmtStatement(AEmptyStmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmtStatement(AEmptyStmtStatement node)
    {
        inAEmptyStmtStatement(node);
        if(node.getEmptyStatement() != null)
        {
            node.getEmptyStatement().apply(this);
        }
        outAEmptyStmtStatement(node);
    }

    public void inAIfThenStmtStatement(AIfThenStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenStmtStatement(AIfThenStmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenStmtStatement(AIfThenStmtStatement node)
    {
        inAIfThenStmtStatement(node);
        if(node.getIfThenStatement() != null)
        {
            node.getIfThenStatement().apply(this);
        }
        outAIfThenStmtStatement(node);
    }

    public void inAIfThenElseStmtStatement(AIfThenElseStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStmtStatement(AIfThenElseStmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStmtStatement(AIfThenElseStmtStatement node)
    {
        inAIfThenElseStmtStatement(node);
        if(node.getIfThenElseStatement() != null)
        {
            node.getIfThenElseStatement().apply(this);
        }
        outAIfThenElseStmtStatement(node);
    }

    public void inASwitchStatementStatement(ASwitchStatementStatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatementStatement(ASwitchStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStatementStatement(ASwitchStatementStatement node)
    {
        inASwitchStatementStatement(node);
        if(node.getSwitchStatement() != null)
        {
            node.getSwitchStatement().apply(this);
        }
        outASwitchStatementStatement(node);
    }

    public void inABreakStatementStatement(ABreakStatementStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatementStatement(ABreakStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatementStatement(ABreakStatementStatement node)
    {
        inABreakStatementStatement(node);
        if(node.getBreakStatement() != null)
        {
            node.getBreakStatement().apply(this);
        }
        outABreakStatementStatement(node);
    }

    public void inAForStatementStatement(AForStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatement(AForStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatementStatement(AForStatementStatement node)
    {
        inAForStatementStatement(node);
        if(node.getForStatement() != null)
        {
            node.getForStatement().apply(this);
        }
        outAForStatementStatement(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatement(node);
    }

    public void inAExpressionStmtStatement(AExpressionStmtStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmtStatement(AExpressionStmtStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmtStatement(AExpressionStmtStatement node)
    {
        inAExpressionStmtStatement(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStmtStatement(node);
    }

    public void inAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        inAReturnStatementStatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outAReturnStatementStatement(node);
    }

    public void inAMjAnnotationStatementStatement(AMjAnnotationStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAMjAnnotationStatementStatement(AMjAnnotationStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjAnnotationStatementStatement(AMjAnnotationStatementStatement node)
    {
        inAMjAnnotationStatementStatement(node);
        if(node.getAnnotationStatement() != null)
        {
            node.getAnnotationStatement().apply(this);
        }
        outAMjAnnotationStatementStatement(node);
    }

    public void inAMjAnnotationsStatement(AMjAnnotationsStatement node)
    {
        defaultIn(node);
    }

    public void outAMjAnnotationsStatement(AMjAnnotationsStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjAnnotationsStatement(AMjAnnotationsStatement node)
    {
        inAMjAnnotationsStatement(node);
        if(node.getMpAnnotationsDeclaration() != null)
        {
            node.getMpAnnotationsDeclaration().apply(this);
        }
        outAMjAnnotationsStatement(node);
    }

    public void inAEmptyStatement(AEmptyStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatement(AEmptyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        inAEmptyStatement(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyStatement(node);
    }

    public void inAExpressionStatement(AExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatement(AExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        inAExpressionStatement(node);
        if(node.getStatementExpression() != null)
        {
            node.getStatementExpression().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAExpressionStatement(node);
    }

    public void inAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        inAAssignmentStatementExpression(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStatementExpression(node);
    }

    public void inAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        inAMethodInvocationStatementExpression(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodInvocationStatementExpression(node);
    }

    public void inAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixAccessStatementExpression(AMjMatrixAccessStatementExpression node)
    {
        inAMjMatrixAccessStatementExpression(node);
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        outAMjMatrixAccessStatementExpression(node);
    }

    public void inAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSetCreationStatementExpression(AMjSetCreationStatementExpression node)
    {
        inAMjSetCreationStatementExpression(node);
        if(node.getSetInstanceCreation() != null)
        {
            node.getSetInstanceCreation().apply(this);
        }
        outAMjSetCreationStatementExpression(node);
    }

    public void inAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNewNameSetCreationStatementExpression(AMjNewNameSetCreationStatementExpression node)
    {
        inAMjNewNameSetCreationStatementExpression(node);
        if(node.getNewNameSetInstanceCreation() != null)
        {
            node.getNewNameSetInstanceCreation().apply(this);
        }
        outAMjNewNameSetCreationStatementExpression(node);
    }

    public void inAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        defaultIn(node);
    }

    public void outAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSubsetCreationStatementExpression(AMjSubsetCreationStatementExpression node)
    {
        inAMjSubsetCreationStatementExpression(node);
        if(node.getSubsetCreation() != null)
        {
            node.getSubsetCreation().apply(this);
        }
        outAMjSubsetCreationStatementExpression(node);
    }

    public void inALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultIn(node);
    }

    public void outALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        inALocalVariableDeclarationStatement(node);
        if(node.getLocalVariableDeclaration() != null)
        {
            node.getLocalVariableDeclaration().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outALocalVariableDeclarationStatement(node);
    }

    public void inAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        inAPrimitiveLocalVariableDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        outAPrimitiveLocalVariableDeclaration(node);
    }

    public void inAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        inAReferenceLocalVariableDeclaration(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        outAReferenceLocalVariableDeclaration(node);
    }

    public void inAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescVarLocalVariableDeclaration(AMjDescVarLocalVariableDeclaration node)
    {
        inAMjDescVarLocalVariableDeclaration(node);
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        if(node.getVariableDeclarators() != null)
        {
            node.getVariableDeclarators().apply(this);
        }
        outAMjDescVarLocalVariableDeclaration(node);
    }

    public void inAAssgnExpressionAssignment(AAssgnExpressionAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssgnExpressionAssignment(AAssgnExpressionAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssgnExpressionAssignment(AAssgnExpressionAssignment node)
    {
        inAAssgnExpressionAssignment(node);
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        outAAssgnExpressionAssignment(node);
    }

    public void inAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultIn(node);
    }

    public void outAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierAssignment(AIdentifierAssignment node)
    {
        inAIdentifierAssignment(node);
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAIdentifierAssignment(node);
    }

    public void inAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedAssignment(AMjOutsideIncludedAssignment node)
    {
        inAMjOutsideIncludedAssignment(node);
        if(node.getLeftHandSide() != null)
        {
            node.getLeftHandSide().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOutsideIncludedAssignment(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getAssignmentExpression() != null)
        {
            node.getAssignmentExpression().apply(this);
        }
        outAExpression(node);
    }

    public void inAConditionalExprAssignmentExpression(AConditionalExprAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAConditionalExprAssignmentExpression(AConditionalExprAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalExprAssignmentExpression(AConditionalExprAssignmentExpression node)
    {
        inAConditionalExprAssignmentExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        outAConditionalExprAssignmentExpression(node);
    }

    public void inAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        inAAssignmentAssignmentExpression(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentAssignmentExpression(node);
    }

    public void inAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        defaultIn(node);
    }

    public void outAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOutsideIncludedAssignmentExpression(AMjOutsideIncludedAssignmentExpression node)
    {
        inAMjOutsideIncludedAssignmentExpression(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOutsideIncludedAssignmentExpression(node);
    }

    public void inAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        inAIdentifierLeftHandSide(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAIdentifierLeftHandSide(node);
    }

    public void inAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        inAFieldLeftHandSide(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldLeftHandSide(node);
    }

    public void inAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixAccessLeftHandSide(AMjMatrixAccessLeftHandSide node)
    {
        inAMjMatrixAccessLeftHandSide(node);
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        outAMjMatrixAccessLeftHandSide(node);
    }

    public void inASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        inASimpleMethodInvocation(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASimpleMethodInvocation(node);
    }

    public void inAExpandingMethodInvocation(AExpandingMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAExpandingMethodInvocation(AExpandingMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpandingMethodInvocation(AExpandingMethodInvocation node)
    {
        inAExpandingMethodInvocation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExpandingMethodInvocation(node);
    }

    public void inAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjPreDefinedMethodsMethodInvocation(AMjPreDefinedMethodsMethodInvocation node)
    {
        inAMjPreDefinedMethodsMethodInvocation(node);
        if(node.getMatrixPredefinedMethods() != null)
        {
            node.getMatrixPredefinedMethods().apply(this);
        }
        outAMjPreDefinedMethodsMethodInvocation(node);
    }

    public void inAOneExprArgumentList(AOneExprArgumentList node)
    {
        defaultIn(node);
    }

    public void outAOneExprArgumentList(AOneExprArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneExprArgumentList(AOneExprArgumentList node)
    {
        inAOneExprArgumentList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOneExprArgumentList(node);
    }

    public void inAOneIdArgumentList(AOneIdArgumentList node)
    {
        defaultIn(node);
    }

    public void outAOneIdArgumentList(AOneIdArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneIdArgumentList(AOneIdArgumentList node)
    {
        inAOneIdArgumentList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAOneIdArgumentList(node);
    }

    public void inAManyExprArgumentList(AManyExprArgumentList node)
    {
        defaultIn(node);
    }

    public void outAManyExprArgumentList(AManyExprArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyExprArgumentList(AManyExprArgumentList node)
    {
        inAManyExprArgumentList(node);
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAManyExprArgumentList(node);
    }

    public void inAManyIdArgumentList(AManyIdArgumentList node)
    {
        defaultIn(node);
    }

    public void outAManyIdArgumentList(AManyIdArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyIdArgumentList(AManyIdArgumentList node)
    {
        inAManyIdArgumentList(node);
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAManyIdArgumentList(node);
    }

    public void inAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        defaultIn(node);
    }

    public void outAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjOneOutsideIncludedArgumentList(AMjOneOutsideIncludedArgumentList node)
    {
        inAMjOneOutsideIncludedArgumentList(node);
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjOneOutsideIncludedArgumentList(node);
    }

    public void inAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        defaultIn(node);
    }

    public void outAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjManyOutsideIncludedArgumentList(AMjManyOutsideIncludedArgumentList node)
    {
        inAMjManyOutsideIncludedArgumentList(node);
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMpOutsideIncludedExpressionRelatedProd() != null)
        {
            node.getMpOutsideIncludedExpressionRelatedProd().apply(this);
        }
        outAMjManyOutsideIncludedArgumentList(node);
    }

    public void inAIfThenStatement(AIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenStatement(AIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenStatement(AIfThenStatement node)
    {
        inAIfThenStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfThenStatement(node);
    }

    public void inAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        inAIfThenElseStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfThenElseStatement(node);
    }

    public void inAIfThenElseNoShortIfStatementNoShortIf(AIfThenElseNoShortIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseNoShortIfStatementNoShortIf(AIfThenElseNoShortIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseNoShortIfStatementNoShortIf(AIfThenElseNoShortIfStatementNoShortIf node)
    {
        inAIfThenElseNoShortIfStatementNoShortIf(node);
        if(node.getIfThenElseNoShortIfStatement() != null)
        {
            node.getIfThenElseNoShortIfStatement().apply(this);
        }
        outAIfThenElseNoShortIfStatementNoShortIf(node);
    }

    public void inABlockStatementNoShortIf(ABlockStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outABlockStatementNoShortIf(ABlockStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatementNoShortIf(ABlockStatementNoShortIf node)
    {
        inABlockStatementNoShortIf(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatementNoShortIf(node);
    }

    public void inAExpressionStmtStatementNoShortIf(AExpressionStmtStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmtStatementNoShortIf(AExpressionStmtStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmtStatementNoShortIf(AExpressionStmtStatementNoShortIf node)
    {
        inAExpressionStmtStatementNoShortIf(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAExpressionStmtStatementNoShortIf(node);
    }

    public void inAIfThenElseNoShortIfStatement(AIfThenElseNoShortIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseNoShortIfStatement(AIfThenElseNoShortIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseNoShortIfStatement(AIfThenElseNoShortIfStatement node)
    {
        inAIfThenElseNoShortIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfThenElseNoShortIfStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getEnhancedForStatement() != null)
        {
            node.getEnhancedForStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        inAPrimitiveExpressionEnhancedForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAPrimitiveExpressionEnhancedForStatement(node);
    }

    public void inAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        inAPrimitiveIdentifierEnhancedForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimitiveType() != null)
        {
            node.getPrimitiveType().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAPrimitiveIdentifierEnhancedForStatement(node);
    }

    public void inAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        inAReferenceExpressionEnhancedForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAReferenceExpressionEnhancedForStatement(node);
    }

    public void inAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        inAReferenceIdentifierEnhancedForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifiers());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier1() != null)
        {
            node.getIdentifier1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers1());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeComponent> copy = new ArrayList<PTypeComponent>(node.getTypeComponents());
            for(PTypeComponent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeArguments() != null)
        {
            node.getTypeArguments().apply(this);
        }
        {
            List<PDim> copy = new ArrayList<PDim>(node.getDims());
            for(PDim e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier3() != null)
        {
            node.getIdentifier3().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers2());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAReferenceIdentifierEnhancedForStatement(node);
    }

    public void inAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescvarExpressionEnhancedForStatement(AMjDescvarExpressionEnhancedForStatement node)
    {
        inAMjDescvarExpressionEnhancedForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAMjDescvarExpressionEnhancedForStatement(node);
    }

    public void inAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        defaultIn(node);
    }

    public void outAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjDescvarIdentifierEnhancedForStatement(AMjDescvarIdentifierEnhancedForStatement node)
    {
        inAMjDescvarIdentifierEnhancedForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getDescriptorVariableType() != null)
        {
            node.getDescriptorVariableType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier2() != null)
        {
            node.getIdentifier2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAMjDescvarIdentifierEnhancedForStatement(node);
    }

    public void inAConditionalExpression(AConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAConditionalExpression(AConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalExpression(AConditionalExpression node)
    {
        inAConditionalExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAConditionalExpression(node);
    }

    public void inAPassThroughConditionalOrExpression(APassThroughConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outAPassThroughConditionalOrExpression(APassThroughConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassThroughConditionalOrExpression(APassThroughConditionalOrExpression node)
    {
        inAPassThroughConditionalOrExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outAPassThroughConditionalOrExpression(node);
    }

    public void inACondOrOrAndConditionalOrExpression(ACondOrOrAndConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outACondOrOrAndConditionalOrExpression(ACondOrOrAndConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrOrAndConditionalOrExpression(ACondOrOrAndConditionalOrExpression node)
    {
        inACondOrOrAndConditionalOrExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outACondOrOrAndConditionalOrExpression(node);
    }

    public void inACondOrOrIdConditionalOrExpression(ACondOrOrIdConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outACondOrOrIdConditionalOrExpression(ACondOrOrIdConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrOrIdConditionalOrExpression(ACondOrOrIdConditionalOrExpression node)
    {
        inACondOrOrIdConditionalOrExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outACondOrOrIdConditionalOrExpression(node);
    }

    public void inACondOrIdAndConditionalOrExpression(ACondOrIdAndConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outACondOrIdAndConditionalOrExpression(ACondOrIdAndConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrIdAndConditionalOrExpression(ACondOrIdAndConditionalOrExpression node)
    {
        inACondOrIdAndConditionalOrExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outACondOrIdAndConditionalOrExpression(node);
    }

    public void inACondOrIdIdConditionalOrExpression(ACondOrIdIdConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outACondOrIdIdConditionalOrExpression(ACondOrIdIdConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrIdIdConditionalOrExpression(ACondOrIdIdConditionalOrExpression node)
    {
        inACondOrIdIdConditionalOrExpression(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId1());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId2());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outACondOrIdIdConditionalOrExpression(node);
    }

    public void inAPassThroughConditionalAndExpression(APassThroughConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAPassThroughConditionalAndExpression(APassThroughConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassThroughConditionalAndExpression(APassThroughConditionalAndExpression node)
    {
        inAPassThroughConditionalAndExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outAPassThroughConditionalAndExpression(node);
    }

    public void inACondAndAndEqConditionalAndExpression(ACondAndAndEqConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outACondAndAndEqConditionalAndExpression(ACondAndAndEqConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndAndEqConditionalAndExpression(ACondAndAndEqConditionalAndExpression node)
    {
        inACondAndAndEqConditionalAndExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outACondAndAndEqConditionalAndExpression(node);
    }

    public void inACondAndAndIdConditionalAndExpression(ACondAndAndIdConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outACondAndAndIdConditionalAndExpression(ACondAndAndIdConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndAndIdConditionalAndExpression(ACondAndAndIdConditionalAndExpression node)
    {
        inACondAndAndIdConditionalAndExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outACondAndAndIdConditionalAndExpression(node);
    }

    public void inACondAndIdEqConditionalAndExpression(ACondAndIdEqConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outACondAndIdEqConditionalAndExpression(ACondAndIdEqConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndIdEqConditionalAndExpression(ACondAndIdEqConditionalAndExpression node)
    {
        inACondAndIdEqConditionalAndExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        outACondAndIdEqConditionalAndExpression(node);
    }

    public void inACondAndIdIdConditionalAndExpression(ACondAndIdIdConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outACondAndIdIdConditionalAndExpression(ACondAndIdIdConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndIdIdConditionalAndExpression(ACondAndIdIdConditionalAndExpression node)
    {
        inACondAndIdIdConditionalAndExpression(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId1());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId2());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outACondAndIdIdConditionalAndExpression(node);
    }

    public void inASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        inASimpleEqualityExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outASimpleEqualityExpression(node);
    }

    public void inAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        inAEqEqReEqualityExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outAEqEqReEqualityExpression(node);
    }

    public void inAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjEqEqMpEqualityExpression(AMjEqEqMpEqualityExpression node)
    {
        inAMjEqEqMpEqualityExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        outAMjEqEqMpEqualityExpression(node);
    }

    public void inAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjEqMpReEqualityExpression(AMjEqMpReEqualityExpression node)
    {
        inAMjEqMpReEqualityExpression(node);
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outAMjEqMpReEqualityExpression(node);
    }

    public void inAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjEqMpMpEqualityExpression(AMjEqMpMpEqualityExpression node)
    {
        inAMjEqMpMpEqualityExpression(node);
        if(node.getMpElement1() != null)
        {
            node.getMpElement1().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getMpElement2() != null)
        {
            node.getMpElement2().apply(this);
        }
        outAMjEqMpMpEqualityExpression(node);
    }

    public void inANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        inANeqEqReEqualityExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outANeqEqReEqualityExpression(node);
    }

    public void inAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNeqEqMpEqualityExpression(AMjNeqEqMpEqualityExpression node)
    {
        inAMjNeqEqMpEqualityExpression(node);
        if(node.getEqualityExpression() != null)
        {
            node.getEqualityExpression().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        outAMjNeqEqMpEqualityExpression(node);
    }

    public void inAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNeqMpReEqualityExpression(AMjNeqMpReEqualityExpression node)
    {
        inAMjNeqMpReEqualityExpression(node);
        if(node.getMpOutsideIncludedExprRelatedProdPlusId() != null)
        {
            node.getMpOutsideIncludedExprRelatedProdPlusId().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outAMjNeqMpReEqualityExpression(node);
    }

    public void inAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        defaultIn(node);
    }

    public void outAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjNeqMpMpEqualityExpression(AMjNeqMpMpEqualityExpression node)
    {
        inAMjNeqMpMpEqualityExpression(node);
        if(node.getMpElement1() != null)
        {
            node.getMpElement1().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getMpElement2() != null)
        {
            node.getMpElement2().apply(this);
        }
        outAMjNeqMpMpEqualityExpression(node);
    }

    public void inARelationalExpression(ARelationalExpression node)
    {
        defaultIn(node);
    }

    public void outARelationalExpression(ARelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationalExpression(ARelationalExpression node)
    {
        inARelationalExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outARelationalExpression(node);
    }

    public void inAPassThroughAdditiveExpression(APassThroughAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPassThroughAdditiveExpression(APassThroughAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassThroughAdditiveExpression(APassThroughAdditiveExpression node)
    {
        inAPassThroughAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPassThroughAdditiveExpression(node);
    }

    public void inAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        inAPlusAdMuAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPlusAdMuAdditiveExpression(node);
    }

    public void inAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        inAPlusAdIdAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPlusAdIdAdditiveExpression(node);
    }

    public void inAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        inAPlusIdMuAdditiveExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPlusIdMuAdditiveExpression(node);
    }

    public void inAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        inAPlusIdIdAdditiveExpression(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId1());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPlusIdIdAdditiveExpression(node);
    }

    public void inAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        inAMinusAdMuAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAMinusAdMuAdditiveExpression(node);
    }

    public void inAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        inAMinusAdIdAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMinusAdIdAdditiveExpression(node);
    }

    public void inAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        inAMinusIdMuAdditiveExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAMinusIdMuAdditiveExpression(node);
    }

    public void inAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        inAMinusIdIdAdditiveExpression(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId1());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId2());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMinusIdIdAdditiveExpression(node);
    }

    public void inAPassThroughMultiplicativeExpression(APassThroughMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAPassThroughMultiplicativeExpression(APassThroughMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassThroughMultiplicativeExpression(APassThroughMultiplicativeExpression node)
    {
        inAPassThroughMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAPassThroughMultiplicativeExpression(node);
    }

    public void inAMultiplyMuPrMultiplicativeExpression(AMultiplyMuPrMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMuPrMultiplicativeExpression(AMultiplyMuPrMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMuPrMultiplicativeExpression(AMultiplyMuPrMultiplicativeExpression node)
    {
        inAMultiplyMuPrMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMultiplyMuPrMultiplicativeExpression(node);
    }

    public void inAMultiplyMuIdMultiplicativeExpression(AMultiplyMuIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMuIdMultiplicativeExpression(AMultiplyMuIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMuIdMultiplicativeExpression(AMultiplyMuIdMultiplicativeExpression node)
    {
        inAMultiplyMuIdMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMultiplyMuIdMultiplicativeExpression(node);
    }

    public void inAMultiplyIdPrMultiplicativeExpression(AMultiplyIdPrMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyIdPrMultiplicativeExpression(AMultiplyIdPrMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyIdPrMultiplicativeExpression(AMultiplyIdPrMultiplicativeExpression node)
    {
        inAMultiplyIdPrMultiplicativeExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMultiplyIdPrMultiplicativeExpression(node);
    }

    public void inAMultiplyIdIdMultiplicativeExpression(AMultiplyIdIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyIdIdMultiplicativeExpression(AMultiplyIdIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyIdIdMultiplicativeExpression(AMultiplyIdIdMultiplicativeExpression node)
    {
        inAMultiplyIdIdMultiplicativeExpression(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        outAMultiplyIdIdMultiplicativeExpression(node);
    }

    public void inADivideMuPrMultiplicativeExpression(ADivideMuPrMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outADivideMuPrMultiplicativeExpression(ADivideMuPrMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMuPrMultiplicativeExpression(ADivideMuPrMultiplicativeExpression node)
    {
        inADivideMuPrMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outADivideMuPrMultiplicativeExpression(node);
    }

    public void inADivideMuIdMultiplicativeExpression(ADivideMuIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outADivideMuIdMultiplicativeExpression(ADivideMuIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMuIdMultiplicativeExpression(ADivideMuIdMultiplicativeExpression node)
    {
        inADivideMuIdMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADivideMuIdMultiplicativeExpression(node);
    }

    public void inADivideIdPrMultiplicativeExpression(ADivideIdPrMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outADivideIdPrMultiplicativeExpression(ADivideIdPrMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideIdPrMultiplicativeExpression(ADivideIdPrMultiplicativeExpression node)
    {
        inADivideIdPrMultiplicativeExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outADivideIdPrMultiplicativeExpression(node);
    }

    public void inADivideIdIdMultiplicativeExpression(ADivideIdIdMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outADivideIdIdMultiplicativeExpression(ADivideIdIdMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideIdIdMultiplicativeExpression(ADivideIdIdMultiplicativeExpression node)
    {
        inADivideIdIdMultiplicativeExpression(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId1());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAddId2());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outADivideIdIdMultiplicativeExpression(node);
    }

    public void inAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        inAPlusExpressionUnaryExpression(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAPlusExpressionUnaryExpression(node);
    }

    public void inAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        inAPlusIdentifierUnaryExpression(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAPlusIdentifierUnaryExpression(node);
    }

    public void inAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        inAMinusExpressionUnaryExpression(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMinusExpressionUnaryExpression(node);
    }

    public void inAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        inAMinusIdentifierUnaryExpression(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifiers());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMinusIdentifierUnaryExpression(node);
    }

    public void inAPassThroughUnaryExpression(APassThroughUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPassThroughUnaryExpression(APassThroughUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassThroughUnaryExpression(APassThroughUnaryExpression node)
    {
        inAPassThroughUnaryExpression(node);
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        outAPassThroughUnaryExpression(node);
    }

    public void inAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjPassThroughPostfixExpression(AMjPassThroughPostfixExpression node)
    {
        inAMjPassThroughPostfixExpression(node);
        if(node.getMpPrePrimary() != null)
        {
            node.getMpPrePrimary().apply(this);
        }
        outAMjPassThroughPostfixExpression(node);
    }

    public void inAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixAccessMpPrePrimary(AMjMatrixAccessMpPrePrimary node)
    {
        inAMjMatrixAccessMpPrePrimary(node);
        if(node.getMatrixAccess() != null)
        {
            node.getMatrixAccess().apply(this);
        }
        outAMjMatrixAccessMpPrePrimary(node);
    }

    public void inAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMpPrePrimary(APrimaryMpPrePrimary node)
    {
        inAPrimaryMpPrePrimary(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryMpPrePrimary(node);
    }

    public void inANoNewArrayPrimary(ANoNewArrayPrimary node)
    {
        defaultIn(node);
    }

    public void outANoNewArrayPrimary(ANoNewArrayPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoNewArrayPrimary(ANoNewArrayPrimary node)
    {
        inANoNewArrayPrimary(node);
        if(node.getPrimaryNoNewArray() != null)
        {
            node.getPrimaryNoNewArray().apply(this);
        }
        outANoNewArrayPrimary(node);
    }

    public void inALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        inALiteralPrimaryNoNewArray(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryNoNewArray(node);
    }

    public void inAParenthesisExpressionPrimaryNoNewArray(AParenthesisExpressionPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAParenthesisExpressionPrimaryNoNewArray(AParenthesisExpressionPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesisExpressionPrimaryNoNewArray(AParenthesisExpressionPrimaryNoNewArray node)
    {
        inAParenthesisExpressionPrimaryNoNewArray(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesisExpressionPrimaryNoNewArray(node);
    }

    public void inAParenthesisIdPrimaryNoNewArray(AParenthesisIdPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAParenthesisIdPrimaryNoNewArray(AParenthesisIdPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesisIdPrimaryNoNewArray(AParenthesisIdPrimaryNoNewArray node)
    {
        inAParenthesisIdPrimaryNoNewArray(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAdditionalIdentifier> copy = new ArrayList<PAdditionalIdentifier>(node.getAdditionalIdentifier());
            for(PAdditionalIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesisIdPrimaryNoNewArray(node);
    }

    public void inAFieldAccessPrimaryNoNewArray(AFieldAccessPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAFieldAccessPrimaryNoNewArray(AFieldAccessPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAccessPrimaryNoNewArray(AFieldAccessPrimaryNoNewArray node)
    {
        inAFieldAccessPrimaryNoNewArray(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldAccessPrimaryNoNewArray(node);
    }

    public void inAMethodInvocationPrimaryNoNewArray(AMethodInvocationPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMethodInvocationPrimaryNoNewArray(AMethodInvocationPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInvocationPrimaryNoNewArray(AMethodInvocationPrimaryNoNewArray node)
    {
        inAMethodInvocationPrimaryNoNewArray(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodInvocationPrimaryNoNewArray(node);
    }

    public void inAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSetCreationPrimaryNoNewArray(AMjSetCreationPrimaryNoNewArray node)
    {
        inAMjSetCreationPrimaryNoNewArray(node);
        if(node.getSetInstanceCreation() != null)
        {
            node.getSetInstanceCreation().apply(this);
        }
        outAMjSetCreationPrimaryNoNewArray(node);
    }

    public void inAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSubsetCreationPrimaryNoNewArray(AMjSubsetCreationPrimaryNoNewArray node)
    {
        inAMjSubsetCreationPrimaryNoNewArray(node);
        if(node.getSubsetCreation() != null)
        {
            node.getSubsetCreation().apply(this);
        }
        outAMjSubsetCreationPrimaryNoNewArray(node);
    }

    public void inAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjItVarPrimaryNoNewArray(AMjItVarPrimaryNoNewArray node)
    {
        inAMjItVarPrimaryNoNewArray(node);
        if(node.getItVariable() != null)
        {
            node.getItVariable().apply(this);
        }
        outAMjItVarPrimaryNoNewArray(node);
    }

    public void inAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjClosurePrimaryNoNewArray(AMjClosurePrimaryNoNewArray node)
    {
        inAMjClosurePrimaryNoNewArray(node);
        if(node.getCodeClosure() != null)
        {
            node.getCodeClosure().apply(this);
        }
        outAMjClosurePrimaryNoNewArray(node);
    }

    public void inAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjSymbolParensPrimaryNoNewArray(AMjSymbolParensPrimaryNoNewArray node)
    {
        inAMjSymbolParensPrimaryNoNewArray(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMpSymbolUseage() != null)
        {
            node.getMpSymbolUseage().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMjSymbolParensPrimaryNoNewArray(node);
    }

    public void inAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        defaultIn(node);
    }

    public void outAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMjMatrixElementCreationParensPrimaryNoNewArray(AMjMatrixElementCreationParensPrimaryNoNewArray node)
    {
        inAMjMatrixElementCreationParensPrimaryNoNewArray(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMatrixElementCreation() != null)
        {
            node.getMatrixElementCreation().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMjMatrixElementCreationParensPrimaryNoNewArray(node);
    }

    public void inAExpandingFieldAccess(AExpandingFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAExpandingFieldAccess(AExpandingFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpandingFieldAccess(AExpandingFieldAccess node)
    {
        inAExpandingFieldAccess(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExpandingFieldAccess(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        inAFloatingPointLiteral(node);
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        outAFloatingPointLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }
}
