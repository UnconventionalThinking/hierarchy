/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMjNeqMpReEqualityExpression extends PEqualityExpression
{
    private PMpOutsideIncludedExprRelatedProdPlusId _mpOutsideIncludedExprRelatedProdPlusId_;
    private TNeq _neq_;
    private PRelationalExpression _relationalExpression_;

    public AMjNeqMpReEqualityExpression()
    {
        // Constructor
    }

    public AMjNeqMpReEqualityExpression(
        @SuppressWarnings("hiding") PMpOutsideIncludedExprRelatedProdPlusId _mpOutsideIncludedExprRelatedProdPlusId_,
        @SuppressWarnings("hiding") TNeq _neq_,
        @SuppressWarnings("hiding") PRelationalExpression _relationalExpression_)
    {
        // Constructor
        setMpOutsideIncludedExprRelatedProdPlusId(_mpOutsideIncludedExprRelatedProdPlusId_);

        setNeq(_neq_);

        setRelationalExpression(_relationalExpression_);

    }

    @Override
    public Object clone()
    {
        return new AMjNeqMpReEqualityExpression(
            cloneNode(this._mpOutsideIncludedExprRelatedProdPlusId_),
            cloneNode(this._neq_),
            cloneNode(this._relationalExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMjNeqMpReEqualityExpression(this);
    }

    public PMpOutsideIncludedExprRelatedProdPlusId getMpOutsideIncludedExprRelatedProdPlusId()
    {
        return this._mpOutsideIncludedExprRelatedProdPlusId_;
    }

    public void setMpOutsideIncludedExprRelatedProdPlusId(PMpOutsideIncludedExprRelatedProdPlusId node)
    {
        if(this._mpOutsideIncludedExprRelatedProdPlusId_ != null)
        {
            this._mpOutsideIncludedExprRelatedProdPlusId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mpOutsideIncludedExprRelatedProdPlusId_ = node;
    }

    public TNeq getNeq()
    {
        return this._neq_;
    }

    public void setNeq(TNeq node)
    {
        if(this._neq_ != null)
        {
            this._neq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._neq_ = node;
    }

    public PRelationalExpression getRelationalExpression()
    {
        return this._relationalExpression_;
    }

    public void setRelationalExpression(PRelationalExpression node)
    {
        if(this._relationalExpression_ != null)
        {
            this._relationalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relationalExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mpOutsideIncludedExprRelatedProdPlusId_)
            + toString(this._neq_)
            + toString(this._relationalExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mpOutsideIncludedExprRelatedProdPlusId_ == child)
        {
            this._mpOutsideIncludedExprRelatedProdPlusId_ = null;
            return;
        }

        if(this._neq_ == child)
        {
            this._neq_ = null;
            return;
        }

        if(this._relationalExpression_ == child)
        {
            this._relationalExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mpOutsideIncludedExprRelatedProdPlusId_ == oldChild)
        {
            setMpOutsideIncludedExprRelatedProdPlusId((PMpOutsideIncludedExprRelatedProdPlusId) newChild);
            return;
        }

        if(this._neq_ == oldChild)
        {
            setNeq((TNeq) newChild);
            return;
        }

        if(this._relationalExpression_ == oldChild)
        {
            setRelationalExpression((PRelationalExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
