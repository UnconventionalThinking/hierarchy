/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AManyFormalParameters extends PFormalParameters
{
    private PFormalParameters _formalParameters_;
    private TComma _comma_;
    private PFormalParameter _formalParameter_;

    public AManyFormalParameters()
    {
        // Constructor
    }

    public AManyFormalParameters(
        @SuppressWarnings("hiding") PFormalParameters _formalParameters_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PFormalParameter _formalParameter_)
    {
        // Constructor
        setFormalParameters(_formalParameters_);

        setComma(_comma_);

        setFormalParameter(_formalParameter_);

    }

    @Override
    public Object clone()
    {
        return new AManyFormalParameters(
            cloneNode(this._formalParameters_),
            cloneNode(this._comma_),
            cloneNode(this._formalParameter_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAManyFormalParameters(this);
    }

    public PFormalParameters getFormalParameters()
    {
        return this._formalParameters_;
    }

    public void setFormalParameters(PFormalParameters node)
    {
        if(this._formalParameters_ != null)
        {
            this._formalParameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalParameters_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PFormalParameter getFormalParameter()
    {
        return this._formalParameter_;
    }

    public void setFormalParameter(PFormalParameter node)
    {
        if(this._formalParameter_ != null)
        {
            this._formalParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalParameter_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._formalParameters_)
            + toString(this._comma_)
            + toString(this._formalParameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._formalParameters_ == child)
        {
            this._formalParameters_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._formalParameter_ == child)
        {
            this._formalParameter_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._formalParameters_ == oldChild)
        {
            setFormalParameters((PFormalParameters) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._formalParameter_ == oldChild)
        {
            setFormalParameter((PFormalParameter) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
