/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.unconventionalthinking.hierarchy.grammar.node;

import net.unconventionalthinking.hierarchy.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMjOutsideIncludedReturnStatement extends PReturnStatement
{
    private TReturn _return_;
    private PMpOutsideIncludedExpressionRelatedProd _mpOutsideIncludedExpressionRelatedProd_;
    private TSemi _semi_;

    public AMjOutsideIncludedReturnStatement()
    {
        // Constructor
    }

    public AMjOutsideIncludedReturnStatement(
        @SuppressWarnings("hiding") TReturn _return_,
        @SuppressWarnings("hiding") PMpOutsideIncludedExpressionRelatedProd _mpOutsideIncludedExpressionRelatedProd_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setReturn(_return_);

        setMpOutsideIncludedExpressionRelatedProd(_mpOutsideIncludedExpressionRelatedProd_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AMjOutsideIncludedReturnStatement(
            cloneNode(this._return_),
            cloneNode(this._mpOutsideIncludedExpressionRelatedProd_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMjOutsideIncludedReturnStatement(this);
    }

    public TReturn getReturn()
    {
        return this._return_;
    }

    public void setReturn(TReturn node)
    {
        if(this._return_ != null)
        {
            this._return_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._return_ = node;
    }

    public PMpOutsideIncludedExpressionRelatedProd getMpOutsideIncludedExpressionRelatedProd()
    {
        return this._mpOutsideIncludedExpressionRelatedProd_;
    }

    public void setMpOutsideIncludedExpressionRelatedProd(PMpOutsideIncludedExpressionRelatedProd node)
    {
        if(this._mpOutsideIncludedExpressionRelatedProd_ != null)
        {
            this._mpOutsideIncludedExpressionRelatedProd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mpOutsideIncludedExpressionRelatedProd_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._return_)
            + toString(this._mpOutsideIncludedExpressionRelatedProd_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._return_ == child)
        {
            this._return_ = null;
            return;
        }

        if(this._mpOutsideIncludedExpressionRelatedProd_ == child)
        {
            this._mpOutsideIncludedExpressionRelatedProd_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._return_ == oldChild)
        {
            setReturn((TReturn) newChild);
            return;
        }

        if(this._mpOutsideIncludedExpressionRelatedProd_ == oldChild)
        {
            setMpOutsideIncludedExpressionRelatedProd((PMpOutsideIncludedExpressionRelatedProd) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
