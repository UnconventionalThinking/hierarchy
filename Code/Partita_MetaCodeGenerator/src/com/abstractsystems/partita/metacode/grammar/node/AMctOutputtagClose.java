/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstractsystems.partita.metacode.grammar.node;

import com.abstractsystems.partita.metacode.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMctOutputtagClose extends PMctOutputtagClose
{
    private TCodetagClose _codetagClose_;
    private PMctAttributeOutput _mctAttributeOutput_;
    private TOutputtagCloseEndtoken _outputtagCloseEndtoken_;

    public AMctOutputtagClose()
    {
        // Constructor
    }

    public AMctOutputtagClose(
        @SuppressWarnings("hiding") TCodetagClose _codetagClose_,
        @SuppressWarnings("hiding") PMctAttributeOutput _mctAttributeOutput_,
        @SuppressWarnings("hiding") TOutputtagCloseEndtoken _outputtagCloseEndtoken_)
    {
        // Constructor
        setCodetagClose(_codetagClose_);

        setMctAttributeOutput(_mctAttributeOutput_);

        setOutputtagCloseEndtoken(_outputtagCloseEndtoken_);

    }

    @Override
    public Object clone()
    {
        return new AMctOutputtagClose(
            cloneNode(this._codetagClose_),
            cloneNode(this._mctAttributeOutput_),
            cloneNode(this._outputtagCloseEndtoken_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMctOutputtagClose(this);
    }

    public TCodetagClose getCodetagClose()
    {
        return this._codetagClose_;
    }

    public void setCodetagClose(TCodetagClose node)
    {
        if(this._codetagClose_ != null)
        {
            this._codetagClose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._codetagClose_ = node;
    }

    public PMctAttributeOutput getMctAttributeOutput()
    {
        return this._mctAttributeOutput_;
    }

    public void setMctAttributeOutput(PMctAttributeOutput node)
    {
        if(this._mctAttributeOutput_ != null)
        {
            this._mctAttributeOutput_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mctAttributeOutput_ = node;
    }

    public TOutputtagCloseEndtoken getOutputtagCloseEndtoken()
    {
        return this._outputtagCloseEndtoken_;
    }

    public void setOutputtagCloseEndtoken(TOutputtagCloseEndtoken node)
    {
        if(this._outputtagCloseEndtoken_ != null)
        {
            this._outputtagCloseEndtoken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._outputtagCloseEndtoken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._codetagClose_)
            + toString(this._mctAttributeOutput_)
            + toString(this._outputtagCloseEndtoken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._codetagClose_ == child)
        {
            this._codetagClose_ = null;
            return;
        }

        if(this._mctAttributeOutput_ == child)
        {
            this._mctAttributeOutput_ = null;
            return;
        }

        if(this._outputtagCloseEndtoken_ == child)
        {
            this._outputtagCloseEndtoken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._codetagClose_ == oldChild)
        {
            setCodetagClose((TCodetagClose) newChild);
            return;
        }

        if(this._mctAttributeOutput_ == oldChild)
        {
            setMctAttributeOutput((PMctAttributeOutput) newChild);
            return;
        }

        if(this._outputtagCloseEndtoken_ == oldChild)
        {
            setOutputtagCloseEndtoken((TOutputtagCloseEndtoken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
