/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstractsystems.partita.metacode.grammar.analysis;

import com.abstractsystems.partita.metacode.grammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAMctTranslationPass(AMctTranslationPass node);
    void caseACodetagMctCodechunkOptions(ACodetagMctCodechunkOptions node);
    void caseAOutputtagMctCodechunkOptions(AOutputtagMctCodechunkOptions node);
    void caseASingleMctCodetagOptions(ASingleMctCodetagOptions node);
    void caseAPairMctCodetagOptions(APairMctCodetagOptions node);
    void caseAMctAttribtagSingle(AMctAttribtagSingle node);
    void caseAMctAttribtagPair(AMctAttribtagPair node);
    void caseAMctCodetagOpen(AMctCodetagOpen node);
    void caseAMctCodetagClose(AMctCodetagClose node);
    void caseAMctAttribute(AMctAttribute node);
    void caseAMctCodetagAttribname(AMctCodetagAttribname node);
    void caseADescriptortagnameStandardMctDescriptorChildren(ADescriptortagnameStandardMctDescriptorChildren node);
    void caseADescriptortagnameBacktiksMctDescriptorChildren(ADescriptortagnameBacktiksMctDescriptorChildren node);
    void caseADescriptorTagname(ADescriptorTagname node);
    void caseADescriptorTagnameChildren(ADescriptorTagnameChildren node);
    void caseADescriptorLabelnameBacktiks(ADescriptorLabelnameBacktiks node);
    void caseASingleMctOutputtagOptions(ASingleMctOutputtagOptions node);
    void caseAPairMctOutputtagOptions(APairMctOutputtagOptions node);
    void caseAMctOutputtagSingle(AMctOutputtagSingle node);
    void caseAMctOutputtagPair(AMctOutputtagPair node);
    void caseAMctAttributeOutput(AMctAttributeOutput node);
    void caseAMctOutputtagOpen(AMctOutputtagOpen node);
    void caseAMctOutputtagClose(AMctOutputtagClose node);
    void caseAMctOutputtagBody(AMctOutputtagBody node);

    void caseTCodetagOpen(TCodetagOpen node);
    void caseTCodetagAttribOutput(TCodetagAttribOutput node);
    void caseTCodetagAttrib(TCodetagAttrib node);
    void caseTCodetagEndtoken(TCodetagEndtoken node);
    void caseTCodetagOpenEndtokenSingle(TCodetagOpenEndtokenSingle node);
    void caseTCodetagClose(TCodetagClose node);
    void caseTOutputtagCloseEndtoken(TOutputtagCloseEndtoken node);
    void caseTDot(TDot node);
    void caseTColon(TColon node);
    void caseTIdentifier(TIdentifier node);
    void caseTSymbolBacktikText(TSymbolBacktikText node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseEOF(EOF node);
}
