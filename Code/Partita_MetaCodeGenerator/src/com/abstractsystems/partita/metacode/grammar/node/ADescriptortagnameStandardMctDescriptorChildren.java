/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstractsystems.partita.metacode.grammar.node;

import com.abstractsystems.partita.metacode.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ADescriptortagnameStandardMctDescriptorChildren extends PMctDescriptorChildren
{
    private TColon _colon_;
    private PDescriptorTagname _descriptorTagname_;

    public ADescriptortagnameStandardMctDescriptorChildren()
    {
        // Constructor
    }

    public ADescriptortagnameStandardMctDescriptorChildren(
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PDescriptorTagname _descriptorTagname_)
    {
        // Constructor
        setColon(_colon_);

        setDescriptorTagname(_descriptorTagname_);

    }

    @Override
    public Object clone()
    {
        return new ADescriptortagnameStandardMctDescriptorChildren(
            cloneNode(this._colon_),
            cloneNode(this._descriptorTagname_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADescriptortagnameStandardMctDescriptorChildren(this);
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PDescriptorTagname getDescriptorTagname()
    {
        return this._descriptorTagname_;
    }

    public void setDescriptorTagname(PDescriptorTagname node)
    {
        if(this._descriptorTagname_ != null)
        {
            this._descriptorTagname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._descriptorTagname_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colon_)
            + toString(this._descriptorTagname_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._descriptorTagname_ == child)
        {
            this._descriptorTagname_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._descriptorTagname_ == oldChild)
        {
            setDescriptorTagname((PDescriptorTagname) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
