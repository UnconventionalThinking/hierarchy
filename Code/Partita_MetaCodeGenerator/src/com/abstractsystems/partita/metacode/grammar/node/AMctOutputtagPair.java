/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstractsystems.partita.metacode.grammar.node;

import com.abstractsystems.partita.metacode.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMctOutputtagPair extends PMctOutputtagPair
{
    private PMctOutputtagOpen _mctOutputtagOpen_;
    private PMctOutputtagBody _mctOutputtagBody_;
    private PMctOutputtagClose _mctOutputtagClose_;

    public AMctOutputtagPair()
    {
        // Constructor
    }

    public AMctOutputtagPair(
        @SuppressWarnings("hiding") PMctOutputtagOpen _mctOutputtagOpen_,
        @SuppressWarnings("hiding") PMctOutputtagBody _mctOutputtagBody_,
        @SuppressWarnings("hiding") PMctOutputtagClose _mctOutputtagClose_)
    {
        // Constructor
        setMctOutputtagOpen(_mctOutputtagOpen_);

        setMctOutputtagBody(_mctOutputtagBody_);

        setMctOutputtagClose(_mctOutputtagClose_);

    }

    @Override
    public Object clone()
    {
        return new AMctOutputtagPair(
            cloneNode(this._mctOutputtagOpen_),
            cloneNode(this._mctOutputtagBody_),
            cloneNode(this._mctOutputtagClose_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMctOutputtagPair(this);
    }

    public PMctOutputtagOpen getMctOutputtagOpen()
    {
        return this._mctOutputtagOpen_;
    }

    public void setMctOutputtagOpen(PMctOutputtagOpen node)
    {
        if(this._mctOutputtagOpen_ != null)
        {
            this._mctOutputtagOpen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mctOutputtagOpen_ = node;
    }

    public PMctOutputtagBody getMctOutputtagBody()
    {
        return this._mctOutputtagBody_;
    }

    public void setMctOutputtagBody(PMctOutputtagBody node)
    {
        if(this._mctOutputtagBody_ != null)
        {
            this._mctOutputtagBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mctOutputtagBody_ = node;
    }

    public PMctOutputtagClose getMctOutputtagClose()
    {
        return this._mctOutputtagClose_;
    }

    public void setMctOutputtagClose(PMctOutputtagClose node)
    {
        if(this._mctOutputtagClose_ != null)
        {
            this._mctOutputtagClose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mctOutputtagClose_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mctOutputtagOpen_)
            + toString(this._mctOutputtagBody_)
            + toString(this._mctOutputtagClose_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mctOutputtagOpen_ == child)
        {
            this._mctOutputtagOpen_ = null;
            return;
        }

        if(this._mctOutputtagBody_ == child)
        {
            this._mctOutputtagBody_ = null;
            return;
        }

        if(this._mctOutputtagClose_ == child)
        {
            this._mctOutputtagClose_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mctOutputtagOpen_ == oldChild)
        {
            setMctOutputtagOpen((PMctOutputtagOpen) newChild);
            return;
        }

        if(this._mctOutputtagBody_ == oldChild)
        {
            setMctOutputtagBody((PMctOutputtagBody) newChild);
            return;
        }

        if(this._mctOutputtagClose_ == oldChild)
        {
            setMctOutputtagClose((PMctOutputtagClose) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
