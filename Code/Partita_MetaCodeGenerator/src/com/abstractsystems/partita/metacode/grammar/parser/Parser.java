/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstractsystems.partita.metacode.grammar.parser;

import com.abstractsystems.partita.metacode.grammar.lexer.*;
import com.abstractsystems.partita.metacode.grammar.node.*;
import com.abstractsystems.partita.metacode.grammar.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAmcttranslationpass1MctTranslationPass */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAmcttranslationpass2MctTranslationPass */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ACodetagMctCodechunkOptions */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AOutputtagMctCodechunkOptions */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce ASingleMctCodetagOptions */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce APairMctCodetagOptions */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AMctAttribtagSingle */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAmctattribtagpair1MctAttribtagPair */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AAmctattribtagpair2MctAttribtagPair */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AMctCodetagOpen */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AMctCodetagClose */
		    {
			ArrayList list = new10();
			push(goTo(6), list, false);
		    }
		    break;
                    case 11: /* reduce AAmctattribute1MctAttribute */
		    {
			ArrayList list = new11();
			push(goTo(7), list, false);
		    }
		    break;
                    case 12: /* reduce AAmctattribute2MctAttribute */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AAmctcodetagattribname1MctCodetagAttribname */
		    {
			ArrayList list = new13();
			push(goTo(8), list, false);
		    }
		    break;
                    case 14: /* reduce AAmctcodetagattribname2MctCodetagAttribname */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce ADescriptortagnameStandardMctDescriptorChildren */
		    {
			ArrayList list = new15();
			push(goTo(9), list, false);
		    }
		    break;
                    case 16: /* reduce ADescriptortagnameBacktiksMctDescriptorChildren */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AAdescriptortagname1DescriptorTagname */
		    {
			ArrayList list = new17();
			push(goTo(10), list, false);
		    }
		    break;
                    case 18: /* reduce AAdescriptortagname2DescriptorTagname */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce ADescriptorTagnameChildren */
		    {
			ArrayList list = new19();
			push(goTo(11), list, false);
		    }
		    break;
                    case 20: /* reduce ADescriptorLabelnameBacktiks */
		    {
			ArrayList list = new20();
			push(goTo(12), list, false);
		    }
		    break;
                    case 21: /* reduce ASingleMctOutputtagOptions */
		    {
			ArrayList list = new21();
			push(goTo(13), list, false);
		    }
		    break;
                    case 22: /* reduce APairMctOutputtagOptions */
		    {
			ArrayList list = new22();
			push(goTo(13), list, false);
		    }
		    break;
                    case 23: /* reduce AMctOutputtagSingle */
		    {
			ArrayList list = new23();
			push(goTo(14), list, false);
		    }
		    break;
                    case 24: /* reduce AMctOutputtagPair */
		    {
			ArrayList list = new24();
			push(goTo(15), list, false);
		    }
		    break;
                    case 25: /* reduce AAmctattributeoutput1MctAttributeOutput */
		    {
			ArrayList list = new25();
			push(goTo(16), list, false);
		    }
		    break;
                    case 26: /* reduce AAmctattributeoutput2MctAttributeOutput */
		    {
			ArrayList list = new26();
			push(goTo(16), list, false);
		    }
		    break;
                    case 27: /* reduce AMctOutputtagOpen */
		    {
			ArrayList list = new27();
			push(goTo(17), list, false);
		    }
		    break;
                    case 28: /* reduce AMctOutputtagClose */
		    {
			ArrayList list = new28();
			push(goTo(18), list, false);
		    }
		    break;
                    case 29: /* reduce AMctOutputtagBody */
		    {
			ArrayList list = new29();
			push(goTo(19), list, false);
		    }
		    break;
                    case 30: /* reduce ATerminal$MctCodechunkOptions */
		    {
			ArrayList list = new30();
			push(goTo(20), list, true);
		    }
		    break;
                    case 31: /* reduce ANonTerminal$MctCodechunkOptions */
		    {
			ArrayList list = new31();
			push(goTo(20), list, true);
		    }
		    break;
                    case 32: /* reduce ATerminal$MctDescriptorChildren */
		    {
			ArrayList list = new32();
			push(goTo(21), list, true);
		    }
		    break;
                    case 33: /* reduce ANonTerminal$MctDescriptorChildren */
		    {
			ArrayList list = new33();
			push(goTo(21), list, true);
		    }
		    break;
                    case 34: /* reduce ATerminal$DescriptorTagnameChildren */
		    {
			ArrayList list = new34();
			push(goTo(22), list, true);
		    }
		    break;
                    case 35: /* reduce ANonTerminal$DescriptorTagnameChildren */
		    {
			ArrayList list = new35();
			push(goTo(22), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PMctTranslationPass node1 = (PMctTranslationPass) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAmcttranslationpass1MctTranslationPass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PMctTranslationPass pmcttranslationpassNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pmcttranslationpassNode1 = new AMctTranslationPass(listNode2);
        }
	nodeList.add(pmcttranslationpassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAmcttranslationpass2MctTranslationPass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctTranslationPass pmcttranslationpassNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pmcttranslationpassNode1 = new AMctTranslationPass(listNode3);
        }
	nodeList.add(pmcttranslationpassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ACodetagMctCodechunkOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodechunkOptions pmctcodechunkoptionsNode1;
        {
            // Block
        PMctCodetagOptions pmctcodetagoptionsNode2;
        pmctcodetagoptionsNode2 = (PMctCodetagOptions)nodeArrayList1.get(0);

        pmctcodechunkoptionsNode1 = new ACodetagMctCodechunkOptions(pmctcodetagoptionsNode2);
        }
	nodeList.add(pmctcodechunkoptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AOutputtagMctCodechunkOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodechunkOptions pmctcodechunkoptionsNode1;
        {
            // Block
        PMctOutputtagOptions pmctoutputtagoptionsNode2;
        pmctoutputtagoptionsNode2 = (PMctOutputtagOptions)nodeArrayList1.get(0);

        pmctcodechunkoptionsNode1 = new AOutputtagMctCodechunkOptions(pmctoutputtagoptionsNode2);
        }
	nodeList.add(pmctcodechunkoptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ASingleMctCodetagOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodetagOptions pmctcodetagoptionsNode1;
        {
            // Block
        PMctAttribtagSingle pmctattribtagsingleNode2;
        pmctattribtagsingleNode2 = (PMctAttribtagSingle)nodeArrayList1.get(0);

        pmctcodetagoptionsNode1 = new ASingleMctCodetagOptions(pmctattribtagsingleNode2);
        }
	nodeList.add(pmctcodetagoptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce APairMctCodetagOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodetagOptions pmctcodetagoptionsNode1;
        {
            // Block
        PMctAttribtagPair pmctattribtagpairNode2;
        pmctattribtagpairNode2 = (PMctAttribtagPair)nodeArrayList1.get(0);

        pmctcodetagoptionsNode1 = new APairMctCodetagOptions(pmctattribtagpairNode2);
        }
	nodeList.add(pmctcodetagoptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AMctAttribtagSingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttribtagSingle pmctattribtagsingleNode1;
        {
            // Block
        TCodetagOpen tcodetagopenNode2;
        PMctAttribute pmctattributeNode3;
        TCodetagOpenEndtokenSingle tcodetagopenendtokensingleNode4;
        tcodetagopenNode2 = (TCodetagOpen)nodeArrayList1.get(0);
        pmctattributeNode3 = (PMctAttribute)nodeArrayList2.get(0);
        tcodetagopenendtokensingleNode4 = (TCodetagOpenEndtokenSingle)nodeArrayList3.get(0);

        pmctattribtagsingleNode1 = new AMctAttribtagSingle(tcodetagopenNode2, pmctattributeNode3, tcodetagopenendtokensingleNode4);
        }
	nodeList.add(pmctattribtagsingleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAmctattribtagpair1MctAttribtagPair */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttribtagPair pmctattribtagpairNode1;
        {
            // Block
        PMctCodetagOpen pmctcodetagopenNode2;
        LinkedList listNode3 = new LinkedList();
        PMctCodetagClose pmctcodetagcloseNode4;
        pmctcodetagopenNode2 = (PMctCodetagOpen)nodeArrayList1.get(0);
        {
            // Block
        }
        pmctcodetagcloseNode4 = (PMctCodetagClose)nodeArrayList2.get(0);

        pmctattribtagpairNode1 = new AMctAttribtagPair(pmctcodetagopenNode2, listNode3, pmctcodetagcloseNode4);
        }
	nodeList.add(pmctattribtagpairNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAmctattribtagpair2MctAttribtagPair */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttribtagPair pmctattribtagpairNode1;
        {
            // Block
        PMctCodetagOpen pmctcodetagopenNode2;
        LinkedList listNode4 = new LinkedList();
        PMctCodetagClose pmctcodetagcloseNode5;
        pmctcodetagopenNode2 = (PMctCodetagOpen)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pmctcodetagcloseNode5 = (PMctCodetagClose)nodeArrayList3.get(0);

        pmctattribtagpairNode1 = new AMctAttribtagPair(pmctcodetagopenNode2, listNode4, pmctcodetagcloseNode5);
        }
	nodeList.add(pmctattribtagpairNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AMctCodetagOpen */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodetagOpen pmctcodetagopenNode1;
        {
            // Block
        TCodetagOpen tcodetagopenNode2;
        PMctAttribute pmctattributeNode3;
        TCodetagEndtoken tcodetagendtokenNode4;
        tcodetagopenNode2 = (TCodetagOpen)nodeArrayList1.get(0);
        pmctattributeNode3 = (PMctAttribute)nodeArrayList2.get(0);
        tcodetagendtokenNode4 = (TCodetagEndtoken)nodeArrayList3.get(0);

        pmctcodetagopenNode1 = new AMctCodetagOpen(tcodetagopenNode2, pmctattributeNode3, tcodetagendtokenNode4);
        }
	nodeList.add(pmctcodetagopenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AMctCodetagClose */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodetagClose pmctcodetagcloseNode1;
        {
            // Block
        TCodetagClose tcodetagcloseNode2;
        PMctAttribute pmctattributeNode3;
        TCodetagEndtoken tcodetagendtokenNode4;
        tcodetagcloseNode2 = (TCodetagClose)nodeArrayList1.get(0);
        pmctattributeNode3 = (PMctAttribute)nodeArrayList2.get(0);
        tcodetagendtokenNode4 = (TCodetagEndtoken)nodeArrayList3.get(0);

        pmctcodetagcloseNode1 = new AMctCodetagClose(tcodetagcloseNode2, pmctattributeNode3, tcodetagendtokenNode4);
        }
	nodeList.add(pmctcodetagcloseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAmctattribute1MctAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttribute pmctattributeNode1;
        {
            // Block
        PMctCodetagAttribname pmctcodetagattribnameNode2;
        LinkedList listNode3 = new LinkedList();
        pmctcodetagattribnameNode2 = (PMctCodetagAttribname)nodeArrayList1.get(0);
        {
            // Block
        }

        pmctattributeNode1 = new AMctAttribute(pmctcodetagattribnameNode2, listNode3);
        }
	nodeList.add(pmctattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAmctattribute2MctAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttribute pmctattributeNode1;
        {
            // Block
        PMctCodetagAttribname pmctcodetagattribnameNode2;
        LinkedList listNode4 = new LinkedList();
        pmctcodetagattribnameNode2 = (PMctCodetagAttribname)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmctattributeNode1 = new AMctAttribute(pmctcodetagattribnameNode2, listNode4);
        }
	nodeList.add(pmctattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAmctcodetagattribname1MctCodetagAttribname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodetagAttribname pmctcodetagattribnameNode1;
        {
            // Block
        TCodetagAttrib tcodetagattribNode2;
        LinkedList listNode3 = new LinkedList();
        tcodetagattribNode2 = (TCodetagAttrib)nodeArrayList1.get(0);
        {
            // Block
        }

        pmctcodetagattribnameNode1 = new AMctCodetagAttribname(tcodetagattribNode2, listNode3);
        }
	nodeList.add(pmctcodetagattribnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAmctcodetagattribname2MctCodetagAttribname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctCodetagAttribname pmctcodetagattribnameNode1;
        {
            // Block
        TCodetagAttrib tcodetagattribNode2;
        LinkedList listNode4 = new LinkedList();
        tcodetagattribNode2 = (TCodetagAttrib)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmctcodetagattribnameNode1 = new AMctCodetagAttribname(tcodetagattribNode2, listNode4);
        }
	nodeList.add(pmctcodetagattribnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ADescriptortagnameStandardMctDescriptorChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctDescriptorChildren pmctdescriptorchildrenNode1;
        {
            // Block
        TColon tcolonNode2;
        PDescriptorTagname pdescriptortagnameNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        pdescriptortagnameNode3 = (PDescriptorTagname)nodeArrayList2.get(0);

        pmctdescriptorchildrenNode1 = new ADescriptortagnameStandardMctDescriptorChildren(tcolonNode2, pdescriptortagnameNode3);
        }
	nodeList.add(pmctdescriptorchildrenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ADescriptortagnameBacktiksMctDescriptorChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctDescriptorChildren pmctdescriptorchildrenNode1;
        {
            // Block
        TColon tcolonNode2;
        PDescriptorLabelnameBacktiks pdescriptorlabelnamebacktiksNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        pdescriptorlabelnamebacktiksNode3 = (PDescriptorLabelnameBacktiks)nodeArrayList2.get(0);

        pmctdescriptorchildrenNode1 = new ADescriptortagnameBacktiksMctDescriptorChildren(tcolonNode2, pdescriptorlabelnamebacktiksNode3);
        }
	nodeList.add(pmctdescriptorchildrenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAdescriptortagname1DescriptorTagname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescriptorTagname pdescriptortagnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pdescriptortagnameNode1 = new ADescriptorTagname(tidentifierNode2, listNode3);
        }
	nodeList.add(pdescriptortagnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAdescriptortagname2DescriptorTagname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescriptorTagname pdescriptortagnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdescriptortagnameNode1 = new ADescriptorTagname(tidentifierNode2, listNode4);
        }
	nodeList.add(pdescriptortagnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ADescriptorTagnameChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescriptorTagnameChildren pdescriptortagnamechildrenNode1;
        {
            // Block
        TDot tdotNode2;
        TIdentifier tidentifierNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pdescriptortagnamechildrenNode1 = new ADescriptorTagnameChildren(tdotNode2, tidentifierNode3);
        }
	nodeList.add(pdescriptortagnamechildrenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ADescriptorLabelnameBacktiks */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDescriptorLabelnameBacktiks pdescriptorlabelnamebacktiksNode1;
        {
            // Block
        TSymbolBacktikText tsymbolbacktiktextNode2;
        tsymbolbacktiktextNode2 = (TSymbolBacktikText)nodeArrayList1.get(0);

        pdescriptorlabelnamebacktiksNode1 = new ADescriptorLabelnameBacktiks(tsymbolbacktiktextNode2);
        }
	nodeList.add(pdescriptorlabelnamebacktiksNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ASingleMctOutputtagOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctOutputtagOptions pmctoutputtagoptionsNode1;
        {
            // Block
        PMctOutputtagSingle pmctoutputtagsingleNode2;
        pmctoutputtagsingleNode2 = (PMctOutputtagSingle)nodeArrayList1.get(0);

        pmctoutputtagoptionsNode1 = new ASingleMctOutputtagOptions(pmctoutputtagsingleNode2);
        }
	nodeList.add(pmctoutputtagoptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce APairMctOutputtagOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctOutputtagOptions pmctoutputtagoptionsNode1;
        {
            // Block
        PMctOutputtagPair pmctoutputtagpairNode2;
        pmctoutputtagpairNode2 = (PMctOutputtagPair)nodeArrayList1.get(0);

        pmctoutputtagoptionsNode1 = new APairMctOutputtagOptions(pmctoutputtagpairNode2);
        }
	nodeList.add(pmctoutputtagoptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AMctOutputtagSingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctOutputtagSingle pmctoutputtagsingleNode1;
        {
            // Block
        TCodetagOpen tcodetagopenNode2;
        PMctAttributeOutput pmctattributeoutputNode3;
        TCodetagOpenEndtokenSingle tcodetagopenendtokensingleNode4;
        tcodetagopenNode2 = (TCodetagOpen)nodeArrayList1.get(0);
        pmctattributeoutputNode3 = (PMctAttributeOutput)nodeArrayList2.get(0);
        tcodetagopenendtokensingleNode4 = (TCodetagOpenEndtokenSingle)nodeArrayList3.get(0);

        pmctoutputtagsingleNode1 = new AMctOutputtagSingle(tcodetagopenNode2, pmctattributeoutputNode3, tcodetagopenendtokensingleNode4);
        }
	nodeList.add(pmctoutputtagsingleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AMctOutputtagPair */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctOutputtagPair pmctoutputtagpairNode1;
        {
            // Block
        PMctOutputtagOpen pmctoutputtagopenNode2;
        PMctOutputtagBody pmctoutputtagbodyNode3;
        PMctOutputtagClose pmctoutputtagcloseNode4;
        pmctoutputtagopenNode2 = (PMctOutputtagOpen)nodeArrayList1.get(0);
        pmctoutputtagbodyNode3 = (PMctOutputtagBody)nodeArrayList2.get(0);
        pmctoutputtagcloseNode4 = (PMctOutputtagClose)nodeArrayList3.get(0);

        pmctoutputtagpairNode1 = new AMctOutputtagPair(pmctoutputtagopenNode2, pmctoutputtagbodyNode3, pmctoutputtagcloseNode4);
        }
	nodeList.add(pmctoutputtagpairNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAmctattributeoutput1MctAttributeOutput */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttributeOutput pmctattributeoutputNode1;
        {
            // Block
        TCodetagAttribOutput tcodetagattriboutputNode2;
        LinkedList listNode3 = new LinkedList();
        tcodetagattriboutputNode2 = (TCodetagAttribOutput)nodeArrayList1.get(0);
        {
            // Block
        }

        pmctattributeoutputNode1 = new AMctAttributeOutput(tcodetagattriboutputNode2, listNode3);
        }
	nodeList.add(pmctattributeoutputNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAmctattributeoutput2MctAttributeOutput */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctAttributeOutput pmctattributeoutputNode1;
        {
            // Block
        TCodetagAttribOutput tcodetagattriboutputNode2;
        LinkedList listNode4 = new LinkedList();
        tcodetagattriboutputNode2 = (TCodetagAttribOutput)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmctattributeoutputNode1 = new AMctAttributeOutput(tcodetagattriboutputNode2, listNode4);
        }
	nodeList.add(pmctattributeoutputNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AMctOutputtagOpen */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctOutputtagOpen pmctoutputtagopenNode1;
        {
            // Block
        TCodetagOpen tcodetagopenNode2;
        PMctAttributeOutput pmctattributeoutputNode3;
        TCodetagEndtoken tcodetagendtokenNode4;
        tcodetagopenNode2 = (TCodetagOpen)nodeArrayList1.get(0);
        pmctattributeoutputNode3 = (PMctAttributeOutput)nodeArrayList2.get(0);
        tcodetagendtokenNode4 = (TCodetagEndtoken)nodeArrayList3.get(0);

        pmctoutputtagopenNode1 = new AMctOutputtagOpen(tcodetagopenNode2, pmctattributeoutputNode3, tcodetagendtokenNode4);
        }
	nodeList.add(pmctoutputtagopenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AMctOutputtagClose */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMctOutputtagClose pmctoutputtagcloseNode1;
        {
            // Block
        TCodetagClose tcodetagcloseNode2;
        PMctAttributeOutput pmctattributeoutputNode3;
        TOutputtagCloseEndtoken toutputtagcloseendtokenNode4;
        tcodetagcloseNode2 = (TCodetagClose)nodeArrayList1.get(0);
        pmctattributeoutputNode3 = (PMctAttributeOutput)nodeArrayList2.get(0);
        toutputtagcloseendtokenNode4 = (TOutputtagCloseEndtoken)nodeArrayList3.get(0);

        pmctoutputtagcloseNode1 = new AMctOutputtagClose(tcodetagcloseNode2, pmctattributeoutputNode3, toutputtagcloseendtokenNode4);
        }
	nodeList.add(pmctoutputtagcloseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AMctOutputtagBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PMctOutputtagBody pmctoutputtagbodyNode1;
        {
            // Block

        pmctoutputtagbodyNode1 = new AMctOutputtagBody();
        }
	nodeList.add(pmctoutputtagbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ATerminal$MctCodechunkOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMctCodechunkOptions pmctcodechunkoptionsNode1;
        pmctcodechunkoptionsNode1 = (PMctCodechunkOptions)nodeArrayList1.get(0);
	if(pmctcodechunkoptionsNode1 != null)
	{
	  listNode2.add(pmctcodechunkoptionsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANonTerminal$MctCodechunkOptions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMctCodechunkOptions pmctcodechunkoptionsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmctcodechunkoptionsNode2 = (PMctCodechunkOptions)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmctcodechunkoptionsNode2 != null)
	{
	  listNode3.add(pmctcodechunkoptionsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ATerminal$MctDescriptorChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMctDescriptorChildren pmctdescriptorchildrenNode1;
        pmctdescriptorchildrenNode1 = (PMctDescriptorChildren)nodeArrayList1.get(0);
	if(pmctdescriptorchildrenNode1 != null)
	{
	  listNode2.add(pmctdescriptorchildrenNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ANonTerminal$MctDescriptorChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMctDescriptorChildren pmctdescriptorchildrenNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmctdescriptorchildrenNode2 = (PMctDescriptorChildren)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmctdescriptorchildrenNode2 != null)
	{
	  listNode3.add(pmctdescriptorchildrenNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATerminal$DescriptorTagnameChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDescriptorTagnameChildren pdescriptortagnamechildrenNode1;
        pdescriptortagnamechildrenNode1 = (PDescriptorTagnameChildren)nodeArrayList1.get(0);
	if(pdescriptortagnamechildrenNode1 != null)
	{
	  listNode2.add(pdescriptortagnamechildrenNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ANonTerminal$DescriptorTagnameChildren */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDescriptorTagnameChildren pdescriptortagnamechildrenNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdescriptortagnamechildrenNode2 = (PDescriptorTagnameChildren)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdescriptortagnamechildrenNode2 != null)
	{
	  listNode3.add(pdescriptortagnamechildrenNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {1, SHIFT, 13}, {2, SHIFT, 14}, },
			{{-1, ERROR, 2}, {11, ACCEPT, -1}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 7}, {0, SHIFT, 1}, {5, SHIFT, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 25}, {8, SHIFT, 23}, },
			{{-1, REDUCE, 13}, {7, SHIFT, 26}, },
			{{-1, ERROR, 15}, {3, SHIFT, 29}, {4, SHIFT, 30}, },
			{{-1, REDUCE, 11}, {8, SHIFT, 23}, },
			{{-1, ERROR, 17}, {3, SHIFT, 32}, {4, SHIFT, 33}, },
			{{-1, ERROR, 18}, {2, SHIFT, 14}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 20}, {0, SHIFT, 1}, {5, SHIFT, 18}, },
			{{-1, ERROR, 21}, {5, SHIFT, 36}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 23}, {9, SHIFT, 38}, {10, SHIFT, 39}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 26}, {8, SHIFT, 23}, },
			{{-1, ERROR, 26}, {9, SHIFT, 43}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 14}, {7, SHIFT, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 12}, {8, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 34}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 36}, {1, SHIFT, 13}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 17}, {7, SHIFT, 26}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 46}, {6, SHIFT, 48}, },
			{{-1, REDUCE, 18}, {7, SHIFT, 26}, },
			{{-1, REDUCE, 28}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {12, 22}, {20, 22}, },
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 7}, },
			{{-1, 19}, {20, 35}, },
			{{-1, 15}, {18, 34}, },
			{{-1, 16}, },
			{{-1, 24}, {25, 42}, {31, 42}, },
			{{-1, 40}, },
			{{-1, 27}, {28, 44}, {47, 44}, },
			{{-1, 41}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 10}, },
			{{-1, 17}, {36, 46}, },
			{{-1, 11}, },
			{{-1, 37}, },
			{{-1, 21}, },
			{{-1, 12}, {7, 20}, },
			{{-1, 25}, {16, 31}, },
			{{-1, 28}, {38, 47}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '<*', EOF",
			"expecting: '@OUTPUT', codetag attrib",
			"expecting: EOF",
			"expecting: '<*', codetag close, EOF",
			"expecting: '<*', codetag close",
			"expecting: codetag close",
			"expecting: '*>', codetag open endtoken single, '*>', ':'",
			"expecting: '*>', codetag open endtoken single, '.', ':'",
			"expecting: '*>', codetag open endtoken single",
			"expecting: '*>', codetag open endtoken single, ':'",
			"expecting: codetag attrib",
			"expecting: identifier, symbol backtik text",
			"expecting: identifier",
			"expecting: '*>', codetag open endtoken single, '*>', '.', ':'",
			"expecting: '*>'",
			"expecting: '@OUTPUT'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 3, 3, 4, 3, 3, 3, 5, 0, 6, 7, 8, 9, 8, 10, 3, 4, 5, 3, 11, 6, 6, 12, 13, 7, 4, 3, 9, 5, 3, 14, 3, 15, 3, 13, 6, 6, 6, 6, 13, 13, 3, 14, 13, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
