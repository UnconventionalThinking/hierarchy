/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstractsystems.partita.metacode.grammar.lexer;

import java.io.*;
import com.abstractsystems.partita.metacode.grammar.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.CODETAG; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OT_OPEN; break;
                                case 4: state = State.OT_CLOSE_MIDDLE; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.CODETAG; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 2: state = State.OT_BODY; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 2: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.CODETAG; break;
                                case 3: state = State.OT_CLOSE_START; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.CODETAG; break;
                                case 2: state = State.OT_OPEN; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.CODETAG; break;
                                case 2: state = State.OT_OPEN; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.CODETAG; break;
                                case 5: state = State.OT_CLOSE_MIDDLE; break;
                                case 2: state = State.OT_OPEN; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.CODETAG; break;
                                case 2: state = State.OT_OPEN; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCodetagOpen(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCodetagAttribOutput(line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCodetagAttrib(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCodetagEndtoken(line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCodetagOpenEndtokenSingle(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCodetagClose(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOutputtagCloseEndtoken(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSymbolBacktikText(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpace(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {60, 60, 6}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 7}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{42, 42, 8}, },
            {{9, 32, -2}, },
            {{47, 47, 9}, },
            {},
        }
        { // CODETAG
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {36, 36, 6}, {42, 42, 7}, {46, 46, 8}, {47, 47, 9}, {58, 58, 10}, {64, 64, 11}, {65, 90, 12}, {95, 95, 13}, {96, 96, 14}, {97, 122, 12}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 15}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{36, 36, 16}, {48, 57, 17}, {65, 90, 18}, {95, 95, 19}, {97, 122, 18}, },
            {{62, 62, 20}, },
            {},
            {{42, 42, 21}, },
            {},
            {{36, 36, 22}, {65, 78, 23}, {79, 79, 24}, {80, 90, 23}, {95, 95, 25}, {97, 122, 23}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{0, 9, 26}, {11, 12, 26}, {14, 95, 26}, {96, 96, 27}, {97, 65535, 26}, },
            {{9, 32, -2}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {},
            {{62, 62, 28}, },
            {{36, 36, 29}, {48, 57, 30}, {65, 90, 31}, {95, 95, 32}, {97, 122, 31}, },
            {{36, 122, -24}, },
            {{36, 57, -24}, {65, 84, 31}, {85, 85, 33}, {86, 90, 31}, {95, 122, -24}, },
            {{36, 122, -24}, },
            {{0, 65535, -16}, },
            {},
            {},
            {{36, 122, -24}, },
            {{36, 122, -24}, },
            {{36, 122, -24}, },
            {{36, 122, -24}, },
            {{36, 57, -24}, {65, 83, 31}, {84, 84, 34}, {85, 90, 31}, {95, 122, -24}, },
            {{36, 57, -24}, {65, 79, 31}, {80, 80, 35}, {81, 90, 31}, {95, 122, -24}, },
            {{36, 84, -26}, {85, 85, 36}, {86, 122, -26}, },
            {{36, 83, -35}, {84, 84, 37}, {85, 122, -35}, },
            {{36, 122, -24}, },
        }
        { // OT_OPEN
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {36, 36, 6}, {42, 42, 7}, {46, 46, 8}, {47, 47, 9}, {58, 58, 10}, {65, 90, 11}, {95, 95, 12}, {96, 96, 13}, {97, 122, 11}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 14}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{36, 36, 15}, {48, 57, 16}, {65, 90, 17}, {95, 95, 18}, {97, 122, 17}, },
            {{62, 62, 19}, },
            {},
            {{42, 42, 20}, },
            {},
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{0, 9, 21}, {11, 12, 21}, {14, 95, 21}, {96, 96, 22}, {97, 65535, 21}, },
            {{9, 32, -2}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {},
            {{62, 62, 23}, },
            {{0, 65535, -15}, },
            {},
            {},
        }
        { // OT_BODY
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {60, 60, 6}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 7}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{42, 42, 8}, },
            {{9, 32, -2}, },
            {{47, 47, 9}, },
            {},
        }
        { // OT_CLOSE_START
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {64, 64, 6}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 7}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{79, 79, 8}, },
            {{9, 32, -2}, },
            {{85, 85, 9}, },
            {{84, 84, 10}, },
            {{80, 80, 11}, },
            {{85, 85, 12}, },
            {{84, 84, 13}, },
            {},
        }
        { // OT_CLOSE_MIDDLE
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {36, 36, 6}, {42, 42, 7}, {65, 90, 8}, {95, 95, 9}, {97, 122, 8}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 10}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{36, 36, 11}, {48, 57, 12}, {65, 90, 13}, {95, 95, 14}, {97, 122, 13}, },
            {{62, 62, 15}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{9, 32, -2}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {{36, 122, -8}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {11, 11, 11, 11, 11, 11, -1, 11, 0, 5, },
        // CODETAG
        {11, 11, 11, 11, 11, 11, 9, -1, 7, -1, 8, -1, 9, 9, -1, 11, 9, 9, 9, 9, 3, -1, 2, 2, 2, 2, -1, 10, 4, 2, 2, 2, 2, 2, 2, 2, 2, 1, },
        // OT_OPEN
        {11, 11, 11, 11, 11, 11, 9, -1, 7, -1, 8, 9, 9, -1, 11, 9, 9, 9, 9, 3, -1, -1, 10, 4, },
        // OT_BODY
        {11, 11, 11, 11, 11, 11, -1, 11, -1, 5, },
        // OT_CLOSE_START
        {11, 11, 11, 11, 11, 11, -1, 11, -1, -1, -1, -1, -1, 1, },
        // OT_CLOSE_MIDDLE
        {11, 11, 11, 11, 11, 11, 9, -1, 9, 9, 11, 9, 9, 9, 9, 6, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State CODETAG = new State(1);
        public final static State OT_OPEN = new State(2);
        public final static State OT_BODY = new State(3);
        public final static State OT_CLOSE_START = new State(4);
        public final static State OT_CLOSE_MIDDLE = new State(5);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
