/* Copyright 2012, 2013 Unconventional Thinking
 *
 * This file is part of Hierarchy.
 *
 * Hierarchy is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Hierarchy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Hierarchy.  
 * If not, see <http://www.gnu.org/licenses/>.
 */

package maintests.samples.jaraccesstests;


import java.util.*;

import maintests.samples.typeinfotest.EmbeddedCode_TestClass;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;



public class EmbeddedCodeTest_JarAccessTest {


    @BeforeClass
    public static void setUpClass() throws Exception {  }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }



    @Test
    public void testAccess() throws Exception {

        //  Test using an external matrix ____________________________________________________________________________________

        //  Static Access test field RequiredImagePath
        String resultString = maintests.samples.typeinfotest::Test.Matrix->`First Name`->maintests.samples.typeinfotest::WEB.FORM::FORM.REQUIRED:>RequiredImagePath;


        //  **Need to set the symbol, isRequired_Expected, after the external schemas/matrices have been initialized by the first access of
        //  maintests.samples.typeinfotest::Test.Matrix. Why? because the symbol has not been created yet!
        String requiredImagePath_Expected = "/images/isRequired";
        Symbol isRequired_Expected = :IsRequired;
        Symbol NotRequired_Expected = +:NotRequired;

        Symbol testSym1_Expected = :testSym1;
        int testField2_Expected = 6;


        assertEquals(requiredImagePath_Expected, resultString);

        //  Test Specialized fieldsets
        FieldSet formRequired_FieldSet = (maintests.samples.typeinfotest::Test.Matrix-<*1>`First Name`->maintests.samples.typeinfotest::WEB.FORM::FORM.REQUIRED).get_FieldSet();
        assertEquals(true, formRequired_FieldSet.is_SpecializedFieldSet());
        Symbol resultSymbol = ((maintests.samples.typeinfotest.FieldSetTuple__maintests$__$samples$__$typeinfotest$_CC_$WEB$__$FORM$_S_$FORM$__$REQUIRED)
                                    formRequired_FieldSet).get_IsRequired(executeInfo);
        assertEquals(isRequired_Expected, resultSymbol);






        //  Test a matrix that uses an external schema  ________________________________________________________________

        //  Test Matrix2 Dyn Access USING descTagName var
        DescriptorTagName testDesc_DescTagName = AppSymbols_DescTagName.TEST$__$DESC;
        Object resultObj = maintests.samples.typeinfotest::Test.Matrix2->[`test item`]->[testDesc_DescTagName]:>[:testField1];
        assertEquals(testSym1_Expected, resultObj);

        //  Test Matrix2 Dyn Access USING descTag var
        DescriptorTag testDesc_DescTag = AppSymbols_DescTag.maintests$__$samples$__$typeinfotest$__$anotherpackage$_CC_$Test$__$Schema$_CC_$TEST$__$DESC;
        resultObj = maintests.samples.typeinfotest::Test.Matrix2->[`test item`]->[testDesc_DescTag]:>[:testField1];
        assertEquals(testSym1_Expected, resultObj);

        //  Test Matrix2 Static Access test field
        int testField2 = maintests.samples.typeinfotest::Test.Matrix2->`test item`->TEST.DESC:>testField2;
        assertEquals(testField2_Expected, testField2);




        //  Test the external embedded code ________________________________________________________________
        EmbeddedCode_TestClass embeddedCode_Testclass = new EmbeddedCode_TestClass();

        embeddedCode_Testclass.testAccess();




        ANNOTATIONS {
            *1 {
                return +:"1.0";

            }

            DEFAULT {
                return null;
            }
        }

    }



}