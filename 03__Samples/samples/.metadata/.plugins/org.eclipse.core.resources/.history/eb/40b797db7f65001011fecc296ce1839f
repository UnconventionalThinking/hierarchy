package maintests.samples;

import net.unconventionalthinking.exceptions.*;
import net.unconventionalthinking.matrix.*;
import java.util.Arrays;
import net.unconventionalthinking.lang.*;
import net.unconventionalthinking.matrix.symbols.*;
import net.unconventionalthinking.matrix.metacompiler.codegen.Exception_MetaCompilerError;
import java.util.LinkedList;




public class Registration$__$Form implements MatrixContainer {

	public static Matrix matrix;


	public static Matrix construct(AppControl_Base appControl, ExecutionInfo executeInfo)
		throws Exception_MatrixRuntime_Checked {

		LinkedList<MatrixSet<SchemaInfo_Schema>> schemaSet_ScopeStack = new LinkedList<MatrixSet<SchemaInfo_Schema>>();

		//  Creating a Matrix with name, `Registration`.`Form`__________________________________________________
		try {
			schemaSet_ScopeStack.add(new MatrixSet<SchemaInfo_Schema>().add(
				appControl.schemaControl.schemaFactory.get_BaseSchema(executeInfo),
				appControl.schemaControl.schemaForSchema
			));
		} catch (Exception e) {
			throw new Exception_MatrixRuntime_Checked("while trying to create a new Matrix Or Schema descriptor with the name, `Registration`.`Form`," + 
				" tried to add the Base Schema to the scope stack, but had an error creating it (see inner exception).", e);
		}

		MatrixSet<SchemaInfo_Schema> descriptor11$_X_$MATRIX$_X_$__UsesSchemaSet;
		Descriptor descriptor11$_X_$MATRIX;

		try {
			descriptor11$_X_$MATRIX$_X_$__UsesSchemaSet = new MatrixSet<SchemaInfo_Schema>().add(appControl.schemaControl.schemaIndex_Find(AppSymbols_SchemaName.maintests$__$samples$_CC_$WEB$__$FORM));
			descriptor11$_X_$MATRIX = (Descriptor)appControl.matrixControl.matrixFactory.createNew_Matrix(executeInfo, AppSymbols_Label.Registration$__$Form, AppSymbols_DescTagName.maintests$__$samples, true, descriptor11$_X_$MATRIX$_X_$__UsesSchemaSet, null, true);
			schemaSet_ScopeStack.add(descriptor11$_X_$MATRIX$_X_$__UsesSchemaSet);

		} catch(Exception e) {
			throw new Exception_MatrixRuntime_Checked("Tried to create a new descriptor with the name, MATRIX::MATRIX, and with label, `Registration`.`Form`, but had an error", e);
		}


		//  Creating a Descriptor with descriptor tag, ITEM::ITEM, and label, First Name__________________________________________________
		MatrixSet<SchemaInfo_Schema> descriptor12$_X_$ITEM$_X_$__UsesSchemaSet;
		Descriptor descriptor12$_X_$ITEM;

		try {
			descriptor12$_X_$ITEM$_X_$__UsesSchemaSet = new MatrixSet<SchemaInfo_Schema>();
			descriptor12$_X_$ITEM = (Descriptor)appControl.matrixControl.matrixFactory.createNew_Descriptor(executeInfo, appControl.schemaControl.schemaIndex_Find(AppSymbols_SchemaName.net$__$unconventionalthinking$__$matrix$_CC_$MATRIX$__$STANDARD).getChild_SchemaInfoDescriptor(executeInfo, AppSymbols_DescTag.net$__$unconventionalthinking$__$matrix$_CC_$MATRIX$__$STANDARD$_CC_$ITEM), appControl.symbolControl.multiPartSymbol_Factory.createNew_Label(Arrays.asList("First Name"), 0, true), descriptor12$_X_$ITEM$_X_$__UsesSchemaSet, descriptor11$_X_$MATRIX);
			schemaSet_ScopeStack.add(descriptor12$_X_$ITEM$_X_$__UsesSchemaSet);
			descriptor11$_X_$MATRIX.add_ChildDescriptor(executeInfo, descriptor12$_X_$ITEM);

		} catch(Exception e) {
			throw new Exception_MatrixRuntime_Checked("Tried to create a new descriptor with the name, ITEM::ITEM, and with label, First Name, but had an error", e);
		}


		//  Creating a Descriptor with descriptor tag, FORM.REQUIRED::FORM.REQUIRED, and label, null__________________________________________________
		MatrixSet<SchemaInfo_Schema> descriptor13$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet;
		Descriptor descriptor13$_X_$FORM_REQUIRED;

		try {
			descriptor13$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet = new MatrixSet<SchemaInfo_Schema>();
			descriptor13$_X_$FORM_REQUIRED = (Descriptor)appControl.matrixControl.matrixFactory.createNew_Descriptor(executeInfo, appControl.schemaControl.schemaIndex_Find(AppSymbols_SchemaName.maintests$__$samples$_CC_$WEB$__$FORM).getChild_SchemaInfoDescriptor(executeInfo, AppSymbols_DescTag.maintests$__$samples$_CC_$WEB$__$FORM$_CC_$FORM$__$REQUIRED), null, descriptor13$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet, descriptor12$_X_$ITEM);
			maintests.samples.FieldSetTuple__maintests$__$samples$_CC_$WEB$__$FORM$_S_$FORM$__$REQUIRED descriptor13$_X_$FORM_REQUIRED$_X_$__FieldSet = (maintests.samples.FieldSetTuple__maintests$__$samples$_CC_$WEB$__$FORM$_S_$FORM$__$REQUIRED)descriptor13$_X_$FORM_REQUIRED.get_FieldSet_Tuple(executeInfo);
			descriptor13$_X_$FORM_REQUIRED$_X_$__FieldSet.set_IsRequired(executeInfo, AppSymbols.IsRequired );
			descriptor13$_X_$FORM_REQUIRED$_X_$__FieldSet.set_RequiredImagePath(executeInfo, "/images/isRequired" );
			descriptor13$_X_$FORM_REQUIRED$_X_$__FieldSet.set_ImageHeight(executeInfo, 5 );
			descriptor13$_X_$FORM_REQUIRED$_X_$__FieldSet.set_ImageWidth(executeInfo, 6 );
			schemaSet_ScopeStack.add(descriptor13$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet);
			descriptor12$_X_$ITEM.add_ChildDescriptor(executeInfo, descriptor13$_X_$FORM_REQUIRED);

		} catch(Exception e) {
			throw new Exception_MatrixRuntime_Checked("Tried to create a new descriptor with the name, FORM.REQUIRED::FORM.REQUIRED, and with an empty label, but had an error", e);
		}


		//  Creating a Descriptor with descriptor tag, ITEM::ITEM, and label, Last Name__________________________________________________
		MatrixSet<SchemaInfo_Schema> descriptor14$_X_$ITEM$_X_$__UsesSchemaSet;
		Descriptor descriptor14$_X_$ITEM;

		try {
			descriptor14$_X_$ITEM$_X_$__UsesSchemaSet = new MatrixSet<SchemaInfo_Schema>();
			descriptor14$_X_$ITEM = (Descriptor)appControl.matrixControl.matrixFactory.createNew_Descriptor(executeInfo, appControl.schemaControl.schemaIndex_Find(AppSymbols_SchemaName.net$__$unconventionalthinking$__$matrix$_CC_$MATRIX$__$STANDARD).getChild_SchemaInfoDescriptor(executeInfo, AppSymbols_DescTag.net$__$unconventionalthinking$__$matrix$_CC_$MATRIX$__$STANDARD$_CC_$ITEM), appControl.symbolControl.multiPartSymbol_Factory.createNew_Label(Arrays.asList("Last Name"), 0, true), descriptor14$_X_$ITEM$_X_$__UsesSchemaSet, descriptor11$_X_$MATRIX);
			schemaSet_ScopeStack.add(descriptor14$_X_$ITEM$_X_$__UsesSchemaSet);
			descriptor11$_X_$MATRIX.add_ChildDescriptor(executeInfo, descriptor14$_X_$ITEM);

		} catch(Exception e) {
			throw new Exception_MatrixRuntime_Checked("Tried to create a new descriptor with the name, ITEM::ITEM, and with label, Last Name, but had an error", e);
		}


		//  Creating a Descriptor with descriptor tag, FORM.REQUIRED::FORM.REQUIRED, and label, null__________________________________________________
		MatrixSet<SchemaInfo_Schema> descriptor15$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet;
		Descriptor descriptor15$_X_$FORM_REQUIRED;

		try {
			descriptor15$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet = new MatrixSet<SchemaInfo_Schema>();
			descriptor15$_X_$FORM_REQUIRED = (Descriptor)appControl.matrixControl.matrixFactory.createNew_Descriptor(executeInfo, appControl.schemaControl.schemaIndex_Find(AppSymbols_SchemaName.maintests$__$samples$_CC_$WEB$__$FORM).getChild_SchemaInfoDescriptor(executeInfo, AppSymbols_DescTag.maintests$__$samples$_CC_$WEB$__$FORM$_CC_$FORM$__$REQUIRED), null, descriptor15$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet, descriptor14$_X_$ITEM);
			maintests.samples.FieldSetTuple__maintests$__$samples$_CC_$WEB$__$FORM$_S_$FORM$__$REQUIRED descriptor15$_X_$FORM_REQUIRED$_X_$__FieldSet = (maintests.samples.FieldSetTuple__maintests$__$samples$_CC_$WEB$__$FORM$_S_$FORM$__$REQUIRED)descriptor15$_X_$FORM_REQUIRED.get_FieldSet_Tuple(executeInfo);
			descriptor15$_X_$FORM_REQUIRED$_X_$__FieldSet.set_IsRequired(executeInfo, AppSymbols.NotRequired );
			descriptor15$_X_$FORM_REQUIRED$_X_$__FieldSet.set_RequiredImagePath(executeInfo, "/images/isRequired" );
			descriptor15$_X_$FORM_REQUIRED$_X_$__FieldSet.set_ImageHeight(executeInfo, 5 );
			descriptor15$_X_$FORM_REQUIRED$_X_$__FieldSet.set_ImageWidth(executeInfo, 6 );
			schemaSet_ScopeStack.add(descriptor15$_X_$FORM_REQUIRED$_X_$__UsesSchemaSet);
			descriptor14$_X_$ITEM.add_ChildDescriptor(executeInfo, descriptor15$_X_$FORM_REQUIRED);

		} catch(Exception e) {
			throw new Exception_MatrixRuntime_Checked("Tried to create a new descriptor with the name, FORM.REQUIRED::FORM.REQUIRED, and with an empty label, but had an error", e);
		}

		matrix = (Matrix)descriptor11$_X_$MATRIX;

		return (Matrix)descriptor11$_X_$MATRIX;
	}




	public Class<?> get_AppControl_Class() throws ClassNotFoundException {
		return maintests.samples.AppControl.class;
	}
	public AppControl_Base initialize_AppControl() { return initialize_AppControl(null, false); }
	public AppControl_Base initialize_AppControl(boolean running_AppControl_forMetacompilation) { return initialize_AppControl(null, running_AppControl_forMetacompilation); }
	public AppControl_Base initialize_AppControl(AppControl_Base existing_AppControl) { return initialize_AppControl(existing_AppControl, false); }
	public AppControl_Base initialize_AppControl(AppControl_Base existing_AppControl, boolean running_AppControl_forMetacompilation) {
		if (existing_AppControl != null)
			return maintests.samples.AppControl.initializeApp(existing_AppControl, running_AppControl_forMetacompilation);
		else
			return maintests.samples.AppControl.initializeApp(running_AppControl_forMetacompilation);
	}

	public AppControl_Base get_AppControl() {
		return maintests.samples.AppControl.appControl;
	}

}
